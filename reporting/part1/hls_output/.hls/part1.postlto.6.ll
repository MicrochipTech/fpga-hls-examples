; ModuleID = 'hls_output/.hls/part1.postlto.6.bc'
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"
target triple = "i386-unknown-linux-gnu"

%struct.exp_data = type { double, double, double, double, [4 x double], double, [5 x double], [256 x i64] }
%struct.log2_data = type { double, double, [6 x double], [10 x double], [64 x %struct.anon], [64 x %struct.anon.0] }
%struct.anon = type { double, double }
%struct.anon.0 = type { double, double }
%struct.log_data = type { double, double, [5 x double], [11 x double], [128 x %struct.anon], [128 x %struct.anon.0] }
%struct.pow_log_data = type { double, double, [7 x double], [128 x %struct.anon.11] }
%struct.anon.11 = type { double, double, double, double }
%struct.exp2f_data = type { [32 x i64], double, [3 x double], double, double, [3 x double] }
%struct.log2f_data = type { [16 x %struct.anon], [4 x double] }
%struct.logf_data = type { [16 x %struct.anon], double, [3 x double] }
%struct.powf_log2_data = type { [16 x %struct.anon], [5 x double] }
%struct.sincos_t = type { [4 x double], double, double, double, double, double, double, double, double, double, double }
%struct._reent = type { i32, %struct.__sFILE64*, %struct.__sFILE64*, %struct.__sFILE64*, i32, [25 x i8], i32, %struct.__locale_t*, i32, void (%struct._reent*)*, %struct._Bigint*, i32, %struct._Bigint*, %struct._Bigint**, i32, i8*, %union.anon.0, %struct._atexit*, %struct._atexit, void (i32)**, %struct._glue, [3 x %struct.__sFILE64] }
%struct.__sFILE64 = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, %struct._reent*, i8*, i32 (%struct._reent*, i8*, i8*, i32)*, i32 (%struct._reent*, i8*, i8*, i32)*, i32 (%struct._reent*, i8*, i32, i32)*, i32 (%struct._reent*, i8*)*, %struct.__sbuf, i8*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i32, i64, i64 (%struct._reent*, i8*, i64, i32)*, i32, %struct._mbstate_t }
%struct.__sbuf = type { i8*, i32 }
%struct._mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__locale_t = type opaque
%struct._Bigint = type { %struct._Bigint*, i32, i32, i32, i32, [1 x i32] }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { [30 x i8*], [30 x i32] }
%struct._atexit = type { %struct._atexit*, i32, [32 x void ()*], %struct._on_exit_args }
%struct._on_exit_args = type { [32 x i8*], [32 x i8*], i32, i32 }
%struct._glue = type { %struct._glue*, i32, %struct.__sFILE64* }

@switch.table = private unnamed_addr constant [4 x double] [double 0x3FE921FB54442D18, double 0xBFE921FB54442D18, double 0x4002D97C7F3321D2, double 0xC002D97C7F3321D2]
@switch.table1 = private unnamed_addr constant [4 x double] [double 0.000000e+00, double -0.000000e+00, double 0x400921FB54442D18, double 0xC00921FB54442D18]
@switch.table2 = private unnamed_addr constant [4 x float] [float 0x3FE921FB60000000, float 0xBFE921FB60000000, float 0x4002D97C80000000, float 0xC002D97C80000000]
@switch.table13 = private unnamed_addr constant [4 x float] [float 0.000000e+00, float -0.000000e+00, float 0x400921FB60000000, float 0xC00921FB60000000]
@Zero = internal unnamed_addr constant [2 x float] [float 0.000000e+00, float -0.000000e+00], align 4
@qR8 = internal unnamed_addr constant [6 x float] [float 0.000000e+00, float 0x3FB2C00000000000, float 0x4027895260000000, float 0x40816D6320000000, float 0x40C14D9940000000, float 0x40E212D400000000], align 4
@qS8 = internal unnamed_addr constant [6 x float] [float 0x406478D540000000, float 0x40BFA25840000000, float 0x4101665260000000, float 0x412883DA80000000, float 0x4129A66B20000000, float 0xC114FD6D20000000], align 4
@qR5 = internal unnamed_addr constant [6 x float] [float 0x3DB43D8F20000000, float 0x3FB2BFFFE0000000, float 0x401757B0C0000000, float 0x4060E39200000000, float 0x40900CF9A0000000, float 0x409F17E960000000], align 4
@qS5 = internal unnamed_addr constant [6 x float] [float 0x4054B1B400000000, float 0x40A03BA0E0000000, float 0x40D267D280000000, float 0x40EBB5E3A0000000, float 0x40E1911820000000, float 0xC0B4EA57C0000000], align 4
@qR3 = internal unnamed_addr constant [6 x float] [float 0x3E32CD0360000000, float 0x3FB2BFEE00000000, float 0x400AC0FC60000000, float 0x40454F98A0000000, float 0x406559DBE0000000, float 0x4064D77C80000000], align 4
@qS3 = internal unnamed_addr constant [6 x float] [float 0x40486122C0000000, float 0x40862D8380000000, float 0x40ACF04BE0000000, float 0x40B93C6CE0000000, float 0x40A3A8AAE0000000, float 0xC062A7EB20000000], align 4
@qR2 = internal unnamed_addr constant [6 x float] [float 0x3E84313B60000000, float 0x3FB2BEC540000000, float 0x3FFFF897E0000000, float 0x402CFDBFA0000000, float 0x403FAA8E20000000, float 0x403040B180000000], align 4
@qS2 = internal unnamed_addr constant [6 x float] [float 0x403E5D9700000000, float 0x4070D591E0000000, float 0x408A664520000000, float 0x408B977CA0000000, float 0x406A955300000000, float 0xC0153E6B00000000], align 4
@pR8 = internal unnamed_addr constant [6 x float] [float 0.000000e+00, float -7.031250e-02, float 0xC02029D0C0000000, float 0xC070110280000000, float 0xC0A36A6EC0000000, float 0xC0B4850B40000000], align 4
@pS8 = internal unnamed_addr constant [5 x float] [float 0x405D223300000000, float 0x40ADF37D60000000, float 0x40E3D2BB60000000, float 0x40FC810F80000000, float 0x40E7417740000000], align 4
@pR5 = internal unnamed_addr constant [6 x float] [float 0xBDA918B140000000, float 0xBFB1FFFFE0000000, float 0xC010A37100000000, float 0xC050EB2F60000000, float 0xC074B3B360000000, float 0xC075A6EF20000000], align 4
@pS5 = internal unnamed_addr constant [5 x float] [float 0x404E608100000000, float 0x40906D0260000000, float 0x40B75AF880000000, float 0x40C2CCB900000000, float 0x40A2CC1DC0000000], align 4
@pR3 = internal unnamed_addr constant [6 x float] [float 0xBE25E10360000000, float 0xBFB1FFF700000000, float 0xC00345B2A0000000, float 0xC035F74A40000000, float 0xC04D0A2240000000, float 0xC03F72ACA0000000], align 4
@pS3 = internal unnamed_addr constant [5 x float] [float 0x4041ED9280000000, float 0x4076983940000000, float 0x4092A66E60000000, float 0x40919FFCC0000000, float 0x4065B29700000000], align 4
@pR2 = internal unnamed_addr constant [6 x float] [float 0xBE77D316E0000000, float 0xBFB1FF6240000000, float 0xBFF7363980000000, float 0xC01E8AF3E0000000, float 0xC02662E6C0000000, float 0xC009DE81A0000000], align 4
@pS2 = internal unnamed_addr constant [5 x float] [float 0x40363865A0000000, float 0x4061069E00000000, float 0x4070E78640000000, float 0x40633C0340000000, float 0x402D50B340000000], align 4
@qr8 = internal unnamed_addr constant [6 x float] [float 0.000000e+00, float 0xBFBA400000000000, float 0xC0304591A0000000, float 0xC087BCD060000000, float 0xC0C724E740000000, float 0xC0E7A6D060000000], align 4
@qs8 = internal unnamed_addr constant [6 x float] [float 0x40642CA6E0000000, float 0x40BE9162E0000000, float 0x4100579AC0000000, float 0x4125F65380000000, float 0x412457D280000000, float 0xC111F96900000000], align 4
@qr2 = internal unnamed_addr constant [6 x float] [float 0xBE87F12640000000, float 0xBFBA3E8EA0000000, float 0xC006048460000000, float 0xC033A9E2C0000000, float 0xC04529A3E0000000, float 0xC0355F3640000000], align 4
@qs2 = internal unnamed_addr constant [6 x float] [float 0x403D888A80000000, float 0x406F9F68E0000000, float 0x4087AC05C0000000, float 0x40871B2540000000, float 0x40637E5E40000000, float 0xC013D686E0000000], align 4
@pr8 = internal unnamed_addr constant [6 x float] [float 0.000000e+00, float 1.171875e-01, float 0x402A7A9D40000000, float 0x4079C0D460000000, float 0x40AE457DA0000000, float 0x40BEEA7AC0000000], align 4
@ps8 = internal unnamed_addr constant [5 x float] [float 0x405C8D4580000000, float 0x40AC85DCA0000000, float 0x40E20B86A0000000, float 0x40F7D42CC0000000, float 0x40DE151160000000], align 4
@pr5 = internal unnamed_addr constant [6 x float] [float 0x3DAD0667E0000000, float 0x3FBDFFFFE0000000, float 0x401B360460000000, float 0x405B13B940000000, float 0x40802D16E0000000, float 0x408085B8C0000000], align 4
@ps5 = internal unnamed_addr constant [5 x float] [float 0x404DA3EAA0000000, float 0x408EFB3620000000, float 0x40B4E94460000000, float 0x40BEA4B0C0000000, float 0x4097803000000000], align 4
@pr3 = internal unnamed_addr constant [6 x float] [float 0x3E29FC21A0000000, float 0x3FBDFFF560000000, float 0x400F76BCE0000000, float 0x40418F48A0000000, float 0x4056C38540000000, float 0x4048478F80000000], align 4
@ps3 = internal unnamed_addr constant [5 x float] [float 0x40416549A0000000, float 0x40750C3300000000, float 0x40905B7C60000000, float 0x408BD67DA0000000, float 0x4059F26D80000000], align 4
@pr2 = internal unnamed_addr constant [6 x float] [float 0x3E7CE9D500000000, float 0x3FBDFF42C0000000, float 0x4002F2B800000000, float 0x40287C3780000000, float 0x4031B1A820000000, float 0x40144B49A0000000], align 4
@ps2 = internal unnamed_addr constant [5 x float] [float 0x40356FBD80000000, float 0x405F529320000000, float 0x406D08D8E0000000, float 0x405D6B7AE0000000, float 0x4020BAB200000000], align 4
@Zero4 = internal unnamed_addr constant [2 x double] [double 0.000000e+00, double -0.000000e+00], align 8
@npio2_hw = internal unnamed_addr constant [32 x i32] [i32 1070141184, i32 1078529792, i32 1083624192, i32 1086918400, i32 1090212608, i32 1092012800, i32 1093659904, i32 1095307008, i32 1096954112, i32 1098601216, i32 1099577856, i32 1100401408, i32 1101224960, i32 1102048512, i32 1102872064, i32 1103695616, i32 1104519168, i32 1105342720, i32 1106166272, i32 1106989824, i32 1107554816, i32 1107966464, i32 1108378368, i32 1108790016, i32 1109201920, i32 1109613568, i32 1110025472, i32 1110437120, i32 1110849024, i32 1111260672, i32 1111672576, i32 1112084224], align 4
@two_over_pi = internal constant [198 x i32] [i32 162, i32 249, i32 131, i32 110, i32 78, i32 68, i32 21, i32 41, i32 252, i32 39, i32 87, i32 209, i32 245, i32 52, i32 221, i32 192, i32 219, i32 98, i32 149, i32 153, i32 60, i32 67, i32 144, i32 65, i32 254, i32 81, i32 99, i32 171, i32 222, i32 187, i32 197, i32 97, i32 183, i32 36, i32 110, i32 58, i32 66, i32 77, i32 210, i32 224, i32 6, i32 73, i32 46, i32 234, i32 9, i32 209, i32 146, i32 28, i32 254, i32 29, i32 235, i32 28, i32 177, i32 41, i32 167, i32 62, i32 232, i32 130, i32 53, i32 245, i32 46, i32 187, i32 68, i32 132, i32 233, i32 156, i32 112, i32 38, i32 180, i32 95, i32 126, i32 65, i32 57, i32 145, i32 214, i32 57, i32 131, i32 83, i32 57, i32 244, i32 156, i32 132, i32 95, i32 139, i32 189, i32 249, i32 40, i32 59, i32 31, i32 248, i32 151, i32 255, i32 222, i32 5, i32 152, i32 15, i32 239, i32 47, i32 17, i32 139, i32 90, i32 10, i32 109, i32 31, i32 109, i32 54, i32 126, i32 207, i32 39, i32 203, i32 9, i32 183, i32 79, i32 70, i32 63, i32 102, i32 158, i32 95, i32 234, i32 45, i32 117, i32 39, i32 186, i32 199, i32 235, i32 229, i32 241, i32 123, i32 61, i32 7, i32 57, i32 247, i32 138, i32 82, i32 146, i32 234, i32 107, i32 251, i32 95, i32 177, i32 31, i32 141, i32 93, i32 8, i32 86, i32 3, i32 48, i32 70, i32 252, i32 123, i32 107, i32 171, i32 240, i32 207, i32 188, i32 32, i32 154, i32 244, i32 54, i32 29, i32 169, i32 227, i32 145, i32 97, i32 94, i32 230, i32 27, i32 8, i32 101, i32 153, i32 133, i32 95, i32 20, i32 160, i32 104, i32 64, i32 141, i32 255, i32 216, i32 128, i32 77, i32 115, i32 39, i32 49, i32 6, i32 6, i32 21, i32 86, i32 202, i32 115, i32 168, i32 201, i32 96, i32 226, i32 123, i32 192, i32 140, i32 107], align 4
@qR87 = internal unnamed_addr constant [6 x double] [double 0.000000e+00, double 0x3FB2BFFFFFFFFE2C, double 0x402789525BB334D6, double 0x40816D6315301825, double 0x40C14D993E18F46D, double 0x40E212D40E901566], align 8
@qS88 = internal unnamed_addr constant [6 x double] [double 0x406478D5365B39BC, double 0x40BFA2584E6B0563, double 0x4101665254D38C3F, double 0x412883DA83A52B43, double 0x4129A66B28DE0B3D, double 0xC114FD6D2C9530C5], align 8
@qR59 = internal unnamed_addr constant [6 x double] [double 0x3DB43D8F29CC8CD9, double 0x3FB2BFFFD172B04C, double 0x401757B0B9953DD3, double 0x4060E3920A8788E9, double 0x40900CF99DC8C481, double 0x409F17E953C6E3A6], align 8
@qS510 = internal unnamed_addr constant [6 x double] [double 0x4054B1B3FB5E1543, double 0x40A03BA0DA21C0CE, double 0x40D267D27B591E6D, double 0x40EBB5E397E02372, double 0x40E191181F7A54A0, double 0xC0B4EA57BEDBC609], align 8
@qR311 = internal unnamed_addr constant [6 x double] [double 0x3E32CD036ADECB82, double 0x3FB2BFEE0E8D0842, double 0x400AC0FC61149CF5, double 0x40454F98962DAEDD, double 0x406559DBE25EFD1F, double 0x4064D77C81FA21E0], align 8
@qS312 = internal unnamed_addr constant [6 x double] [double 0x40486122BFE343A6, double 0x40862D8386544EB3, double 0x40ACF04BE44DFC63, double 0x40B93C6CD7C76A28, double 0x40A3A8AAD94FB1C0, double 0xC062A7EB201CF40F], align 8
@qR213 = internal unnamed_addr constant [6 x double] [double 0x3E84313B54F76BDB, double 0x3FB2BEC53E883E34, double 0x3FFFF897E727779C, double 0x402CFDBFAAF96FE5, double 0x403FAA8E29FBDC4A, double 0x403040B171814BB4], align 8
@qS214 = internal unnamed_addr constant [6 x double] [double 0x403E5D96F7C07AED, double 0x4070D591E4D14B40, double 0x408A664522B3BF22, double 0x408B977C9C5CC214, double 0x406A95530E001365, double 0xC0153E6AF8B32931], align 8
@pR815 = internal unnamed_addr constant [6 x double] [double 0.000000e+00, double 0xBFB1FFFFFFFFFD32, double 0xC02029D0B44FA779, double 0xC07011027B19E863, double 0xC0A36A6ECD4DCAFC, double 0xC0B4850B36CC643D], align 8
@pS816 = internal unnamed_addr constant [5 x double] [double 0x405D223307A96751, double 0x40ADF37D50596938, double 0x40E3D2BB6EB6B05F, double 0x40FC810F8F9FA9BD, double 0x40E741774F2C49DC], align 8
@pR517 = internal unnamed_addr constant [6 x double] [double 0xBDA918B147E495CC, double 0xBFB1FFFFE69AFBC6, double 0xC010A370F90C6BBF, double 0xC050EB2F5A7D1783, double 0xC074B3B36742CC63, double 0xC075A6EF28A38BD7], align 8
@pS518 = internal unnamed_addr constant [5 x double] [double 0x404E60810C98C5DE, double 0x40906D025C7E2864, double 0x40B75AF88FBE1D60, double 0x40C2CCB8FA76FA38, double 0x40A2CC1DC70BE864], align 8
@pR319 = internal unnamed_addr constant [6 x double] [double 0xBE25E1036FE1AA86, double 0xBFB1FFF6F7C0E24B, double 0xC00345B2AEA48074, double 0xC035F74A4CB94E14, double 0xC04D0A22420A1A45, double 0xC03F72ACA892D80F], align 8
@pS320 = internal unnamed_addr constant [5 x double] [double 0x4041ED9284077DD3, double 0x40769839464A7C0E, double 0x4092A66E6D1061D6, double 0x40919FFCB8C39B7E, double 0x4065B296FC379081], align 8
@pR221 = internal unnamed_addr constant [6 x double] [double 0xBE77D316E927026D, double 0xBFB1FF62495E1E42, double 0xBFF736398A24A843, double 0xC01E8AF3EDAFA7F3, double 0xC02662E6C5246303, double 0xC009DE81AF8FE70F], align 8
@pS222 = internal unnamed_addr constant [5 x double] [double 0x40363865908B5959, double 0x4061069E0EE8878F, double 0x4070E78642EA079B, double 0x40633C033AB6FAFF, double 0x402D50B344391809], align 8
@qr823 = internal unnamed_addr constant [6 x double] [double 0.000000e+00, double 0xBFBA3FFFFFFFFDF3, double 0xC0304591A26779F7, double 0xC087BCD053E4B576, double 0xC0C724E740F87415, double 0xC0E7A6D065D09C6A], align 8
@qs824 = internal unnamed_addr constant [6 x double] [double 0x40642CA6DE5BCDE5, double 0x40BE9162D0D88419, double 0x4100579AB0B75E98, double 0x4125F65372869C19, double 0x412457D27719AD5C, double 0xC111F9690EA5AA18], align 8
@qr5 = internal unnamed_addr constant [6 x double] [double 0xBDB6FA431AA1A098, double 0xBFBA3FFFCB597FEF, double 0xC0201CE6CA03AD4B, double 0xC066F56D6CA7B9B0, double 0xC09574C66931734F, double 0xC0A468E388FDA79D], align 8
@qs5 = internal unnamed_addr constant [6 x double] [double 0x405451B2FF5A11B2, double 0x409F1F31E77BF839, double 0x40D10F1F0D64CE29, double 0x40E8576DAABAD197, double 0x40DB4B04CF7C364B, double 0xC0B26F2EFCFFA004], align 8
@qr3 = internal unnamed_addr constant [6 x double] [double 0xBE35CFA9D38FC84F, double 0xBFBA3FEB51AEED54, double 0xC01270C23302D9FF, double 0xC04CEC71C25D16DA, double 0xC06C87D34718D55F, double 0xC06B66B95F5C1BF6], align 8
@qs3 = internal unnamed_addr constant [6 x double] [double 0x4047D523CCD367E4, double 0x40850EEBC031EE3E, double 0x40AA684E448E7C9A, double 0x40B5ABBAA61D54A6, double 0x409DBC7A0DD4DF4B, double 0xC060E670290A311F], align 8
@qr225 = internal unnamed_addr constant [6 x double] [double 0xBE87F12644C626D2, double 0xBFBA3E8E9148B010, double 0xC006048469BB4EDA, double 0xC033A9E2C168907F, double 0xC04529A3DE104AAA, double 0xC0355F3639CF6E52], align 8
@qs226 = internal unnamed_addr constant [6 x double] [double 0x403D888A78AE64FF, double 0x406F9F68DB821CBA, double 0x4087AC05CE49A0F7, double 0x40871B2548D4C029, double 0x40637E5E3C3ED8D4, double 0xC013D686E71BE86B], align 8
@pr827 = internal unnamed_addr constant [6 x double] [double 0.000000e+00, double 0x3FBDFFFFFFFFFCCE, double 0x402A7A9D357F7FCE, double 0x4079C0D4652EA590, double 0x40AE457DA3A532CC, double 0x40BEEA7AC32782DD], align 8
@ps828 = internal unnamed_addr constant [5 x double] [double 0x405C8D458E656CAC, double 0x40AC85DC964D274F, double 0x40E20B8697C5BB7F, double 0x40F7D42CB28F17BB, double 0x40DE1511697A0B2D], align 8
@pr529 = internal unnamed_addr constant [6 x double] [double 0x3DAD0667DAE1CA7D, double 0x3FBDFFFFE2C10043, double 0x401B36046E6315E3, double 0x405B13B9452602ED, double 0x40802D16D052D649, double 0x408085B8BB7E0CB7], align 8
@ps530 = internal unnamed_addr constant [5 x double] [double 0x404DA3EAA8AF633D, double 0x408EFB361B066701, double 0x40B4E9445706B6FB, double 0x40BEA4B0B8A5BB15, double 0x40978030036F5E51], align 8
@pr331 = internal unnamed_addr constant [6 x double] [double 0x3E29FC21A7AD9EDD, double 0x3FBDFFF55B21D17B, double 0x400F76BCE85EAD8A, double 0x40418F489DA6D129, double 0x4056C3854D2C1837, double 0x4048478F8EA83EE5], align 8
@ps332 = internal unnamed_addr constant [5 x double] [double 0x40416549A134069C, double 0x40750C3307F1A75F, double 0x40905B7C5037D523, double 0x408BD67DA32E31E9, double 0x4059F26D7C2EED53], align 8
@pr233 = internal unnamed_addr constant [6 x double] [double 0x3E7CE9D4F65544F4, double 0x3FBDFF42BE760D83, double 0x4002F2B7F98FAEC0, double 0x40287C377F71A964, double 0x4031B1A8177F8EE2, double 0x40144B49A574C1FE], align 8
@ps234 = internal unnamed_addr constant [5 x double] [double 0x40356FBD8AD5ECDC, double 0x405F529314F92CD5, double 0x406D08D8D5A2DBD9, double 0x405D6B7ADA1884A9, double 0x4020BAB1F44E5192], align 8
@npio2_hw35 = internal unnamed_addr constant [32 x i32] [i32 1073291771, i32 1074340347, i32 1074977148, i32 1075388923, i32 1075800698, i32 1076025724, i32 1076231611, i32 1076437499, i32 1076643386, i32 1076849274, i32 1076971356, i32 1077074300, i32 1077177244, i32 1077280187, i32 1077383131, i32 1077486075, i32 1077589019, i32 1077691962, i32 1077794906, i32 1077897850, i32 1077968460, i32 1078019932, i32 1078071404, i32 1078122876, i32 1078174348, i32 1078225820, i32 1078277292, i32 1078328763, i32 1078380235, i32 1078431707, i32 1078483179, i32 1078534651], align 4
@two_over_pi36 = internal constant [66 x i32] [i32 10680707, i32 7228996, i32 1387004, i32 2578385, i32 16069853, i32 12639074, i32 9804092, i32 4427841, i32 16666979, i32 11263675, i32 12935607, i32 2387514, i32 4345298, i32 14681673, i32 3074569, i32 13734428, i32 16653803, i32 1880361, i32 10960616, i32 8533493, i32 3062596, i32 8710556, i32 7349940, i32 6258241, i32 3772886, i32 3769171, i32 3798172, i32 8675211, i32 12450088, i32 3874808, i32 9961438, i32 366607, i32 15675153, i32 9132554, i32 7151469, i32 3571407, i32 2607881, i32 12013382, i32 4155038, i32 6285869, i32 7677882, i32 13102053, i32 15825725, i32 473591, i32 9065106, i32 15363067, i32 6271263, i32 9264392, i32 5636912, i32 4652155, i32 7056368, i32 13614112, i32 10155062, i32 1944035, i32 9527646, i32 15080200, i32 6658437, i32 6231200, i32 6832269, i32 16767104, i32 5075751, i32 3212806, i32 1398474, i32 7579849, i32 6349435, i32 12618859], align 4
@__exp_data = hidden constant %struct.exp_data { double 0x40671547652B82FE, double 0x4338000000000000, double 0xBF762E42FEFA0000, double 0xBD0CF79ABC9E3B3A, [4 x double] [double 0x3FDFFFFFFFFFFDBD, double 0x3FC555555555543C, double 0x3FA55555CF172B91, double 0x3F81111167A4D017], double 0x42C8000000000000, [5 x double] [double 0x3FE62E42FEFA39EF, double 0x3FCEBFBDFF82C424, double 0x3FAC6B08D70CF4B5, double 0x3F83B2ABD24650CC, double 0x3F55D7E09B4E3A84], [256 x i64] [i64 0, i64 4607182418800017408, i64 4367149474599452526, i64 4607171688528556853, i64 -4868004084858692515, i64 4607161091040444513, i64 -4859280119576434991, i64 4607150627056680837, i64 4363093389540324883, i64 4607140297302181236, i64 -4860564323061625094, i64 4607130102505797342, i64 4350749156061923425, i64 4607120043400338376, i64 4364168240100004761, i64 4607110120722592643, i64 4366128403083131757, i64 4607100335213349135, i64 4363624214708482044, i64 4607090687617419255, i64 4341116261916187857, i64 4607081178683658658, i64 -4870076522866643445, i64 4607071809164989211, i64 -4857881712154133234, i64 4607062579818421073, i64 -4877256630102726059, i64 4607053491405074892, i64 -4858881367677209578, i64 4607044544690204128, i64 4359717415120819631, i64 4607035740443217489, i64 -4863857816615152824, i64 4607027079437701499, i64 -4859630355816238531, i64 4607018562451443178, i64 4362731899485115327, i64 4607010190266452853, i64 -4857455882053489882, i64 4607001963668987092, i64 4367063335334195040, i64 4606993883449571754, i64 -4859410923963139939, i64 4606985950403025181, i64 4362421515177083789, i64 4606978165328481494, i64 4359618604155798653, i64 4606970529029414038, i64 4365834109879625876, i64 4606963042313658936, i64 4361558225371547773, i64 4606955705993438783, i64 4359562691856033778, i64 4606948520885386461, i64 -4857492308587640738, i64 4606941487810569089, i64 4360319936817113905, i64 4606934607594512097, i64 -4882709470952570886, i64 4606927881067223440, i64 4362641697437125300, i64 4606921309063217931, i64 4354440509323660175, i64 4606914892421541718, i64 4360414030434708406, i64 4606908631985796885, i64 4361245865020257356, i64 4606902528604166193, i64 4363949802402347082, i64 4606896583129437951, i64 -4862018976549545212, i64 4606890796419031025, i64 -4858738662784151448, i64 4606885169335019979, i64 -4856841960950780530, i64 4606879702744160358, i64 -4867878926798276910, i64 4606874397517914103, i64 -4856823124960863467, i64 4606869254532475109, i64 4361066948569222253, i64 4606864274668794914, i64 -4858519367427004022, i64 4606859458812608540, i64 -4874962362796897957, i64 4606854807854460458, i64 -4864964451502548453, i64 4606850322689730711, i64 4342424336897059857, i64 4606846004218661165, i64 4365789078613288175, i64 4606841853346381911, i64 4354643160121541497, i64 4606837870982937808, i64 4365113450260533808, i64 4606834058043315166, i64 4356828907110576048, i64 4606830415447468583, i64 4364865165386375287, i64 4606826944120347917, i64 -4859502521842818162, i64 4606823644991925415, i64 -4861672301267803319, i64 4606820518997222978, i64 -4865894452217038753, i64 4606817567076339586, i64 -4862178651875353354, i64 4606814790174478863, i64 4364890759862540174, i64 4606812189241976794, i64 4358244976955136773, i64 4606809765234329597, i64 4364097860734309385, i64 4606807519112221737, i64 4338311716453074666, i64 4606805451841554103, i64 4365169902980743221, i64 4606803564393472328, i64 -4860258889723447649, i64 4606801857744395273, i64 -4860452975632495192, i64 4606800332876043653, i64 -4862669920490755666, i64 4606798990775468832, i64 -4858312122400614312, i64 4606797832435081765, i64 4347962289735735652, i64 4606796858852682099, i64 -4858341730713460184, i64 4606796071031487437, i64 -4870059510540748414, i64 4606795469980162751, i64 -4871936092595705362, i64 4606795056712849967, i64 -4863645441585018799, i64 4606794832249197700, i64 -4866104880896786737, i64 4606794797614391156, i64 -4861936742874514000, i64 4606794953839182196, i64 -4862171044651866486, i64 4606795301959919561, i64 4364160436192007379, i64 4606795843018579263, i64 -4865239048860621539, i64 4606796578062795143, i64 4365374511615819883, i64 4606797508145889586, i64 4352143969406577749, i64 4606798634326904418, i64 -4861457929465508030, i64 4606799957670631954, i64 -4858423338550479052, i64 4606801479247646227, i64 -4863783675556659426, i64 4606803200134334381, i64 -4858024654332078226, i64 4606805121412928237, i64 4364178698342926848, i64 4606807244171536025, i64 4363345029737015988, i64 4606809569504174299, i64 -4871286895867992065, i64 4606812098510800012, i64 4358348108421357380, i64 4606814832297342774, i64 -4858529541450220157, i64 4606817771975737286, i64 -4873552611666813399, i64 4606820918663955941, i64 -4869477542650660519, i64 4606824273486041615, i64 -4858747092350994006, i64 4606827837572140624, i64 -4862257653857481141, i64 4606831612058535866, i64 4355455812241575463, i64 4606835598087680144, i64 4354367543587795899, i64 4606839796808229667, i64 -4861700651175763357, i64 4606844209375077733, i64 4362612029712904661, i64 4606848836949388595, i64 -4858896013081134315, i64 4606853680698631517, i64 4364212552380330450, i64 4606858741796615000, i64 4360726356711135923, i64 4606864021423521215, i64 -4863078573502718540, i64 4606869520765940602, i64 4362891239881388935, i64 4606875241016906669, i64 -4859248142566958598, i64 4606881183375930982, i64 -4875775683326071110, i64 4606887349049038331, i64 -4859203616861915584, i64 4606893739248802106, i64 -4870406652589927628, i64 4606900355194379847, i64 -4858839866725070283, i64 4606907198111549002, i64 4356388038631218637, i64 4606914269232742866, i64 -4858893633017702228, i64 4606921569797086729, i64 4355946959017544883, i64 4606929101050434204, i64 4363674894410448276, i64 4606936864245403770, i64 4360857247493478828, i64 4606944860641415499, i64 4351547817417644647, i64 4606953091504727989, i64 4352565403421120872, i64 4606961558108475497, i64 -4863735759665056302, i64 4606970261732705274, i64 -4859474856892171665, i64 4606979203664415100, i64 -4859368956010059447, i64 4606988385197591026, i64 4356286533989107623, i64 4606997807633245319, i64 -4863164539274780145, i64 4607007472279454616, i64 4363524392198705836, i64 4607017380451398277, i64 4360674496013757259, i64 4607027533471396960, i64 -4863090309766824417, i64 4607037932668951391, i64 -4861307347717911095, i64 4607048579380781353, i64 4356306869484685523, i64 4607059474950864886, i64 4360546482996998769, i64 4607070620730477699, i64 -4859393813814996496, i64 4607082018078232794, i64 -4860036451210660739, i64 4607093668360120305, i64 4363640302291525640, i64 4607105572949547559, i64 4360658257139329842, i64 4607117733227379351, i64 4362409866909812206, i64 4607130150581978432, i64 -4859885672053611539, i64 4607142826409246228, i64 4357102052301720989, i64 4607155762112663768, i64 4346824392926350473, i64 4607168959103332849] }, align 4
@init_jk = internal unnamed_addr constant [3 x i32] [i32 4, i32 7, i32 9], align 4
@.str = private unnamed_addr constant [10 x i8] c"recompute\00", section "llvm.metadata"
@PIo2 = internal unnamed_addr constant [11 x float] [float 0x3FF9200000000000, float 0x3F3E000000000000, float 0x3EFB400000000000, float 0x3E74400000000000, float 0x3DD0800000000000, float 0x3D6A000000000000, float 0x3CF8400000000000, float 0x3C5A000000000000, float 0x3BF8800000000000, float 0x3B78C00000000000, float 0x3AE8800000000000], align 4
@init_jk53 = internal unnamed_addr constant [4 x i32] [i32 2, i32 3, i32 4, i32 6], align 4
@.str54 = private unnamed_addr constant [10 x i8] c"recompute\00", section "llvm.metadata"
@PIo255 = internal unnamed_addr constant [8 x double] [double 0x3FF921FB40000000, double 0x3E74442D00000000, double 0x3CF8469880000000, double 0x3B78CC5160000000, double 0x39F01B8380000000, double 0x387A252040000000, double 0x36E3822280000000, double 0x3569F31D00000000], align 8
@__log2_data = hidden constant %struct.log2_data { double 0x3FF7154765200000, double 0x3DE705FC2EEFA200, [6 x double] [double 0xBFE71547652B8339, double 0x3FDEC709DC3A04BE, double 0xBFD7154764702FFB, double 0x3FD2776C50034C48, double 0xBFCEC7B328EA92BC, double 0x3FCA6225E117F92E], [10 x double] [double 0xBFE71547652B82FE, double 0x3FDEC709DC3A03F7, double 0xBFD71547652B7C3F, double 0x3FD2776C50F05BE4, double 0xBFCEC709DD768FE5, double 0x3FCA61761EC4E736, double 0xBFC7153FBC64A79B, double 0x3FC484D154F01B4A, double 0xBFC289E4A72C383C, double 0x3FC0B32F285AEE66], [64 x %struct.anon] [%struct.anon { double 0x3FF724286BB1ACF8, double 0xBFE1095FEECDB000 }, %struct.anon { double 0x3FF6E1F766D2CCA1, double 0xBFE08494BD76D000 }, %struct.anon { double 0x3FF6A13D0E30D48A, double 0xBFE00143AEE8F800 }, %struct.anon { double 0x3FF661EC32D06C85, double 0xBFDEFEC5360B4000 }, %struct.anon { double 0x3FF623FA951198F8, double 0xBFDDFDD91AB7E000 }, %struct.anon { double 0x3FF5E75BA4CF026C, double 0xBFDCFFAE0CC79000 }, %struct.anon { double 0x3FF5AC055A214FB8, double 0xBFDC043811FDA000 }, %struct.anon { double 0x3FF571ED0F166E1E, double 0xBFDB0B67323AE000 }, %struct.anon { double 0x3FF53909590BF835, double 0xBFDA152F5A2DB000 }, %struct.anon { double 0x3FF5014FED61ADDD, double 0xBFD9217F5AF86000 }, %struct.anon { double 0x3FF4CAB88E487BD0, double 0xBFD8304DB0719000 }, %struct.anon { double 0x3FF49539B4334FEE, double 0xBFD74189F9A9E000 }, %struct.anon { double 0x3FF460CBDFAFD569, double 0xBFD6552BB5199000 }, %struct.anon { double 0x3FF42D664EE4B953, double 0xBFD56B23A29B1000 }, %struct.anon { double 0x3FF3FB01111DD8A6, double 0xBFD483650F5FA000 }, %struct.anon { double 0x3FF3C995B70C5836, double 0xBFD39DE937F6A000 }, %struct.anon { double 0x3FF3991C4AB6FD4A, double 0xBFD2BAA1538D6000 }, %struct.anon { double 0x3FF3698E0CE099B5, double 0xBFD1D98340CA4000 }, %struct.anon { double 0x3FF33AE48213E7B2, double 0xBFD0FA853A40E000 }, %struct.anon { double 0x3FF30D191985BDB1, double 0xBFD01D9C32E73000 }, %struct.anon { double 0x3FF2E025CAB271D7, double 0xBFCE857DA2FA6000 }, %struct.anon { double 0x3FF2B404CF13CD82, double 0xBFCCD3C8633D8000 }, %struct.anon { double 0x3FF288B02C7CCB50, double 0xBFCB26034C14A000 }, %struct.anon { double 0x3FF25E2263944DE5, double 0xBFC97C1C2F4FE000 }, %struct.anon { double 0x3FF234563D8615B1, double 0xBFC7D6023F800000 }, %struct.anon { double 0x3FF20B46E33EAF38, double 0xBFC633A71A05E000 }, %struct.anon { double 0x3FF1E2EEFDCDA3DD, double 0xBFC494F5E9570000 }, %struct.anon { double 0x3FF1BB4A580B3930, double 0xBFC2F9E424E0A000 }, %struct.anon { double 0x3FF19453847F2200, double 0xBFC162595AFDC000 }, %struct.anon { double 0x3FF16E06C0D5D73C, double 0xBFBF9C9A75BD8000 }, %struct.anon { double 0x3FF1485F47B7E4C2, double 0xBFBC7B575BF9C000 }, %struct.anon { double 0x3FF12358AD0085D1, double 0xBFB960C60FF48000 }, %struct.anon { double 0x3FF0FEF00F532227, double 0xBFB64CE247B60000 }, %struct.anon { double 0x3FF0DB2077D03A8F, double 0xBFB33F78B2014000 }, %struct.anon { double 0x3FF0B7E6D65980D9, double 0xBFB0387D1A42C000 }, %struct.anon { double 0x3FF0953EFE7B408D, double 0xBFAA6F9208B50000 }, %struct.anon { double 0x3FF07325CAC53B83, double 0xBFA47A954F770000 }, %struct.anon { double 0x3FF05197E40D1B5C, double 0xBF9D23A8C50C0000 }, %struct.anon { double 0x3FF03091C1208EA2, double 0xBF916A2629780000 }, %struct.anon { double 0x3FF0101025B37E21, double 0xBF7720F8D8E80000 }, %struct.anon { double 0x3FEFC07EF9CAA76B, double 0x3F86FE53B1500000 }, %struct.anon { double 0x3FEF4465D3F6F184, double 0x3FA11CCCE10F8000 }, %struct.anon { double 0x3FEECC079F84107F, double 0x3FAC4DFC8C8B8000 }, %struct.anon { double 0x3FEE573A99975AE8, double 0x3FB3AA321E574000 }, %struct.anon { double 0x3FEDE5D6F0BD3DE6, double 0x3FB918A0D08B8000 }, %struct.anon { double 0x3FED77B681FF38B3, double 0x3FBE72E9DA044000 }, %struct.anon { double 0x3FED0CB5724DE943, double 0x3FC1DCD2507F6000 }, %struct.anon { double 0x3FECA4B2DC0E7563, double 0x3FC476AB03DEA000 }, %struct.anon { double 0x3FEC3F8EE8D6CB51, double 0x3FC7074377E22000 }, %struct.anon { double 0x3FEBDD2B4F020C4C, double 0x3FC98EDE8BA94000 }, %struct.anon { double 0x3FEB7D6C006015CA, double 0x3FCC0DB86AD2E000 }, %struct.anon { double 0x3FEB20366E2E338F, double 0x3FCE840AAFCEE000 }, %struct.anon { double 0x3FEAC57026295039, double 0x3FD0790AB4678000 }, %struct.anon { double 0x3FEA6D01BC2731DD, double 0x3FD1AC056801C000 }, %struct.anon { double 0x3FEA16D3BC3FF18B, double 0x3FD2DB11D4FEE000 }, %struct.anon { double 0x3FE9C2D14967FEAD, double 0x3FD406464EC58000 }, %struct.anon { double 0x3FE970E4F47C9902, double 0x3FD52DBE093AF000 }, %struct.anon { double 0x3FE920FB3982BCF2, double 0x3FD651902050D000 }, %struct.anon { double 0x3FE8D30187F759F1, double 0x3FD771D2CDEAF000 }, %struct.anon { double 0x3FE886E5EBB9F66D, double 0x3FD88E9C857D9000 }, %struct.anon { double 0x3FE83C97B658B994, double 0x3FD9A80155E16000 }, %struct.anon { double 0x3FE7F405FFC61022, double 0x3FDABE186ED3D000 }, %struct.anon { double 0x3FE7AD22181415CA, double 0x3FDBD0F2AEA0E000 }, %struct.anon { double 0x3FE767DCF99EFF8C, double 0x3FDCE0A43DBF4000 }], [64 x %struct.anon.0] [%struct.anon.0 { double 0x3FE6200012B90A8E, double 0x3C8904AB0644B605 }, %struct.anon.0 { double 0x3FE66000045734A6, double 0x3C61FF9BEA62F7A9 }, %struct.anon.0 { double 0x3FE69FFFC325F2C5, double 0x3C827ECFCB3C90BA }, %struct.anon.0 { double 0x3FE6E00038B95A04, double 0x3C88FF8856739326 }, %struct.anon.0 { double 0x3FE71FFFE09994E3, double 0x3C8AFD40275F82B1 }, %struct.anon.0 { double 0x3FE7600015590E10, double 0xBC72FD75B4238341 }, %struct.anon.0 { double 0x3FE7A00012655BD5, double 0x3C7808E67C242B76 }, %struct.anon.0 { double 0x3FE7E0003259E9A6, double 0xBC6208E426F622B7 }, %struct.anon.0 { double 0x3FE81FFFEDB4B2D2, double 0xBC8402461EA5C92F }, %struct.anon.0 { double 0x3FE860002DFAFCC3, double 0x3C6DF7F4A2F29A1F }, %struct.anon.0 { double 0x3FE89FFFF78C6B50, double 0xBC8E0453094995FD }, %struct.anon.0 { double 0x3FE8E00039671566, double 0xBC8A04F3BEC77B45 }, %struct.anon.0 { double 0x3FE91FFFE2BF1745, double 0xBC77FA34400E203C }, %struct.anon.0 { double 0x3FE95FFFCC5C9FD1, double 0xBC76FF8005A0695D }, %struct.anon.0 { double 0x3FE9A0003BBA4767, double 0x3C70F8C4C4EC7E03 }, %struct.anon.0 { double 0x3FE9DFFFE7B92DA5, double 0x3C8E7FD9478C4602 }, %struct.anon.0 { double 0x3FEA1FFFD72EFDAF, double 0xBC6A0C554DCDAE7E }, %struct.anon.0 { double 0x3FEA5FFFDE04FF95, double 0x3C867DA98CE9B26B }, %struct.anon.0 { double 0x3FEA9FFFCA5E8D2B, double 0xBC8284C9B54C13DE }, %struct.anon.0 { double 0x3FEADFFFDDAD03EA, double 0x3C5812C8EA602E3C }, %struct.anon.0 { double 0x3FEB1FFFF10D3D4D, double 0xBC8EFADDAD27789C }, %struct.anon.0 { double 0x3FEB5FFFCE21165A, double 0x3C53CB1719C61237 }, %struct.anon.0 { double 0x3FEB9FFFD950E674, double 0x3C73F7D94194CE00 }, %struct.anon.0 { double 0x3FEBE000139CA8AF, double 0x3C750AC4215D9BC0 }, %struct.anon.0 { double 0x3FEC20005B46DF99, double 0x3C6BEEA653E9C1C9 }, %struct.anon.0 { double 0x3FEC600040B9F7AE, double 0xBC7C079F274A70D6 }, %struct.anon.0 { double 0x3FECA0006255FD8A, double 0xBC7A0B4076E84C1F }, %struct.anon.0 { double 0x3FECDFFFD94C095D, double 0x3C88F933F99AB5D7 }, %struct.anon.0 { double 0x3FED1FFFF975D6CF, double 0xBC582C08665FE1BE }, %struct.anon.0 { double 0x3FED5FFFA2561C93, double 0xBC7B04289BD295F3 }, %struct.anon.0 { double 0x3FED9FFF9D228B0C, double 0x3C870251340FA236 }, %struct.anon.0 { double 0x3FEDE00065BC7E16, double 0xBC75011E16A4D80C }, %struct.anon.0 { double 0x3FEE200002F64791, double 0x3C89802F09EF62E0 }, %struct.anon.0 { double 0x3FEE600057D7A6D8, double 0xBC7E0B75580CF7FA }, %struct.anon.0 { double 0x3FEEA00027EDC00C, double 0xBC8C848309459811 }, %struct.anon.0 { double 0x3FEEE0006CF5CB7C, double 0xBC8F8027951576F4 }, %struct.anon.0 { double 0x3FEF2000782B7DCC, double 0xBC8F81D97274538F }, %struct.anon.0 { double 0x3FEF6000260C450A, double 0xBC4071002727FFDC }, %struct.anon.0 { double 0x3FEF9FFFE88CD533, double 0xBC581BDCE1FDA8B0 }, %struct.anon.0 { double 0x3FEFDFFFD50F8689, double 0x3C87F91ACB918E6E }, %struct.anon.0 { double 0x3FF0200004292367, double 0x3C9B7FF365324681 }, %struct.anon.0 { double 0x3FF05FFFE3E3D668, double 0x3C86FA08DDAE957B }, %struct.anon.0 { double 0x3FF0A0000A85A757, double 0xBC57E2DE80D3FB91 }, %struct.anon.0 { double 0x3FF0E0001A5F3FCC, double 0xBC91823305C5F014 }, %struct.anon.0 { double 0x3FF11FFFF8AFBAF5, double 0xBC8BFABB6680BAC2 }, %struct.anon.0 { double 0x3FF15FFFE54D91AD, double 0xBC9D7F121737E7EF }, %struct.anon.0 { double 0x3FF1A00011AC36E1, double 0x3C9C000A0516F5FF }, %struct.anon.0 { double 0x3FF1E00019C84248, double 0xBC9082FBE4DA5DA0 }, %struct.anon.0 { double 0x3FF220000FFE5E6E, double 0xBC88FDD04C9CFB43 }, %struct.anon.0 { double 0x3FF26000269FD891, double 0x3C8CFE2A7994D182 }, %struct.anon.0 { double 0x3FF2A00029A6E6DA, double 0xBC700273715E8BC5 }, %struct.anon.0 { double 0x3FF2DFFFE0293E39, double 0x3C9B7C39DAB2A6F9 }, %struct.anon.0 { double 0x3FF31FFFF7DCF082, double 0x3C7DF1336EDC5254 }, %struct.anon.0 { double 0x3FF35FFFF05A8B60, double 0xBC9E03564CCD31EB }, %struct.anon.0 { double 0x3FF3A0002E0EAECC, double 0x3C75F0E74BD3A477 }, %struct.anon.0 { double 0x3FF3E000043BB236, double 0x3C9C7DCB149D8833 }, %struct.anon.0 { double 0x3FF4200002D187FF, double 0x3C7E08AFCF2D3D28 }, %struct.anon.0 { double 0x3FF460000D387CB1, double 0x3C820837856599A6 }, %struct.anon.0 { double 0x3FF4A00004569F89, double 0xBC89FA5C904FBCD2 }, %struct.anon.0 { double 0x3FF4E000043543F3, double 0xBC781125ED175329 }, %struct.anon.0 { double 0x3FF51FFFCC027F0F, double 0x3C9883D8847754DC }, %struct.anon.0 { double 0x3FF55FFFFD87B36F, double 0xBC8709E731D02807 }, %struct.anon.0 { double 0x3FF59FFFF21DF7BA, double 0x3C87F79F68727B02 }, %struct.anon.0 { double 0x3FF5DFFFEBFC3481, double 0xBC9180902E30E93E }] }, align 4
@__log_data = hidden constant %struct.log_data { double 0x3FE62E42FEFA3800, double 0x3D2EF35793C76730, [5 x double] [double 0xBFE0000000000001, double 0x3FD555555551305B, double 0xBFCFFFFFFFEB4590, double 0x3FC999B324F10111, double 0xBFC55575E506C89F], [11 x double] [double -5.000000e-01, double 0x3FD5555555555577, double 0xBFCFFFFFFFFFFDCB, double 0x3FC999999995DD0C, double 0xBFC55555556745A7, double 0x3FC24924A344DE30, double 0xBFBFFFFFA4423D65, double 0x3FBC7184282AD6CA, double 0xBFB999EB43B068FF, double 0x3FB78182F7AFD085, double 0xBFB5521375D145CD], [128 x %struct.anon] [%struct.anon { double 0x3FF734F0C3E0DE9F, double 0xBFD7CC7F79E69000 }, %struct.anon { double 0x3FF713786A2CE91F, double 0xBFD76FEEC20D0000 }, %struct.anon { double 0x3FF6F26008FAB5A0, double 0xBFD713E31351E000 }, %struct.anon { double 0x3FF6D1A61F138C7D, double 0xBFD6B85B38287800 }, %struct.anon { double 0x3FF6B1490BC5B4D1, double 0xBFD65D5590807800 }, %struct.anon { double 0x3FF69147332F0CBA, double 0xBFD602D076180000 }, %struct.anon { double 0x3FF6719F18224223, double 0xBFD5A8CA86909000 }, %struct.anon { double 0x3FF6524F99A51ED9, double 0xBFD54F4356035000 }, %struct.anon { double 0x3FF63356AA8F24C4, double 0xBFD4F637C36B4000 }, %struct.anon { double 0x3FF614B36B9DDC14, double 0xBFD49DA7FDA85000 }, %struct.anon { double 0x3FF5F66452C65C4C, double 0xBFD445923989A800 }, %struct.anon { double 0x3FF5D867B5912C4F, double 0xBFD3EDF439B0B800 }, %struct.anon { double 0x3FF5BABCCB5B90DE, double 0xBFD396CE448F7000 }, %struct.anon { double 0x3FF59D61F2D91A78, double 0xBFD3401E17BDA000 }, %struct.anon { double 0x3FF5805612465687, double 0xBFD2E9E2EF468000 }, %struct.anon { double 0x3FF56397CEE76BD3, double 0xBFD2941B3830E000 }, %struct.anon { double 0x3FF54725E2A77F93, double 0xBFD23EC58CDA8800 }, %struct.anon { double 0x3FF52AFF42064583, double 0xBFD1E9E129279000 }, %struct.anon { double 0x3FF50F22DBB2BDDF, double 0xBFD1956D2B48F800 }, %struct.anon { double 0x3FF4F38F4734DED7, double 0xBFD141679AB9F800 }, %struct.anon { double 0x3FF4D843CFDE2840, double 0xBFD0EDD094EF9800 }, %struct.anon { double 0x3FF4BD3EC078A3C8, double 0xBFD09AA518DB1000 }, %struct.anon { double 0x3FF4A27FC3E0258A, double 0xBFD047E65263B800 }, %struct.anon { double 0x3FF4880524D48434, double 0xBFCFEB224586F000 }, %struct.anon { double 0x3FF46DCE1B192D0B, double 0xBFCF474A7517B000 }, %struct.anon { double 0x3FF453D9D3391854, double 0xBFCEA4443D103000 }, %struct.anon { double 0x3FF43A2744B4845A, double 0xBFCE020D44E9B000 }, %struct.anon { double 0x3FF420B54115F8FB, double 0xBFCD60A22977F000 }, %struct.anon { double 0x3FF40782DA3EF4B1, double 0xBFCCC00104959000 }, %struct.anon { double 0x3FF3EE8F5D57FE8F, double 0xBFCC202956891000 }, %struct.anon { double 0x3FF3D5D9A00B4CE9, double 0xBFCB81178D811000 }, %struct.anon { double 0x3FF3BD60C010C12B, double 0xBFCAE2C9CCD3D000 }, %struct.anon { double 0x3FF3A5242B75DAB8, double 0xBFCA45402E129000 }, %struct.anon { double 0x3FF38D22CD9FD002, double 0xBFC9A877681DF000 }, %struct.anon { double 0x3FF3755BC5847A1C, double 0xBFC90C6D69483000 }, %struct.anon { double 0x3FF35DCE49AD36E2, double 0xBFC87120A645C000 }, %struct.anon { double 0x3FF34679984DD440, double 0xBFC7D68FB4143000 }, %struct.anon { double 0x3FF32F5CCEFFCB24, double 0xBFC73CB83C627000 }, %struct.anon { double 0x3FF3187775A10D49, double 0xBFC6A39A9B376000 }, %struct.anon { double 0x3FF301C8373E3990, double 0xBFC60B3154B7A000 }, %struct.anon { double 0x3FF2EB4EBB95F841, double 0xBFC5737D76243000 }, %struct.anon { double 0x3FF2D50A0219A9D1, double 0xBFC4DC7B8FC23000 }, %struct.anon { double 0x3FF2BEF9A8B7FD2A, double 0xBFC4462C51D20000 }, %struct.anon { double 0x3FF2A91C7A0C1BAB, double 0xBFC3B08ABC830000 }, %struct.anon { double 0x3FF293726014B530, double 0xBFC31B996B490000 }, %struct.anon { double 0x3FF27DFA5757A1F5, double 0xBFC2875490A44000 }, %struct.anon { double 0x3FF268B39B1D3BBF, double 0xBFC1F3B9F879A000 }, %struct.anon { double 0x3FF2539D838FF5BD, double 0xBFC160C8252CA000 }, %struct.anon { double 0x3FF23EB7AAC9083B, double 0xBFC0CE7F57F72000 }, %struct.anon { double 0x3FF22A012BA940B6, double 0xBFC03CDC49FEA000 }, %struct.anon { double 0x3FF2157996CC4132, double 0xBFBF57BDBC4B8000 }, %struct.anon { double 0x3FF201201DD2FC9B, double 0xBFBE370896404000 }, %struct.anon { double 0x3FF1ECF4494D480B, double 0xBFBD17983EF94000 }, %struct.anon { double 0x3FF1D8F5528F6569, double 0xBFBBF9674ED8A000 }, %struct.anon { double 0x3FF1C52311577E7C, double 0xBFBADC79202F6000 }, %struct.anon { double 0x3FF1B17C74CB26E9, double 0xBFB9C0C3E7288000 }, %struct.anon { double 0x3FF19E010C2C1AB6, double 0xBFB8A646B372C000 }, %struct.anon { double 0x3FF18AB07BB670BD, double 0xBFB78D01B3AC0000 }, %struct.anon { double 0x3FF1778A25EFBCB6, double 0xBFB674F145380000 }, %struct.anon { double 0x3FF1648D354C31DA, double 0xBFB55E0E6D878000 }, %struct.anon { double 0x3FF151B990275FDD, double 0xBFB4485CDEA1E000 }, %struct.anon { double 0x3FF13F0EA432D24C, double 0xBFB333D94D6AA000 }, %struct.anon { double 0x3FF12C8B7210F9DA, double 0xBFB22079F8C56000 }, %struct.anon { double 0x3FF11A3028ECB531, double 0xBFB10E4698622000 }, %struct.anon { double 0x3FF107FBDA8434AF, double 0xBFAFFA6C6AD20000 }, %struct.anon { double 0x3FF0F5EE0F4E6BB3, double 0xBFADDA8D4A774000 }, %struct.anon { double 0x3FF0E4065D2A9FCE, double 0xBFABBCECE4850000 }, %struct.anon { double 0x3FF0D244632CA521, double 0xBFA9A1894012C000 }, %struct.anon { double 0x3FF0C0A77CE2981A, double 0xBFA788583302C000 }, %struct.anon { double 0x3FF0AF2F83C636D1, double 0xBFA5715E67D68000 }, %struct.anon { double 0x3FF09DDB98A01339, double 0xBFA35C8A49658000 }, %struct.anon { double 0x3FF08CABAF52E7DF, double 0xBFA149E364154000 }, %struct.anon { double 0x3FF07B9F2F4E28FB, double 0xBF9E72C082EB8000 }, %struct.anon { double 0x3FF06AB58C358F19, double 0xBF9A55F152528000 }, %struct.anon { double 0x3FF059EEA5ECF92C, double 0xBF963D62CF818000 }, %struct.anon { double 0x3FF04949CDD12C90, double 0xBF9228FB8CAA0000 }, %struct.anon { double 0x3FF038C6C6F0ADA9, double 0xBF8C317B20F90000 }, %struct.anon { double 0x3FF02865137932A9, double 0xBF8419355DAA0000 }, %struct.anon { double 0x3FF0182427EA7348, double 0xBF781203C2EC0000 }, %struct.anon { double 0x3FF008040614B195, double 0xBF60040979240000 }, %struct.anon { double 0x3FEFE01FF726FA1A, double 0x3F6FEFF384900000 }, %struct.anon { double 0x3FEFA11CC261EA74, double 0x3F87DC41353D0000 }, %struct.anon { double 0x3FEF6310B081992E, double 0x3F93CEA3C4C28000 }, %struct.anon { double 0x3FEF25F63CEEADCD, double 0x3F9B9FC114890000 }, %struct.anon { double 0x3FEEE9C8039113E7, double 0x3FA1B0D8CE110000 }, %struct.anon { double 0x3FEEAE8078CBB1AB, double 0x3FA58A5BD001C000 }, %struct.anon { double 0x3FEE741AA29D0C9B, double 0x3FA95C8340D88000 }, %struct.anon { double 0x3FEE3A91830A99B5, double 0x3FAD276AEF578000 }, %struct.anon { double 0x3FEE01E009609A56, double 0x3FB07598E598C000 }, %struct.anon { double 0x3FEDCA01E577BB98, double 0x3FB253F5E30D2000 }, %struct.anon { double 0x3FED92F20B7C9103, double 0x3FB42EDD8B380000 }, %struct.anon { double 0x3FED5CAC66FB5CCE, double 0x3FB606598757C000 }, %struct.anon { double 0x3FED272CAA5EDE9D, double 0x3FB7DA76356A0000 }, %struct.anon { double 0x3FECF26E3E6B2CCD, double 0x3FB9AB434E1C6000 }, %struct.anon { double 0x3FECBE6DA2A77902, double 0x3FBB78C7BB0D6000 }, %struct.anon { double 0x3FEC8B266D37086D, double 0x3FBD431332E72000 }, %struct.anon { double 0x3FEC5894BD5D5804, double 0x3FBF0A3171DE6000 }, %struct.anon { double 0x3FEC26B533BB9F8C, double 0x3FC067152B914000 }, %struct.anon { double 0x3FEBF583EEECE73F, double 0x3FC147858292B000 }, %struct.anon { double 0x3FEBC4FD75DB96C1, double 0x3FC2266ECDCA3000 }, %struct.anon { double 0x3FEB951E0C864A28, double 0x3FC303D7A6C55000 }, %struct.anon { double 0x3FEB65E2C5EF3E2C, double 0x3FC3DFC33C331000 }, %struct.anon { double 0x3FEB374867C9888B, double 0x3FC4BA366B7A8000 }, %struct.anon { double 0x3FEB094B211D304A, double 0x3FC5933928D1F000 }, %struct.anon { double 0x3FEADBE885F2EF7E, double 0x3FC66ACD2418F000 }, %struct.anon { double 0x3FEAAF1D31603DA2, double 0x3FC740F8EC669000 }, %struct.anon { double 0x3FEA82E63FD358A7, double 0x3FC815C0F51AF000 }, %struct.anon { double 0x3FEA5740EF09738B, double 0x3FC8E92954F68000 }, %struct.anon { double 0x3FEA2C2A90AB4B27, double 0x3FC9BB3602F84000 }, %struct.anon { double 0x3FEA01A01393F2D1, double 0x3FCA8BED1C2C0000 }, %struct.anon { double 0x3FE9D79F24DB3C1B, double 0x3FCB5B515C01D000 }, %struct.anon { double 0x3FE9AE2505C7B190, double 0x3FCC2967CCBCC000 }, %struct.anon { double 0x3FE9852EF297CE2F, double 0x3FCCF635D5486000 }, %struct.anon { double 0x3FE95CBAEEA44B75, double 0x3FCDC1BD3446C000 }, %struct.anon { double 0x3FE934C69DE74838, double 0x3FCE8C01B8CFE000 }, %struct.anon { double 0x3FE90D4F2F6752E6, double 0x3FCF5509C0179000 }, %struct.anon { double 0x3FE8E6528EFFD79D, double 0x3FD00E6C121FB800 }, %struct.anon { double 0x3FE8BFCE9FCC007C, double 0x3FD071B80E93D000 }, %struct.anon { double 0x3FE899C0DABEC30E, double 0x3FD0D46B9E867000 }, %struct.anon { double 0x3FE87427AA2317FB, double 0x3FD13687334BD000 }, %struct.anon { double 0x3FE84F00ACB39A08, double 0x3FD1980D67234800 }, %struct.anon { double 0x3FE82A49E8653E55, double 0x3FD1F8FFE0CC8000 }, %struct.anon { double 0x3FE8060195F40260, double 0x3FD2595FD7636800 }, %struct.anon { double 0x3FE7E22563E0A329, double 0x3FD2B9300914A800 }, %struct.anon { double 0x3FE7BEB377DCB5AD, double 0x3FD3187210436000 }, %struct.anon { double 0x3FE79BAA679725C2, double 0x3FD377266DEC1800 }, %struct.anon { double 0x3FE77907F2170657, double 0x3FD3D54FFBAF3000 }, %struct.anon { double 0x3FE756CADBD6130C, double 0x3FD432EEE32FE000 }], [128 x %struct.anon.0] [%struct.anon.0 { double 0x3FE61000014FB66B, double 0x3C7E026C91425B3C }, %struct.anon.0 { double 0x3FE63000034DB495, double 0x3C8DBFEA48005D41 }, %struct.anon.0 { double 0x3FE650000D94D478, double 0x3C8E7FA786D6A5B7 }, %struct.anon.0 { double 0x3FE67000074E6FAD, double 0x3C61FCEA6B54254C }, %struct.anon.0 { double 0x3FE68FFFFEDF0FAE, double 0xBC7C7E274C590EFD }, %struct.anon.0 { double 0x3FE6B0000763C5BC, double 0xBC8AC16848DCDA01 }, %struct.anon.0 { double 0x3FE6D0001E5CC1F6, double 0x3C833F1C9D499311 }, %struct.anon.0 { double 0x3FE6EFFFEB05F63E, double 0xBC7E80041AE22D53 }, %struct.anon.0 { double 0x3FE710000E869780, double 0x3C7BFF6671097952 }, %struct.anon.0 { double 0x3FE72FFFFC67E912, double 0x3C8C00E226BD8724 }, %struct.anon.0 { double 0x3FE74FFFDF81116A, double 0xBC6E02916EF101D2 }, %struct.anon.0 { double 0x3FE770000F679C90, double 0xBC67FC71CD549C74 }, %struct.anon.0 { double 0x3FE78FFFFA7EC835, double 0x3C81BEC19EF50483 }, %struct.anon.0 { double 0x3FE7AFFFFE20C2E6, double 0xBC707E1729CC6465 }, %struct.anon.0 { double 0x3FE7CFFFED3FC900, double 0xBC808072087B8B1C }, %struct.anon.0 { double 0x3FE7EFFFE9261A76, double 0x3C8DC0286D9DF9AE }, %struct.anon.0 { double 0x3FE81000049CA3E8, double 0x3C897FD251E54C33 }, %struct.anon.0 { double 0x3FE8300017932C8F, double 0xBC8AFEE9B630F381 }, %struct.anon.0 { double 0x3FE850000633739C, double 0x3C89BFBF6B6535BC }, %struct.anon.0 { double 0x3FE87000204289C6, double 0xBC8BBF65F3117B75 }, %struct.anon.0 { double 0x3FE88FFFEBF57904, double 0xBC89006EA23DCB57 }, %struct.anon.0 { double 0x3FE8B00022BC04DF, double 0xBC7D00DF38E04B0A }, %struct.anon.0 { double 0x3FE8CFFFE50C1B8A, double 0xBC88007146FF9F05 }, %struct.anon.0 { double 0x3FE8EFFFFC918E43, double 0x3C83817BD07A7038 }, %struct.anon.0 { double 0x3FE910001EFA5FC7, double 0x3C893E9176DFB403 }, %struct.anon.0 { double 0x3FE9300013467BB9, double 0x3C7F804E4B980276 }, %struct.anon.0 { double 0x3FE94FFFE6EE076F, double 0xBC8F7EF0D9FF622E }, %struct.anon.0 { double 0x3FE96FFFDE3C12D1, double 0xBC7082AA962638BA }, %struct.anon.0 { double 0x3FE98FFFF4458A0D, double 0xBC87801B9164A8EF }, %struct.anon.0 { double 0x3FE9AFFFDD982E3E, double 0xBC8740E08A5A9337 }, %struct.anon.0 { double 0x3FE9CFFFED49FB66, double 0x3C3FCE08C19BE000 }, %struct.anon.0 { double 0x3FE9F00020F19C51, double 0xBC8A3FAA27885B0A }, %struct.anon.0 { double 0x3FEA10001145B006, double 0x3C74FF489958DA56 }, %struct.anon.0 { double 0x3FEA300007BBF6FA, double 0x3C8CBEAB8A2B6D18 }, %struct.anon.0 { double 0x3FEA500010971D79, double 0x3C88FECADD787930 }, %struct.anon.0 { double 0x3FEA70001DF52E48, double 0xBC8F41763DD8ABDB }, %struct.anon.0 { double 0x3FEA90001C593352, double 0xBC8EBF0284C27612 }, %struct.anon.0 { double 0x3FEAB0002A4F3E4B, double 0xBC69FD043CFF3F5F }, %struct.anon.0 { double 0x3FEACFFFD7AE1ED1, double 0xBC823EE7129070B4 }, %struct.anon.0 { double 0x3FEAEFFFEE510478, double 0x3C6A063EE00EDEA3 }, %struct.anon.0 { double 0x3FEB0FFFDB650D5B, double 0x3C5A06C8381F0AB9 }, %struct.anon.0 { double 0x3FEB2FFFFEAACA57, double 0xBC79011E74233C1D }, %struct.anon.0 { double 0x3FEB4FFFD995BADC, double 0xBC79FF1068862A9F }, %struct.anon.0 { double 0x3FEB7000249E659C, double 0x3C8AFF45D0864F3E }, %struct.anon.0 { double 0x3FEB8FFFF9871640, double 0x3C7CFE7796C2C3F9 }, %struct.anon.0 { double 0x3FEBAFFFD204CB4F, double 0xBC63FF27EEF22BC4 }, %struct.anon.0 { double 0x3FEBCFFFD2415C45, double 0xBC6CFFB7EE3BEA21 }, %struct.anon.0 { double 0x3FEBEFFFF86309DF, double 0xBC814103972E0B5C }, %struct.anon.0 { double 0x3FEC0FFFE1B57653, double 0x3C8BC16494B76A19 }, %struct.anon.0 { double 0x3FEC2FFFF1FA57E3, double 0xBC64FEEF8D30C6ED }, %struct.anon.0 { double 0x3FEC4FFFDCBFE424, double 0xBC843F68BCEC4775 }, %struct.anon.0 { double 0x3FEC6FFFED54B9F7, double 0x3C847EA3F053E0EC }, %struct.anon.0 { double 0x3FEC8FFFEB998FD5, double 0x3C7383068DF992F1 }, %struct.anon.0 { double 0x3FECB0002125219A, double 0xBC68FD8E64180E04 }, %struct.anon.0 { double 0x3FECCFFFDD94469C, double 0x3C8E7EBE1CC7EA72 }, %struct.anon.0 { double 0x3FECEFFFEAFDC476, double 0x3C8EBE39AD9F88FE }, %struct.anon.0 { double 0x3FED1000169AF82B, double 0x3C757D91A8B95A71 }, %struct.anon.0 { double 0x3FED30000D0FF71D, double 0x3C89C1906970C7DA }, %struct.anon.0 { double 0x3FED4FFFEA790FC4, double 0xBC580E37C558FE0C }, %struct.anon.0 { double 0x3FED70002EDC87E5, double 0xBC7F80D64DC10F44 }, %struct.anon.0 { double 0x3FED900021DC82AA, double 0xBC747C8F94FD5C5C }, %struct.anon.0 { double 0x3FEDAFFFD86B0283, double 0x3C8C7F1DC521617E }, %struct.anon.0 { double 0x3FEDD000296C4739, double 0x3C88019EB2FFB153 }, %struct.anon.0 { double 0x3FEDEFFFE54490F5, double 0x3C6E00D2C652CC89 }, %struct.anon.0 { double 0x3FEE0FFFCDABF694, double 0xBC7F8340202D69D2 }, %struct.anon.0 { double 0x3FEE2FFFDB52C8DD, double 0x3C7B00C1CA1B0864 }, %struct.anon.0 { double 0x3FEE4FFFF24216EF, double 0x3C72FFA8B094AB51 }, %struct.anon.0 { double 0x3FEE6FFFE88A5E11, double 0xBC57F673B1EFBE59 }, %struct.anon.0 { double 0x3FEE9000119EFF0D, double 0xBC84808D5E0BC801 }, %struct.anon.0 { double 0x3FEEAFFFDFA51744, double 0x3C780006D54320B5 }, %struct.anon.0 { double 0x3FEED0001A127FA1, double 0xBC5002F860565C92 }, %struct.anon.0 { double 0x3FEEF00007BABCC4, double 0xBC8540445D35E611 }, %struct.anon.0 { double 0x3FEF0FFFF57A8D02, double 0xBC4FFB3139EF9105 }, %struct.anon.0 { double 0x3FEF30001EE58AC7, double 0x3C8A81ACF2731155 }, %struct.anon.0 { double 0x3FEF4FFFF5823494, double 0x3C8A3F41D4D7C743 }, %struct.anon.0 { double 0x3FEF6FFFFCA94C6B, double 0xBC6202F41C987875 }, %struct.anon.0 { double 0x3FEF8FFFE1F9C441, double 0x3C777DD1F477E74B }, %struct.anon.0 { double 0x3FEFAFFFD2E0E37E, double 0xBC6F01199A7CA331 }, %struct.anon.0 { double 0x3FEFD0001C77E49E, double 0x3C7181EE4BCEACB1 }, %struct.anon.0 { double 0x3FEFEFFFF7E0C331, double 0xBC6E05370170875A }, %struct.anon.0 { double 0x3FF00FFFF465606E, double 0xBC8A7EAD491C0ADA }, %struct.anon.0 { double 0x3FF02FFFF3867A58, double 0xBC977F69C3FCB2E0 }, %struct.anon.0 { double 0x3FF04FFFFDFC0D17, double 0x3C97BFFE34CB945B }, %struct.anon.0 { double 0x3FF0700003CD4D82, double 0x3C820083C0E456CB }, %struct.anon.0 { double 0x3FF08FFFF9F2CBE8, double 0xBC6DFFDFBE37751A }, %struct.anon.0 { double 0x3FF0B000010CDA65, double 0xBC913F7FAEE626EB }, %struct.anon.0 { double 0x3FF0D00001A4D338, double 0x3C807DFA79489FF7 }, %struct.anon.0 { double 0x3FF0EFFFFADAFDFD, double 0xBC77040570D66BC0 }, %struct.anon.0 { double 0x3FF110000BBAFD96, double 0x3C8E80D4846D0B62 }, %struct.anon.0 { double 0x3FF12FFFFAE5F45D, double 0x3C9DBFFA64FD36EF }, %struct.anon.0 { double 0x3FF150000DD59AD9, double 0x3C9A0077701250AE }, %struct.anon.0 { double 0x3FF170000F21559A, double 0x3C8DFDF9E2E3DEEE }, %struct.anon.0 { double 0x3FF18FFFFC275426, double 0x3C910030DC3B7273 }, %struct.anon.0 { double 0x3FF1B000123D3C59, double 0x3C997F7980030188 }, %struct.anon.0 { double 0x3FF1CFFFF8299EB7, double 0xBC65F932AB9F8C67 }, %struct.anon.0 { double 0x3FF1EFFFF48AD400, double 0x3C937FBF9DA75BEB }, %struct.anon.0 { double 0x3FF210000C8B86A4, double 0x3C9F806B91FD5B22 }, %struct.anon.0 { double 0x3FF2300003854303, double 0x3C93FFC2EB9FBF33 }, %struct.anon.0 { double 0x3FF24FFFFFBCF684, double 0x3C7601E77E2E2E72 }, %struct.anon.0 { double 0x3FF26FFFF52921D9, double 0x3C7FFCBB767F0C61 }, %struct.anon.0 { double 0x3FF2900014933A3C, double 0xBC7202CA3C02412B }, %struct.anon.0 { double 0x3FF2B00014556313, double 0xBC92808233F21F02 }, %struct.anon.0 { double 0x3FF2CFFFEBFE523B, double 0xBC88FF7E384FDCF2 }, %struct.anon.0 { double 0x3FF2F0000BB8AD96, double 0xBC85FF51503041C5 }, %struct.anon.0 { double 0x3FF30FFFFB7AE2AF, double 0xBC810071885E289D }, %struct.anon.0 { double 0x3FF32FFFFEAC5F7F, double 0xBC91FF5D3FB7B715 }, %struct.anon.0 { double 0x3FF350000CA66756, double 0x3C957F82228B82BD }, %struct.anon.0 { double 0x3FF3700011FBF721, double 0x3C8000BAC40DD5CC }, %struct.anon.0 { double 0x3FF38FFFF9592FB9, double 0xBC943F9D2DB2A751 }, %struct.anon.0 { double 0x3FF3B00004DDD242, double 0x3C857F6B707638E1 }, %struct.anon.0 { double 0x3FF3CFFFF5B2C957, double 0x3C7A023A10BF1231 }, %struct.anon.0 { double 0x3FF3EFFFEAB0B418, double 0x3C987F6D66B152B0 }, %struct.anon.0 { double 0x3FF410001532AFF4, double 0x3C67F8375F198524 }, %struct.anon.0 { double 0x3FF4300017478B29, double 0x3C8301E672DC5143 }, %struct.anon.0 { double 0x3FF44FFFE795B463, double 0x3C89FF69B8B2895A }, %struct.anon.0 { double 0x3FF46FFFE80475E0, double 0xBC95C0B19BC2F254 }, %struct.anon.0 { double 0x3FF48FFFEF6FC1E7, double 0x3C9B4009F23A2A72 }, %struct.anon.0 { double 0x3FF4AFFFE5BEA704, double 0xBC94FFB7BF0D7D45 }, %struct.anon.0 { double 0x3FF4D000171027DE, double 0xBC99C06471DC6A3D }, %struct.anon.0 { double 0x3FF4F0000FF03EE2, double 0x3C977F890B85531C }, %struct.anon.0 { double 0x3FF5100012DC4BD1, double 0x3C6004657166A436 }, %struct.anon.0 { double 0x3FF530001605277A, double 0xBC96BFCECE233209 }, %struct.anon.0 { double 0x3FF54FFFECDB704C, double 0xBC8902720505A1D7 }, %struct.anon.0 { double 0x3FF56FFFEF5F54A9, double 0x3C9BBFE60EC96412 }, %struct.anon.0 { double 0x3FF5900017E61012, double 0x3C887EC581AFEF90 }, %struct.anon.0 { double 0x3FF5B00003C93E92, double 0xBC9F41080ABF0CC0 }, %struct.anon.0 { double 0x3FF5D0001D4919BC, double 0xBC98812AFB254729 }, %struct.anon.0 { double 0x3FF5EFFFE7B87A89, double 0xBC947EB780ED6904 }] }, align 4
@__pow_log_data = hidden constant %struct.pow_log_data { double 0x3FE62E42FEFA3800, double 0x3D2EF35793C76730, [7 x double] [double -5.000000e-01, double 0xBFE5555555555560, double 0x3FE0000000000006, double 0x3FE999999959554E, double 0xBFE555555529A47A, double 0xBFF2495B9B4845E9, double 0x3FF0002B8B263FC3], [128 x %struct.anon.11] [%struct.anon.11 { double 0x3FF6A00000000000, double 0.000000e+00, double 0xBFD62C82F2B9C800, double 0x3CFAB42428375680 }, %struct.anon.11 { double 1.406250e+00, double 0.000000e+00, double 0xBFD5D1BDBF580800, double 0xBD1CA508D8E0F720 }, %struct.anon.11 { double 0x3FF6600000000000, double 0.000000e+00, double 0xBFD5767717455800, double 0xBD2362A4D5B6506D }, %struct.anon.11 { double 1.390625e+00, double 0.000000e+00, double 0xBFD51AAD872DF800, double 0xBCE684E49EB067D5 }, %struct.anon.11 { double 0x3FF6200000000000, double 0.000000e+00, double 0xBFD4BE5F95777800, double 0xBD041B6993293EE0 }, %struct.anon.11 { double 1.375000e+00, double 0.000000e+00, double 0xBFD4618BC21C6000, double 0x3D13D82F484C84CC }, %struct.anon.11 { double 0x3FF5E00000000000, double 0.000000e+00, double 0xBFD404308686A800, double 0x3CDC42F3ED820B3A }, %struct.anon.11 { double 1.359375e+00, double 0.000000e+00, double 0xBFD3A64C55694800, double 0x3D20B1C686519460 }, %struct.anon.11 { double 0x3FF5A00000000000, double 0.000000e+00, double 0xBFD347DD9A988000, double 0x3D25594DD4C58092 }, %struct.anon.11 { double 1.343750e+00, double 0.000000e+00, double 0xBFD2E8E2BAE12000, double 0x3D267B1E99B72BD8 }, %struct.anon.11 { double 0x3FF5600000000000, double 0.000000e+00, double 0xBFD2895A13DE8800, double 0x3D15CA14B6CFB03F }, %struct.anon.11 { double 0x3FF5600000000000, double 0.000000e+00, double 0xBFD2895A13DE8800, double 0x3D15CA14B6CFB03F }, %struct.anon.11 { double 1.328125e+00, double 0.000000e+00, double 0xBFD22941FBCF7800, double 0xBD165A242853DA76 }, %struct.anon.11 { double 0x3FF5200000000000, double 0.000000e+00, double 0xBFD1C898C1699800, double 0xBD1FAFBC68E75404 }, %struct.anon.11 { double 1.312500e+00, double 0.000000e+00, double 0xBFD1675CABABA800, double 0x3D1F1FC63382A8F0 }, %struct.anon.11 { double 0x3FF4E00000000000, double 0.000000e+00, double 0xBFD1058BF9AE4800, double 0xBD26A8C4FD055A66 }, %struct.anon.11 { double 1.296875e+00, double 0.000000e+00, double 0xBFD0A324E2739000, double 0xBD0C6BEE7EF4030E }, %struct.anon.11 { double 0x3FF4A00000000000, double 0.000000e+00, double 0xBFD0402594B4D000, double 0xBCF036B89EF42D7F }, %struct.anon.11 { double 0x3FF4A00000000000, double 0.000000e+00, double 0xBFD0402594B4D000, double 0xBCF036B89EF42D7F }, %struct.anon.11 { double 1.281250e+00, double 0.000000e+00, double 0xBFCFB9186D5E4000, double 0x3D0D572AAB993C87 }, %struct.anon.11 { double 0x3FF4600000000000, double 0.000000e+00, double 0xBFCEF0ADCBDC6000, double 0x3D2B26B79C86AF24 }, %struct.anon.11 { double 1.265625e+00, double 0.000000e+00, double 0xBFCE27076E2AF000, double 0xBD172F4F543FFF10 }, %struct.anon.11 { double 0x3FF4200000000000, double 0.000000e+00, double 0xBFCD5C216B4FC000, double 0x3D21BA91BBCA681B }, %struct.anon.11 { double 1.250000e+00, double 0.000000e+00, double 0xBFCC8FF7C79AA000, double 0x3D27794F689F8434 }, %struct.anon.11 { double 1.250000e+00, double 0.000000e+00, double 0xBFCC8FF7C79AA000, double 0x3D27794F689F8434 }, %struct.anon.11 { double 0x3FF3E00000000000, double 0.000000e+00, double 0xBFCBC286742D9000, double 0x3D194EB0318BB78F }, %struct.anon.11 { double 1.234375e+00, double 0.000000e+00, double 0xBFCAF3C94E80C000, double 0x3CBA4E633FCD9066 }, %struct.anon.11 { double 0x3FF3A00000000000, double 0.000000e+00, double 0xBFCA23BC1FE2B000, double 0xBD258C64DC46C1EA }, %struct.anon.11 { double 0x3FF3A00000000000, double 0.000000e+00, double 0xBFCA23BC1FE2B000, double 0xBD258C64DC46C1EA }, %struct.anon.11 { double 1.218750e+00, double 0.000000e+00, double 0xBFC9525A9CF45000, double 0xBD2AD1D904C1D4E3 }, %struct.anon.11 { double 0x3FF3600000000000, double 0.000000e+00, double 0xBFC87FA06520D000, double 0x3D2BBDBF7FDBFA09 }, %struct.anon.11 { double 1.203125e+00, double 0.000000e+00, double 0xBFC7AB890210E000, double 0x3D2BDB9072534A58 }, %struct.anon.11 { double 1.203125e+00, double 0.000000e+00, double 0xBFC7AB890210E000, double 0x3D2BDB9072534A58 }, %struct.anon.11 { double 0x3FF3200000000000, double 0.000000e+00, double 0xBFC6D60FE719D000, double 0xBD10E46AA3B2E266 }, %struct.anon.11 { double 1.187500e+00, double 0.000000e+00, double 0xBFC5FF3070A79000, double 0xBD1E9E439F105039 }, %struct.anon.11 { double 1.187500e+00, double 0.000000e+00, double 0xBFC5FF3070A79000, double 0xBD1E9E439F105039 }, %struct.anon.11 { double 0x3FF2E00000000000, double 0.000000e+00, double 0xBFC526E5E3A1B000, double 0xBD20DE8B90075B8F }, %struct.anon.11 { double 1.171875e+00, double 0.000000e+00, double 0xBFC44D2B6CCB8000, double 0x3D170CC16135783C }, %struct.anon.11 { double 1.171875e+00, double 0.000000e+00, double 0xBFC44D2B6CCB8000, double 0x3D170CC16135783C }, %struct.anon.11 { double 0x3FF2A00000000000, double 0.000000e+00, double 0xBFC371FC201E9000, double 0x3CF178864D27543A }, %struct.anon.11 { double 1.156250e+00, double 0.000000e+00, double 0xBFC29552F81FF000, double 0xBD248D301771C408 }, %struct.anon.11 { double 0x3FF2600000000000, double 0.000000e+00, double 0xBFC1B72AD52F6000, double 0xBD2E80A41811A396 }, %struct.anon.11 { double 0x3FF2600000000000, double 0.000000e+00, double 0xBFC1B72AD52F6000, double 0xBD2E80A41811A396 }, %struct.anon.11 { double 1.140625e+00, double 0.000000e+00, double 0xBFC0D77E7CD09000, double 0x3D0A699688E85BF4 }, %struct.anon.11 { double 1.140625e+00, double 0.000000e+00, double 0xBFC0D77E7CD09000, double 0x3D0A699688E85BF4 }, %struct.anon.11 { double 0x3FF2200000000000, double 0.000000e+00, double 0xBFBFEC9131DBE000, double 0xBD2575545CA333F2 }, %struct.anon.11 { double 1.125000e+00, double 0.000000e+00, double 0xBFBE27076E2B0000, double 0x3D2A342C2AF0003C }, %struct.anon.11 { double 1.125000e+00, double 0.000000e+00, double 0xBFBE27076E2B0000, double 0x3D2A342C2AF0003C }, %struct.anon.11 { double 0x3FF1E00000000000, double 0.000000e+00, double 0xBFBC5E548F5BC000, double 0xBD1D0C57585FBE06 }, %struct.anon.11 { double 1.109375e+00, double 0.000000e+00, double 0xBFBA926D3A4AE000, double 0x3D253935E85BAAC8 }, %struct.anon.11 { double 1.109375e+00, double 0.000000e+00, double 0xBFBA926D3A4AE000, double 0x3D253935E85BAAC8 }, %struct.anon.11 { double 0x3FF1A00000000000, double 0.000000e+00, double 0xBFB8C345D631A000, double 0x3D137C294D2F5668 }, %struct.anon.11 { double 0x3FF1A00000000000, double 0.000000e+00, double 0xBFB8C345D631A000, double 0x3D137C294D2F5668 }, %struct.anon.11 { double 1.093750e+00, double 0.000000e+00, double 0xBFB6F0D28AE56000, double 0xBD269737C93373DA }, %struct.anon.11 { double 0x3FF1600000000000, double 0.000000e+00, double 0xBFB51B073F062000, double 0x3D1F025B61C65E57 }, %struct.anon.11 { double 0x3FF1600000000000, double 0.000000e+00, double 0xBFB51B073F062000, double 0x3D1F025B61C65E57 }, %struct.anon.11 { double 1.078125e+00, double 0.000000e+00, double 0xBFB341D7961BE000, double 0x3D2C5EDACCF913DF }, %struct.anon.11 { double 1.078125e+00, double 0.000000e+00, double 0xBFB341D7961BE000, double 0x3D2C5EDACCF913DF }, %struct.anon.11 { double 0x3FF1200000000000, double 0.000000e+00, double 0xBFB16536EEA38000, double 0x3D147C5E768FA309 }, %struct.anon.11 { double 1.062500e+00, double 0.000000e+00, double 0xBFAF0A30C0118000, double 0x3D2D599E83368E91 }, %struct.anon.11 { double 1.062500e+00, double 0.000000e+00, double 0xBFAF0A30C0118000, double 0x3D2D599E83368E91 }, %struct.anon.11 { double 0x3FF0E00000000000, double 0.000000e+00, double 0xBFAB42DD71198000, double 0x3D1C827AE5D6704C }, %struct.anon.11 { double 0x3FF0E00000000000, double 0.000000e+00, double 0xBFAB42DD71198000, double 0x3D1C827AE5D6704C }, %struct.anon.11 { double 1.046875e+00, double 0.000000e+00, double 0xBFA77458F632C000, double 0xBD2CFC4634F2A1EE }, %struct.anon.11 { double 1.046875e+00, double 0.000000e+00, double 0xBFA77458F632C000, double 0xBD2CFC4634F2A1EE }, %struct.anon.11 { double 0x3FF0A00000000000, double 0.000000e+00, double 0xBFA39E87B9FEC000, double 0x3CF502B7F526FEAA }, %struct.anon.11 { double 0x3FF0A00000000000, double 0.000000e+00, double 0xBFA39E87B9FEC000, double 0x3CF502B7F526FEAA }, %struct.anon.11 { double 1.031250e+00, double 0.000000e+00, double 0xBF9F829B0E780000, double 0xBD2980267C7E09E4 }, %struct.anon.11 { double 1.031250e+00, double 0.000000e+00, double 0xBF9F829B0E780000, double 0xBD2980267C7E09E4 }, %struct.anon.11 { double 0x3FF0600000000000, double 0.000000e+00, double 0xBF97B91B07D58000, double 0xBD288D5493FAA639 }, %struct.anon.11 { double 1.015625e+00, double 0.000000e+00, double 0xBF8FC0A8B0FC0000, double 0xBCDF1E7CF6D3A69C }, %struct.anon.11 { double 1.015625e+00, double 0.000000e+00, double 0xBF8FC0A8B0FC0000, double 0xBCDF1E7CF6D3A69C }, %struct.anon.11 { double 0x3FF0200000000000, double 0.000000e+00, double 0xBF7FE02A6B100000, double 0xBD19E23F0DDA40E4 }, %struct.anon.11 { double 0x3FF0200000000000, double 0.000000e+00, double 0xBF7FE02A6B100000, double 0xBD19E23F0DDA40E4 }, %struct.anon.11 { double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00 }, %struct.anon.11 { double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00 }, %struct.anon.11 { double 9.921875e-01, double 0.000000e+00, double 0x3F80101575890000, double 0xBD10C76B999D2BE8 }, %struct.anon.11 { double 9.843750e-01, double 0.000000e+00, double 0x3F90205658938000, double 0xBD23DC5B06E2F7D2 }, %struct.anon.11 { double 9.765625e-01, double 0.000000e+00, double 0x3F98492528C90000, double 0xBD2AA0BA325A0C34 }, %struct.anon.11 { double 9.687500e-01, double 0.000000e+00, double 0x3FA0415D89E74000, double 0x3D0111C05CF1D753 }, %struct.anon.11 { double 9.609375e-01, double 0.000000e+00, double 0x3FA466AED42E0000, double 0xBD2C167375BDFD28 }, %struct.anon.11 { double 9.531250e-01, double 0.000000e+00, double 0x3FA894AA149FC000, double 0xBD197995D05A267D }, %struct.anon.11 { double 9.453125e-01, double 0.000000e+00, double 0x3FACCB73CDDDC000, double 0xBD1A68F247D82807 }, %struct.anon.11 { double 0x3FEE200000000000, double 0.000000e+00, double 0x3FAEEA31C006C000, double 0xBD0E113E4FC93B7B }, %struct.anon.11 { double 0x3FEDE00000000000, double 0.000000e+00, double 0x3FB1973BD1466000, double 0xBD25325D560D9E9B }, %struct.anon.11 { double 0x3FEDA00000000000, double 0.000000e+00, double 0x3FB3BDF5A7D1E000, double 0x3D2CC85EA5DB4ED7 }, %struct.anon.11 { double 0x3FED600000000000, double 0.000000e+00, double 0x3FB5E95A4D97A000, double 0xBD2C69063C5D1D1E }, %struct.anon.11 { double 9.140625e-01, double 0.000000e+00, double 0x3FB700D30AEAC000, double 0x3CEC1E8DA99DED32 }, %struct.anon.11 { double 9.062500e-01, double 0.000000e+00, double 0x3FB9335E5D594000, double 0x3D23115C3ABD47DA }, %struct.anon.11 { double 8.984375e-01, double 0.000000e+00, double 0x3FBB6AC88DAD6000, double 0xBD1390802BF768E5 }, %struct.anon.11 { double 0x3FECA00000000000, double 0.000000e+00, double 0x3FBC885801BC4000, double 0x3D2646D1C65AACD3 }, %struct.anon.11 { double 0x3FEC600000000000, double 0.000000e+00, double 0x3FBEC739830A2000, double 0xBD2DC068AFE645E0 }, %struct.anon.11 { double 8.828125e-01, double 0.000000e+00, double 0x3FBFE89139DBE000, double 0xBD2534D64FA10AFD }, %struct.anon.11 { double 8.750000e-01, double 0.000000e+00, double 0x3FC1178E8227E000, double 0x3D21EF78CE2D07F2 }, %struct.anon.11 { double 0x3FEBE00000000000, double 0.000000e+00, double 0x3FC1AA2B7E23F000, double 0x3D2CA78E44389934 }, %struct.anon.11 { double 0x3FEBA00000000000, double 0.000000e+00, double 0x3FC2D1610C868000, double 0x3D039D6CCB81B4A1 }, %struct.anon.11 { double 8.593750e-01, double 0.000000e+00, double 0x3FC365FCB0159000, double 0x3CC62FA8234B7289 }, %struct.anon.11 { double 8.515625e-01, double 0.000000e+00, double 0x3FC4913D8333B000, double 0x3D25837954FDB678 }, %struct.anon.11 { double 0x3FEB200000000000, double 0.000000e+00, double 0x3FC527E5E4A1B000, double 0x3D2633E8E5697DC7 }, %struct.anon.11 { double 0x3FEAE00000000000, double 0.000000e+00, double 0x3FC6574EBE8C1000, double 0x3D19CF8B2C3C2E78 }, %struct.anon.11 { double 8.359375e-01, double 0.000000e+00, double 0x3FC6F0128B757000, double 0xBD25118DE59C21E1 }, %struct.anon.11 { double 0x3FEAA00000000000, double 0.000000e+00, double 0x3FC7898D85445000, double 0xBD1C661070914305 }, %struct.anon.11 { double 0x3FEA600000000000, double 0.000000e+00, double 0x3FC8BEAFEB390000, double 0xBD073D54AAE92CD1 }, %struct.anon.11 { double 8.203125e-01, double 0.000000e+00, double 0x3FC95A5ADCF70000, double 0x3D07F22858A0FF6F }, %struct.anon.11 { double 8.125000e-01, double 0.000000e+00, double 0x3FCA93ED3C8AE000, double 0xBD28724350562169 }, %struct.anon.11 { double 0x3FE9E00000000000, double 0.000000e+00, double 0x3FCB31D8575BD000, double 0xBD0C358D4EACE1AA }, %struct.anon.11 { double 8.046875e-01, double 0.000000e+00, double 0x3FCBD087383BE000, double 0xBD2D4BC4595412B6 }, %struct.anon.11 { double 0x3FE9A00000000000, double 0.000000e+00, double 0x3FCC6FFBC6F01000, double 0xBCF1EC72C5962BD2 }, %struct.anon.11 { double 0x3FE9600000000000, double 0.000000e+00, double 0x3FCDB13DB0D49000, double 0xBD2AFF2AF715B035 }, %struct.anon.11 { double 7.890625e-01, double 0.000000e+00, double 0x3FCE530EFFE71000, double 0x3CC212276041F430 }, %struct.anon.11 { double 0x3FE9200000000000, double 0.000000e+00, double 0x3FCEF5ADE4DD0000, double 0xBCCA211565BB8E11 }, %struct.anon.11 { double 7.812500e-01, double 0.000000e+00, double 0x3FCF991C6CB3B000, double 0x3D1BCBECCA0CDF30 }, %struct.anon.11 { double 7.734375e-01, double 0.000000e+00, double 0x3FD07138604D5800, double 0x3CF89CDB16ED4E91 }, %struct.anon.11 { double 0x3FE8A00000000000, double 0.000000e+00, double 0x3FD0C42D67616000, double 0x3D27188B163CEAE9 }, %struct.anon.11 { double 7.656250e-01, double 0.000000e+00, double 0x3FD1178E8227E800, double 0xBD2C210E63A5F01C }, %struct.anon.11 { double 0x3FE8600000000000, double 0.000000e+00, double 0x3FD16B5CCBACF800, double 0x3D2B9ACDF7A51681 }, %struct.anon.11 { double 7.578125e-01, double 0.000000e+00, double 0x3FD1BF99635A6800, double 0x3D2CA6ED5147BDB7 }, %struct.anon.11 { double 0x3FE8200000000000, double 0.000000e+00, double 0x3FD214456D0EB800, double 0x3D0A87DEBA46BAEA }, %struct.anon.11 { double 0x3FE7E00000000000, double 0.000000e+00, double 0x3FD2BEF07CDC9000, double 0x3D2A9CFA4A5004F4 }, %struct.anon.11 { double 7.421875e-01, double 0.000000e+00, double 0x3FD314F1E1D36000, double 0xBD28E27AD3213CB8 }, %struct.anon.11 { double 0x3FE7A00000000000, double 0.000000e+00, double 0x3FD36B6776BE1000, double 0x3D116ECDB0F177C8 }, %struct.anon.11 { double 7.343750e-01, double 0.000000e+00, double 0x3FD3C25277333000, double 0x3D183B54B606BD5C }, %struct.anon.11 { double 0x3FE7600000000000, double 0.000000e+00, double 0x3FD419B423D5E800, double 0x3D08E436EC90E09D }, %struct.anon.11 { double 7.265625e-01, double 0.000000e+00, double 0x3FD4718DC271C800, double 0xBD2F27CE0967D675 }, %struct.anon.11 { double 0x3FE7200000000000, double 0.000000e+00, double 0x3FD4C9E09E173000, double 0xBD2E20891B0AD8A4 }, %struct.anon.11 { double 7.187500e-01, double 0.000000e+00, double 0x3FD522AE0738A000, double 0x3D2EBE708164C759 }, %struct.anon.11 { double 0x3FE6E00000000000, double 0.000000e+00, double 0x3FD57BF753C8D000, double 0x3D1FADEDEE5D40EF }, %struct.anon.11 { double 7.109375e-01, double 0.000000e+00, double 0x3FD5D5BDDF596000, double 0xBD0A0B2A08A465DC }] }, align 4
@atanhi = internal unnamed_addr constant [4 x double] [double 0x3FDDAC670561BB4F, double 0x3FE921FB54442D18, double 0x3FEF730BD281F69B, double 0x3FF921FB54442D18], align 8
@atanlo = internal unnamed_addr constant [4 x double] [double 0x3C7A2B7F222F65E2, double 0x3C81A62633145C07, double 0x3C7007887AF0CBBD, double 0x3C91A62633145C07], align 8
@atanhi90 = internal unnamed_addr constant [4 x float] [float 0x3FDDAC6700000000, float 0x3FE921FB40000000, float 0x3FEF730BC0000000, float 0x3FF921FB40000000], align 4
@atanlo91 = internal unnamed_addr constant [4 x float] [float 0x3E3586ED20000000, float 0x3E64442D00000000, float 0x3E6281F680000000, float 0x3E74442D00000000], align 4
@__exp2f_data = hidden constant %struct.exp2f_data { [32 x i64] [i64 4607182418800017408, i64 4607140297302181236, i64 4607100335213349135, i64 4607062579818421073, i64 4607027079437701499, i64 4606993883449571754, i64 4606963042313658936, i64 4606934607594512097, i64 4606908631985796885, i64 4606885169335019979, i64 4606864274668794914, i64 4606846004218661165, i64 4606830415447468583, i64 4606817567076339586, i64 4606807519112221737, i64 4606800332876043653, i64 4606796071031487437, i64 4606794797614391156, i64 4606796578062795143, i64 4606801479247646227, i64 4606809569504174299, i64 4606820918663955941, i64 4606835598087680144, i64 4606853680698631517, i64 4606875241016906669, i64 4606900355194379847, i64 4606929101050434204, i64 4606961558108475497, i64 4606997807633245319, i64 4607037932668951391, i64 4607082018078232794, i64 4607130150581978432], double 0x42E8000000000000, [3 x double] [double 0x3FAC6AF84B912394, double 0x3FCEBFCE50FAC4F3, double 0x3FE62E42FF0C52D6], double 0x4338000000000000, double 0x40471547652B82FE, [3 x double] [double 0x3EBC6AF84B912394, double 0x3F2EBFCE50FAC4F3, double 0x3F962E42FF0C52D6] }, align 4
@TWO23 = internal unnamed_addr constant [2 x float] [float 8.388608e+06, float -8.388608e+06], align 4
@__log2f_data = hidden constant %struct.log2f_data { [16 x %struct.anon] [%struct.anon { double 0x3FF661EC79F8F3BE, double 0xBFDEFEC65B963019 }, %struct.anon { double 0x3FF571ED4AAF883D, double 0xBFDB0B6832D4FCA4 }, %struct.anon { double 0x3FF49539F0F010B0, double 0xBFD7418B0A1FB77B }, %struct.anon { double 0x3FF3C995B0B80385, double 0xBFD39DE91A6DCF7B }, %struct.anon { double 0x3FF30D190C8864A5, double 0xBFD01D9BF3F2B631 }, %struct.anon { double 0x3FF25E227B0B8EA0, double 0xBFC97C1D1B3B7AF0 }, %struct.anon { double 0x3FF1BB4A4A1A343F, double 0xBFC2F9E393AF3C9F }, %struct.anon { double 0x3FF12358F08AE5BA, double 0xBFB960CBBF788D5C }, %struct.anon { double 0x3FF0953F419900A7, double 0xBFAA6F9DB6475FCE }, %struct.anon { double 1.000000e+00, double 0.000000e+00 }, %struct.anon { double 0x3FEE608CFD9A47AC, double 0x3FB338CA9F24F53D }, %struct.anon { double 0x3FECA4B31F026AA0, double 0x3FC476A9543891BA }, %struct.anon { double 0x3FEB2036576AFCE6, double 0x3FCE840B4AC4E4D2 }, %struct.anon { double 0x3FE9C2D163A1AA2D, double 0x3FD40645F0C6651C }, %struct.anon { double 0x3FE886E6037841ED, double 0x3FD88E9C2C1B9FF8 }, %struct.anon { double 0x3FE767DCF5534862, double 0x3FDCE0A44EB17BCC }], [4 x double] [double 0xBFD712B6F70A7E4D, double 0x3FDECABF496832E0, double 0xBFE715479FFAE3DE, double 0x3FF715475F35C8B8] }, align 4
@__logf_data = hidden constant %struct.logf_data { [16 x %struct.anon] [%struct.anon { double 0x3FF661EC79F8F3BE, double 0xBFD57BF7808CAADE }, %struct.anon { double 0x3FF571ED4AAF883D, double 0xBFD2BEF0A7C06DDB }, %struct.anon { double 0x3FF49539F0F010B0, double 0xBFD01EAE7F513A67 }, %struct.anon { double 0x3FF3C995B0B80385, double 0xBFCB31D8A68224E9 }, %struct.anon { double 0x3FF30D190C8864A5, double 0xBFC6574F0AC07758 }, %struct.anon { double 0x3FF25E227B0B8EA0, double 0xBFC1AA2BC79C8100 }, %struct.anon { double 0x3FF1BB4A4A1A343F, double 0xBFBA4E76CE8C0E5E }, %struct.anon { double 0x3FF12358F08AE5BA, double 0xBFB1973C5A611CCC }, %struct.anon { double 0x3FF0953F419900A7, double 0xBFA252F438E10C1E }, %struct.anon { double 1.000000e+00, double 0.000000e+00 }, %struct.anon { double 0x3FEE608CFD9A47AC, double 0x3FAAA5AA5DF25984 }, %struct.anon { double 0x3FECA4B31F026AA0, double 0x3FBC5E53AA362EB4 }, %struct.anon { double 0x3FEB2036576AFCE6, double 0x3FC526E57720DB08 }, %struct.anon { double 0x3FE9C2D163A1AA2D, double 0x3FCBC2860D224770 }, %struct.anon { double 0x3FE886E6037841ED, double 0x3FD1058BC8A07EE1 }, %struct.anon { double 0x3FE767DCF5534862, double 0x3FD4043057B6EE09 }], double 0x3FE62E42FEFA39EF, [3 x double] [double 0xBFD00EA348B88334, double 0x3FD5575B0BE00B6A, double 0xBFDFFFFEF20A4123] }, align 4
@TWO23120 = internal unnamed_addr constant [2 x float] [float 8.388608e+06, float -8.388608e+06], align 4
@__powf_log2_data = hidden constant %struct.powf_log2_data { [16 x %struct.anon] [%struct.anon { double 0x3FF661EC79F8F3BE, double 0xBFDEFEC65B963019 }, %struct.anon { double 0x3FF571ED4AAF883D, double 0xBFDB0B6832D4FCA4 }, %struct.anon { double 0x3FF49539F0F010B0, double 0xBFD7418B0A1FB77B }, %struct.anon { double 0x3FF3C995B0B80385, double 0xBFD39DE91A6DCF7B }, %struct.anon { double 0x3FF30D190C8864A5, double 0xBFD01D9BF3F2B631 }, %struct.anon { double 0x3FF25E227B0B8EA0, double 0xBFC97C1D1B3B7AF0 }, %struct.anon { double 0x3FF1BB4A4A1A343F, double 0xBFC2F9E393AF3C9F }, %struct.anon { double 0x3FF12358F08AE5BA, double 0xBFB960CBBF788D5C }, %struct.anon { double 0x3FF0953F419900A7, double 0xBFAA6F9DB6475FCE }, %struct.anon { double 1.000000e+00, double 0.000000e+00 }, %struct.anon { double 0x3FEE608CFD9A47AC, double 0x3FB338CA9F24F53D }, %struct.anon { double 0x3FECA4B31F026AA0, double 0x3FC476A9543891BA }, %struct.anon { double 0x3FEB2036576AFCE6, double 0x3FCE840B4AC4E4D2 }, %struct.anon { double 0x3FE9C2D163A1AA2D, double 0x3FD40645F0C6651C }, %struct.anon { double 0x3FE886E6037841ED, double 0x3FD88E9C2C1B9FF8 }, %struct.anon { double 0x3FE767DCF5534862, double 0x3FDCE0A44EB17BCC }], [5 x double] [double 0x3FD27616C9496E0B, double 0xBFD71969A075C67A, double 0x3FDEC70A6CA7BADD, double 0xBFE7154748BEF6C8, double 0x3FF71547652AB82B] }, align 4
@Zero127 = internal unnamed_addr constant [2 x float] [float 0.000000e+00, float -0.000000e+00], align 4
@.str128 = private unnamed_addr constant [6 x i8] c"fixup\00", section "llvm.metadata"
@TWO23129 = internal unnamed_addr constant [2 x float] [float 8.388608e+06, float -8.388608e+06], align 4
@__sincosf_table = hidden constant [2 x %struct.sincos_t] [%struct.sincos_t { [4 x double] [double 1.000000e+00, double -1.000000e+00, double -1.000000e+00, double 1.000000e+00], double 0x41645F306DC9C883, double 0x3FF921FB54442D18, double 1.000000e+00, double 0xBFDFFFFFFD0C621C, double 0x3FA55553E1068F19, double 0xBF56C087E89A359D, double 0x3EF99343027BF8C3, double 0xBFC555545995A603, double 0x3F81107605230BC4, double 0xBF2994EB3774CF24 }, %struct.sincos_t { [4 x double] [double 1.000000e+00, double -1.000000e+00, double -1.000000e+00, double 1.000000e+00], double 0x41645F306DC9C883, double 0x3FF921FB54442D18, double -1.000000e+00, double 0x3FDFFFFFFD0C621C, double 0xBFA55553E1068F19, double 0x3F56C087E89A359D, double 0xBEF99343027BF8C3, double 0xBFC555545995A603, double 0x3F81107605230BC4, double 0xBF2994EB3774CF24 }], align 4
@__inv_pio4 = hidden constant [24 x i32] [i32 162, i32 41721, i32 10680707, i32 -1560706194, i32 -108827058, i32 -2089923004, i32 1850622997, i32 1313084713, i32 1142237692, i32 355073063, i32 704390999, i32 -64530479, i32 660066805, i32 1473377588, i32 -772459299, i32 -181084736, i32 886948059, i32 -574563486, i32 -1059364203, i32 -614296167, i32 1653971260, i32 -1785119677, i32 -1724103792, i32 1011060801], align 4
@TWO52 = internal unnamed_addr constant [2 x double] [double 0x4330000000000000, double 0xC330000000000000], align 8
@TWO52142 = internal unnamed_addr constant [2 x double] [double 0x4330000000000000, double 0xC330000000000000], align 8
@Zero145 = internal unnamed_addr constant [2 x double] [double 0.000000e+00, double -0.000000e+00], align 8
@.str146 = private unnamed_addr constant [6 x i8] c"fixup\00", section "llvm.metadata"
@TWO52147 = internal unnamed_addr constant [2 x double] [double 0x4330000000000000, double 0xC330000000000000], align 8

; Function Attrs: noinline nounwind
define void @_Z12sobel_filterPA512_hS0_([512 x i8]* noalias nocapture readonly "legup_array_depth"="262144" "legup_decl"="unsigned char in[512][512]" %in, [512 x i8]* noalias nocapture "legup_array_depth"="262144" "legup_decl"="unsigned char out[512][512]" %out) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{[512 x i8]* %in}, i64 0, metadata !14), !dbg !387
  tail call void @llvm.dbg.value(metadata !{[512 x i8]* %out}, i64 0, metadata !15), !dbg !388
  br label %for.cond1.preheader, !dbg !389

for.cond1.preheader:                              ; preds = %for.inc57, %entry
  %i.038 = phi i32 [ 0, %entry ], [ %add20.2, %for.inc57 ]
  %i.0.off = add i32 %i.038, -1, !dbg !392
  %0 = icmp ugt i32 %i.0.off, 509, !dbg !392
  %or = zext i1 %0 to i32, !dbg !392
  %add20.2 = add nsw i32 %i.038, 1, !dbg !394
  br label %for.body3, !dbg !395

for.body3:                                        ; preds = %for.inc54, %for.cond1.preheader
  %j.036 = phi i32 [ 0, %for.cond1.preheader ], [ %inc55.pre-phi, %for.inc54 ]
  %cmp7 = icmp slt i32 %j.036, 1, !dbg !392
  %conv8 = zext i1 %cmp7 to i32, !dbg !392
  %or9 = or i32 %conv8, %or, !dbg !392
  %cmp10 = icmp sgt i32 %j.036, 510, !dbg !392
  %conv11 = zext i1 %cmp10 to i32, !dbg !392
  %or12 = or i32 %or9, %conv11, !dbg !392
  %tobool = icmp eq i32 %or12, 0, !dbg !392
  br i1 %tobool, label %for.cond14.preheader, label %if.then, !dbg !392

for.cond14.preheader:                             ; preds = %for.body3
  %add = add nsw i32 %j.036, -1, !dbg !394
  %arrayidx22 = getelementptr inbounds [512 x i8]* %in, i32 %i.0.off, i32 %add, !dbg !394
  %1 = load i8* %arrayidx22, align 1, !dbg !394, !tbaa !398
  %conv23 = zext i8 %1 to i32, !dbg !394
  %arrayidx22.1 = getelementptr inbounds [512 x i8]* %in, i32 %i.0.off, i32 %j.036, !dbg !394
  %2 = load i8* %arrayidx22.1, align 1, !dbg !394, !tbaa !398
  %conv23.1 = zext i8 %2 to i32, !dbg !394
  %add.2 = add nsw i32 %j.036, 1, !dbg !394
  %arrayidx22.2 = getelementptr inbounds [512 x i8]* %in, i32 %i.0.off, i32 %add.2, !dbg !394
  %3 = load i8* %arrayidx22.2, align 1, !dbg !394, !tbaa !398
  %conv23.2 = zext i8 %3 to i32, !dbg !394
  %arrayidx22.139 = getelementptr inbounds [512 x i8]* %in, i32 %i.038, i32 %add, !dbg !394
  %4 = load i8* %arrayidx22.139, align 1, !dbg !394, !tbaa !398
  %conv23.140 = zext i8 %4 to i32, !dbg !394
  %arrayidx22.2.1 = getelementptr inbounds [512 x i8]* %in, i32 %i.038, i32 %add.2, !dbg !394
  %5 = load i8* %arrayidx22.2.1, align 1, !dbg !394, !tbaa !398
  %conv23.2.1 = zext i8 %5 to i32, !dbg !394
  %arrayidx22.247 = getelementptr inbounds [512 x i8]* %in, i32 %add20.2, i32 %add, !dbg !394
  %6 = load i8* %arrayidx22.247, align 1, !dbg !394, !tbaa !398
  %conv23.248 = zext i8 %6 to i32, !dbg !394
  %arrayidx22.1.2 = getelementptr inbounds [512 x i8]* %in, i32 %add20.2, i32 %j.036, !dbg !394
  %7 = load i8* %arrayidx22.1.2, align 1, !dbg !394, !tbaa !398
  %conv23.1.2 = zext i8 %7 to i32, !dbg !394
  %arrayidx22.2.2 = getelementptr inbounds [512 x i8]* %in, i32 %add20.2, i32 %add.2, !dbg !394
  %8 = load i8* %arrayidx22.2.2, align 1, !dbg !394, !tbaa !398
  %conv23.2.2 = zext i8 %8 to i32, !dbg !394
  %tmp = sub i32 %conv23.2.1, %conv23.140
  %tmp1 = shl nsw i32 %tmp, 1
  %add28.143 = sub i32 %conv23.2, %conv23, !dbg !401
  %add28.2.1 = sub i32 %add28.143, %conv23.248, !dbg !401
  %add28.251 = add nsw i32 %add28.2.1, %conv23.2.2, !dbg !401
  %add28.2.2 = add nsw i32 %add28.251, %tmp1, !dbg !401
  %tmp3 = sub i32 %conv23.1, %conv23.1.2
  %tmp4 = shl nsw i32 %tmp3, 1
  %add34.2 = add nuw nsw i32 %conv23.2, %conv23, !dbg !402
  %add34.254 = sub i32 %add34.2, %conv23.248, !dbg !402
  %add34.1.2 = sub i32 %add34.254, %conv23.2.2, !dbg !402
  %add34.2.2 = add nsw i32 %add34.1.2, %tmp4, !dbg !402
  %cmp38 = icmp slt i32 %add28.2.2, 0, !dbg !403
  %sub = sub nsw i32 0, %add28.2.2, !dbg !404
  %cond = select i1 %cmp38, i32 %sub, i32 %add28.2.2, !dbg !403
  %cmp39 = icmp slt i32 %add34.2.2, 0, !dbg !406
  %sub41 = sub nsw i32 0, %add34.2.2, !dbg !407
  %cond44 = select i1 %cmp39, i32 %sub41, i32 %add34.2.2, !dbg !406
  %add45 = add nsw i32 %cond44, %cond, !dbg !409
  %cmp46 = icmp sgt i32 %add45, 255, !dbg !410
  %9 = trunc i32 %add45 to i8, !dbg !411
  %conv51 = select i1 %cmp46, i8 -1, i8 %9, !dbg !411
  br label %for.inc54, !dbg !412

if.then:                                          ; preds = %for.body3
  %inc55.pre = add nsw i32 %j.036, 1, !dbg !413
  br label %for.inc54, !dbg !414

for.inc54:                                        ; preds = %if.then, %for.cond14.preheader
  %conv51.sink = phi i8 [ 0, %if.then ], [ %conv51, %for.cond14.preheader ]
  %inc55.pre-phi = phi i32 [ %inc55.pre, %if.then ], [ %add.2, %for.cond14.preheader ], !dbg !413
  %10 = getelementptr inbounds [512 x i8]* %out, i32 %i.038, i32 %j.036, !dbg !416
  store i8 %conv51.sink, i8* %10, align 1, !dbg !416
  %exitcond = icmp eq i32 %inc55.pre-phi, 512, !dbg !395
  br i1 %exitcond, label %for.inc57, label %for.body3, !dbg !395

for.inc57:                                        ; preds = %for.inc54
  %exitcond55 = icmp eq i32 %add20.2, 512, !dbg !389
  br i1 %exitcond55, label %for.end59, label %for.cond1.preheader, !dbg !389

for.end59:                                        ; preds = %for.inc57
  ret void, !dbg !417
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata) #1

; Function Attrs: nounwind
define float @cosf(float %y) #2 {
entry:
  %conv = fpext float %y to double
  %0 = bitcast float %y to i32
  %shr.i = lshr i32 %0, 20
  %and.i = and i32 %shr.i, 2047
  %cmp = icmp ult i32 %and.i, 1012
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %cmp5 = icmp ult i32 %and.i, 920
  br i1 %cmp5, label %return, label %if.end, !prof !418

if.end:                                           ; preds = %if.then
  %mul = fmul double %conv, %conv
  %mul8.i119 = fmul double %mul, %mul
  %1 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 6), align 4, !tbaa !419
  %2 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 7), align 4, !tbaa !422
  %mul9.i120 = fmul double %mul, %2
  %add10.i121 = fadd double %1, %mul9.i120
  %3 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 3), align 4, !tbaa !423
  %4 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 4), align 4, !tbaa !424
  %mul12.i122 = fmul double %mul, %4
  %add13.i123 = fadd double %3, %mul12.i122
  %mul14.i124 = fmul double %mul, %mul8.i119
  %5 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 5), align 4, !tbaa !425
  %mul16.i125 = fmul double %mul8.i119, %5
  %add17.i126 = fadd double %add13.i123, %mul16.i125
  %mul18.i127 = fmul double %mul14.i124, %add10.i121
  %add19.i128 = fadd double %mul18.i127, %add17.i126
  %retval.0.i131 = fptrunc double %add19.i128 to float
  br label %return

if.else:                                          ; preds = %entry
  %cmp11 = icmp ult i32 %and.i, 1071
  br i1 %cmp11, label %if.then16, label %if.else25, !prof !426

if.then16:                                        ; preds = %if.else
  %6 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 1), align 4, !tbaa !427
  %mul.i113 = fmul double %conv, %6
  %conv.i114 = fptosi double %mul.i113 to i32
  %add.i115 = add nsw i32 %conv.i114, 8388608
  %shr.i116 = ashr i32 %add.i115, 24
  %conv1.i = sitofp i32 %shr.i116 to double
  %7 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 2), align 4, !tbaa !428
  %mul2.i117 = fmul double %7, %conv1.i
  %sub.i118 = fsub double %conv, %mul2.i117
  %and = and i32 %shr.i116, 3
  %arrayidx = getelementptr inbounds [2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 0, i32 %and
  %8 = load double* %arrayidx, align 4, !tbaa !429
  %and18 = and i32 %shr.i116, 2
  %tobool19 = icmp eq i32 %and18, 0
  %. = select i1 %tobool19, %struct.sincos_t* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0), %struct.sincos_t* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 1)
  %mul22 = fmul double %8, %sub.i118
  %mul23 = fmul double %sub.i118, %sub.i118
  %xor = and i32 %shr.i116, 1
  %cmp.i81 = icmp eq i32 %xor, 0
  br i1 %cmp.i81, label %if.else.i109, label %if.then.i93

if.then.i93:                                      ; preds = %if.then16
  %mul.i82 = fmul double %mul22, %mul23
  %s2.i83 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 9
  %9 = load double* %s2.i83, align 4, !tbaa !430
  %s3.i84 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 10
  %10 = load double* %s3.i84, align 4, !tbaa !431
  %mul1.i85 = fmul double %mul23, %10
  %add.i86 = fadd double %9, %mul1.i85
  %mul2.i87 = fmul double %mul23, %mul.i82
  %s13.i88 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 8
  %11 = load double* %s13.i88, align 4, !tbaa !432
  %mul4.i89 = fmul double %mul.i82, %11
  %add5.i90 = fadd double %mul22, %mul4.i89
  %mul6.i91 = fmul double %mul2.i87, %add.i86
  %add7.i92 = fadd double %add5.i90, %mul6.i91
  br label %sinf_poly.exit112

if.else.i109:                                     ; preds = %if.then16
  %mul8.i94 = fmul double %mul23, %mul23
  %c3.i95 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 6
  %12 = load double* %c3.i95, align 4, !tbaa !419
  %c4.i96 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 7
  %13 = load double* %c4.i96, align 4, !tbaa !422
  %mul9.i97 = fmul double %mul23, %13
  %add10.i98 = fadd double %12, %mul9.i97
  %c0.i99 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 3
  %14 = load double* %c0.i99, align 4, !tbaa !423
  %c111.i100 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 4
  %15 = load double* %c111.i100, align 4, !tbaa !424
  %mul12.i101 = fmul double %mul23, %15
  %add13.i102 = fadd double %14, %mul12.i101
  %mul14.i103 = fmul double %mul23, %mul8.i94
  %c215.i104 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 5
  %16 = load double* %c215.i104, align 4, !tbaa !425
  %mul16.i105 = fmul double %mul8.i94, %16
  %add17.i106 = fadd double %add13.i102, %mul16.i105
  %mul18.i107 = fmul double %mul14.i103, %add10.i98
  %add19.i108 = fadd double %mul18.i107, %add17.i106
  br label %sinf_poly.exit112

sinf_poly.exit112:                                ; preds = %if.else.i109, %if.then.i93
  %retval.0.in.i110 = phi double [ %add7.i92, %if.then.i93 ], [ %add19.i108, %if.else.i109 ]
  %retval.0.i111 = fptrunc double %retval.0.in.i110 to float
  br label %return

if.else25:                                        ; preds = %if.else
  %cmp28 = icmp ult i32 %and.i, 2040
  br i1 %cmp28, label %if.then30, label %if.else46

if.then30:                                        ; preds = %if.else25
  %shr = lshr i32 %0, 31
  %shr.i72 = lshr i32 %0, 26
  %and.i73 = and i32 %shr.i72, 15
  %arrayidx.i = getelementptr inbounds [0 x i32]* bitcast ([24 x i32]* @__inv_pio4 to [0 x i32]*), i32 0, i32 %and.i73
  %shr1.i = lshr i32 %0, 23
  %and2.i = and i32 %shr1.i, 7
  %and3.i = and i32 %0, 8388607
  %or.i = or i32 %and3.i, 8388608
  %shl.i = shl i32 %or.i, %and2.i
  %17 = load i32* %arrayidx.i, align 4, !tbaa !433
  %mul.i74 = mul i32 %17, %shl.i
  %conv.i = zext i32 %mul.i74 to i64
  %conv5.i = zext i32 %shl.i to i64
  %arrayidx.sum.i = add nuw nsw i32 %and.i73, 4
  %arrayidx6.i = getelementptr inbounds [0 x i32]* bitcast ([24 x i32]* @__inv_pio4 to [0 x i32]*), i32 0, i32 %arrayidx.sum.i
  %18 = load i32* %arrayidx6.i, align 4, !tbaa !433
  %conv7.i = zext i32 %18 to i64
  %mul8.i75 = mul i64 %conv7.i, %conv5.i
  %arrayidx.sum35.i = add nuw nsw i32 %and.i73, 8
  %arrayidx10.i = getelementptr inbounds [0 x i32]* bitcast ([24 x i32]* @__inv_pio4 to [0 x i32]*), i32 0, i32 %arrayidx.sum35.i
  %19 = load i32* %arrayidx10.i, align 4, !tbaa !433
  %conv11.i = zext i32 %19 to i64
  %mul12.i76 = mul i64 %conv11.i, %conv5.i
  %shr13.i = lshr i64 %mul12.i76, 32
  %shl14.i = shl nuw i64 %conv.i, 32
  %or15.i = or i64 %shr13.i, %shl14.i
  %add.i77 = add i64 %or15.i, %mul8.i75
  %add16.i = add i64 %add.i77, 2305843009213693952
  %shr17.i = lshr i64 %add16.i, 62
  %shl18.i = shl nuw i64 %shr17.i, 62
  %sub.i = sub i64 %add.i77, %shl18.i
  %conv19.i = sitofp i64 %sub.i to double
  %conv20.i = trunc i64 %shr17.i to i32
  %mul21.i = fmul double %conv19.i, 0x3C1921FB54442D18
  %add = add nuw nsw i32 %conv20.i, %shr
  %and34 = and i32 %add, 3
  %arrayidx36 = getelementptr inbounds [2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 0, i32 %and34
  %20 = load double* %arrayidx36, align 4, !tbaa !429
  %and38 = and i32 %add, 2
  %tobool39 = icmp eq i32 %and38, 0
  %.70 = select i1 %tobool39, %struct.sincos_t* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0), %struct.sincos_t* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 1)
  %mul42 = fmul double %20, %mul21.i
  %mul43 = fmul double %mul21.i, %mul21.i
  %xor44 = and i32 %conv20.i, 1
  %cmp.i = icmp eq i32 %xor44, 0
  br i1 %cmp.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %if.then30
  %mul.i = fmul double %mul42, %mul43
  %s2.i = getelementptr inbounds %struct.sincos_t* %.70, i32 0, i32 9
  %21 = load double* %s2.i, align 4, !tbaa !430
  %s3.i = getelementptr inbounds %struct.sincos_t* %.70, i32 0, i32 10
  %22 = load double* %s3.i, align 4, !tbaa !431
  %mul1.i = fmul double %mul43, %22
  %add.i = fadd double %21, %mul1.i
  %mul2.i = fmul double %mul43, %mul.i
  %s13.i = getelementptr inbounds %struct.sincos_t* %.70, i32 0, i32 8
  %23 = load double* %s13.i, align 4, !tbaa !432
  %mul4.i = fmul double %mul.i, %23
  %add5.i = fadd double %mul42, %mul4.i
  %mul6.i = fmul double %mul2.i, %add.i
  %add7.i = fadd double %add5.i, %mul6.i
  br label %sinf_poly.exit

if.else.i:                                        ; preds = %if.then30
  %mul8.i = fmul double %mul43, %mul43
  %c3.i = getelementptr inbounds %struct.sincos_t* %.70, i32 0, i32 6
  %24 = load double* %c3.i, align 4, !tbaa !419
  %c4.i = getelementptr inbounds %struct.sincos_t* %.70, i32 0, i32 7
  %25 = load double* %c4.i, align 4, !tbaa !422
  %mul9.i = fmul double %mul43, %25
  %add10.i = fadd double %24, %mul9.i
  %c0.i = getelementptr inbounds %struct.sincos_t* %.70, i32 0, i32 3
  %26 = load double* %c0.i, align 4, !tbaa !423
  %c111.i = getelementptr inbounds %struct.sincos_t* %.70, i32 0, i32 4
  %27 = load double* %c111.i, align 4, !tbaa !424
  %mul12.i = fmul double %mul43, %27
  %add13.i = fadd double %26, %mul12.i
  %mul14.i = fmul double %mul43, %mul8.i
  %c215.i = getelementptr inbounds %struct.sincos_t* %.70, i32 0, i32 5
  %28 = load double* %c215.i, align 4, !tbaa !425
  %mul16.i = fmul double %mul8.i, %28
  %add17.i = fadd double %add13.i, %mul16.i
  %mul18.i = fmul double %mul14.i, %add10.i
  %add19.i = fadd double %mul18.i, %add17.i
  br label %sinf_poly.exit

sinf_poly.exit:                                   ; preds = %if.else.i, %if.then.i
  %retval.0.in.i = phi double [ %add7.i, %if.then.i ], [ %add19.i, %if.else.i ]
  %retval.0.i = fptrunc double %retval.0.in.i to float
  br label %return

if.else46:                                        ; preds = %if.else25
  %call47 = tail call float @__math_invalidf(float %y) #8
  br label %return

return:                                           ; preds = %if.else46, %sinf_poly.exit, %sinf_poly.exit112, %if.end, %if.then
  %retval.0 = phi float [ %retval.0.i131, %if.end ], [ %retval.0.i111, %sinf_poly.exit112 ], [ %retval.0.i, %sinf_poly.exit ], [ %call47, %if.else46 ], [ 1.000000e+00, %if.then ]
  ret float %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_acos(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 1072693247
  br i1 %cmp, label %do.body1, label %if.end11

do.body1:                                         ; preds = %entry
  %gl_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %sub = add nsw i32 %and, -1072693248
  %or = or i32 %sub, %gl_u.sroa.0.0.extract.trunc
  %cmp5 = icmp eq i32 %or, 0
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %do.body1
  %cmp7 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, 0
  %. = select i1 %cmp7, double 0.000000e+00, double 0x400921FB54442D18
  br label %return

if.end:                                           ; preds = %do.body1
  %sub9 = fsub double %x, %x
  %div = fdiv double %sub9, %sub9
  br label %return

if.end11:                                         ; preds = %entry
  %cmp12 = icmp ult i32 %and, 1071644672
  br i1 %cmp12, label %if.then13, label %if.else40

if.then13:                                        ; preds = %if.end11
  %cmp14 = icmp ult i32 %and, 1012924417
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.then13
  %mul = fmul double %x, %x
  %mul17 = fmul double %mul, 0x3F023DE10DFDF709
  %add = fadd double %mul17, 0x3F49EFE07501B288
  %mul18 = fmul double %mul, %add
  %add19 = fadd double %mul18, 0xBFA48228B5688F3B
  %mul20 = fmul double %mul, %add19
  %add21 = fadd double %mul20, 0x3FC9C1550E884455
  %mul22 = fmul double %mul, %add21
  %add23 = fadd double %mul22, 0xBFD4D61203EB6F7D
  %mul24 = fmul double %mul, %add23
  %add25 = fadd double %mul24, 0x3FC5555555555555
  %mul26 = fmul double %mul, %add25
  %mul27 = fmul double %mul, 0x3FB3B8C5B12E9282
  %add28 = fadd double %mul27, 0xBFE6066C1B8D0159
  %mul29 = fmul double %mul, %add28
  %add30 = fadd double %mul29, 0x40002AE59C598AC8
  %mul31 = fmul double %mul, %add30
  %add32 = fadd double %mul31, 0xC0033A271C8A2D4B
  %mul33 = fmul double %mul, %add32
  %add34 = fadd double %mul33, 1.000000e+00
  %div35 = fdiv double %mul26, %add34
  %mul36 = fmul double %div35, %x
  %sub37 = fsub double 0x3C91A62633145C07, %mul36
  %sub38 = fsub double %x, %sub37
  %sub39 = fsub double 0x3FF921FB54442D18, %sub38
  br label %return

if.else40:                                        ; preds = %if.end11
  %cmp41 = icmp slt i32 %gh_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp41, label %if.then42, label %if.else70

if.then42:                                        ; preds = %if.else40
  %add43 = fadd double %x, 1.000000e+00
  %mul44 = fmul double %add43, 5.000000e-01
  %mul45 = fmul double %mul44, 0x3F023DE10DFDF709
  %add46 = fadd double %mul45, 0x3F49EFE07501B288
  %mul47 = fmul double %mul44, %add46
  %add48 = fadd double %mul47, 0xBFA48228B5688F3B
  %mul49 = fmul double %mul44, %add48
  %add50 = fadd double %mul49, 0x3FC9C1550E884455
  %mul51 = fmul double %mul44, %add50
  %add52 = fadd double %mul51, 0xBFD4D61203EB6F7D
  %mul53 = fmul double %mul44, %add52
  %add54 = fadd double %mul53, 0x3FC5555555555555
  %mul55 = fmul double %mul44, %add54
  %mul56 = fmul double %mul44, 0x3FB3B8C5B12E9282
  %add57 = fadd double %mul56, 0xBFE6066C1B8D0159
  %mul58 = fmul double %mul44, %add57
  %add59 = fadd double %mul58, 0x40002AE59C598AC8
  %mul60 = fmul double %mul44, %add59
  %add61 = fadd double %mul60, 0xC0033A271C8A2D4B
  %mul62 = fmul double %mul44, %add61
  %add63 = fadd double %mul62, 1.000000e+00
  %call = tail call double @__ieee754_sqrt(double %mul44) #8
  %div64 = fdiv double %mul55, %add63
  %mul65 = fmul double %call, %div64
  %sub66 = fadd double %mul65, 0xBC91A62633145C07
  %add67 = fadd double %call, %sub66
  %mul68 = fmul double %add67, 2.000000e+00
  %sub69 = fsub double 0x400921FB54442D18, %mul68
  br label %return

if.else70:                                        ; preds = %if.else40
  %sub71 = fsub double 1.000000e+00, %x
  %mul72 = fmul double %sub71, 5.000000e-01
  %call73 = tail call double @__ieee754_sqrt(double %mul72) #8
  %1 = bitcast double %call73 to i64
  %sl_u.sroa.0.0.insert.mask = and i64 %1, -4294967296
  %2 = bitcast i64 %sl_u.sroa.0.0.insert.mask to double
  %mul80 = fmul double %2, %2
  %sub81 = fsub double %mul72, %mul80
  %add82 = fadd double %call73, %2
  %div83 = fdiv double %sub81, %add82
  %mul84 = fmul double %mul72, 0x3F023DE10DFDF709
  %add85 = fadd double %mul84, 0x3F49EFE07501B288
  %mul86 = fmul double %mul72, %add85
  %add87 = fadd double %mul86, 0xBFA48228B5688F3B
  %mul88 = fmul double %mul72, %add87
  %add89 = fadd double %mul88, 0x3FC9C1550E884455
  %mul90 = fmul double %mul72, %add89
  %add91 = fadd double %mul90, 0xBFD4D61203EB6F7D
  %mul92 = fmul double %mul72, %add91
  %add93 = fadd double %mul92, 0x3FC5555555555555
  %mul94 = fmul double %mul72, %add93
  %mul95 = fmul double %mul72, 0x3FB3B8C5B12E9282
  %add96 = fadd double %mul95, 0xBFE6066C1B8D0159
  %mul97 = fmul double %mul72, %add96
  %add98 = fadd double %mul97, 0x40002AE59C598AC8
  %mul99 = fmul double %mul72, %add98
  %add100 = fadd double %mul99, 0xC0033A271C8A2D4B
  %mul101 = fmul double %mul72, %add100
  %add102 = fadd double %mul101, 1.000000e+00
  %div103 = fdiv double %mul94, %add102
  %mul104 = fmul double %call73, %div103
  %add105 = fadd double %div83, %mul104
  %add106 = fadd double %2, %add105
  %mul107 = fmul double %add106, 2.000000e+00
  br label %return

return:                                           ; preds = %if.else70, %if.then42, %if.end16, %if.then13, %if.end, %if.then6
  %retval.0 = phi double [ %div, %if.end ], [ %sub39, %if.end16 ], [ %sub69, %if.then42 ], [ %mul107, %if.else70 ], [ %., %if.then6 ], [ 0x3FF921FB54442D18, %if.then13 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_acosh(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %cmp = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 1072693248
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %sub = fsub double %x, %x
  %div = fdiv double %sub, %sub
  br label %return

if.else:                                          ; preds = %entry
  %cmp3 = icmp sgt i32 %ew_u.sroa.0.4.extract.trunc, 1102053375
  br i1 %cmp3, label %if.then4, label %if.else9

if.then4:                                         ; preds = %if.else
  %cmp5 = icmp sgt i32 %ew_u.sroa.0.4.extract.trunc, 2146435071
  br i1 %cmp5, label %if.then6, label %if.else7

if.then6:                                         ; preds = %if.then4
  %add = fadd double %x, %x
  br label %return

if.else7:                                         ; preds = %if.then4
  %call = tail call double @log(double %x) #8
  %add8 = fadd double %call, 0x3FE62E42FEFA39EF
  br label %return

if.else9:                                         ; preds = %if.else
  %sub10 = add nsw i32 %ew_u.sroa.0.4.extract.trunc, -1072693248
  %or = or i32 %sub10, %ew_u.sroa.0.0.extract.trunc
  %cmp11 = icmp eq i32 %or, 0
  br i1 %cmp11, label %return, label %if.else13

if.else13:                                        ; preds = %if.else9
  %cmp14 = icmp sgt i32 %ew_u.sroa.0.4.extract.trunc, 1073741824
  br i1 %cmp14, label %if.then15, label %if.else23

if.then15:                                        ; preds = %if.else13
  %mul = fmul double %x, %x
  %mul16 = fmul double %x, 2.000000e+00
  %sub17 = fadd double %mul, -1.000000e+00
  %call18 = tail call double @__ieee754_sqrt(double %sub17) #8
  %add19 = fadd double %call18, %x
  %div20 = fdiv double 1.000000e+00, %add19
  %sub21 = fsub double %mul16, %div20
  %call22 = tail call double @log(double %sub21) #8
  br label %return

if.else23:                                        ; preds = %if.else13
  %sub24 = fadd double %x, -1.000000e+00
  %mul25 = fmul double %sub24, 2.000000e+00
  %mul26 = fmul double %sub24, %sub24
  %add27 = fadd double %mul25, %mul26
  %call28 = tail call double @__ieee754_sqrt(double %add27) #8
  %add29 = fadd double %sub24, %call28
  %call30 = tail call double @log1p(double %add29) #8
  br label %return

return:                                           ; preds = %if.else23, %if.then15, %if.else9, %if.else7, %if.then6, %if.then
  %retval.0 = phi double [ %div, %if.then ], [ %add, %if.then6 ], [ %add8, %if.else7 ], [ %call22, %if.then15 ], [ %call30, %if.else23 ], [ 0.000000e+00, %if.else9 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_asin(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 1072693247
  br i1 %cmp, label %do.body1, label %if.else

do.body1:                                         ; preds = %entry
  %gl_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %sub = add nsw i32 %and, -1072693248
  %or = or i32 %sub, %gl_u.sroa.0.0.extract.trunc
  %cmp5 = icmp eq i32 %or, 0
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %do.body1
  %mul = fmul double %x, 0x3FF921FB54442D18
  %mul7 = fmul double %x, 0x3C91A62633145C07
  %add = fadd double %mul, %mul7
  br label %return

if.end:                                           ; preds = %do.body1
  %sub8 = fsub double %x, %x
  %div = fdiv double %sub8, %sub8
  br label %return

if.else:                                          ; preds = %entry
  %cmp10 = icmp ult i32 %and, 1071644672
  br i1 %cmp10, label %if.then11, label %if.end44

if.then11:                                        ; preds = %if.else
  %cmp12 = icmp ult i32 %and, 1044381696
  br i1 %cmp12, label %if.then13, label %if.else18

if.then13:                                        ; preds = %if.then11
  %add14 = fadd double %x, 1.000000e+300
  %cmp15 = fcmp ogt double %add14, 1.000000e+00
  br i1 %cmp15, label %return, label %if.end44

if.else18:                                        ; preds = %if.then11
  %mul19 = fmul double %x, %x
  %mul20 = fmul double %mul19, 0x3F023DE10DFDF709
  %add21 = fadd double %mul20, 0x3F49EFE07501B288
  %mul22 = fmul double %mul19, %add21
  %add23 = fadd double %mul22, 0xBFA48228B5688F3B
  %mul24 = fmul double %mul19, %add23
  %add25 = fadd double %mul24, 0x3FC9C1550E884455
  %mul26 = fmul double %mul19, %add25
  %add27 = fadd double %mul26, 0xBFD4D61203EB6F7D
  %mul28 = fmul double %mul19, %add27
  %add29 = fadd double %mul28, 0x3FC5555555555555
  %mul30 = fmul double %mul19, %add29
  %mul31 = fmul double %mul19, 0x3FB3B8C5B12E9282
  %add32 = fadd double %mul31, 0xBFE6066C1B8D0159
  %mul33 = fmul double %mul19, %add32
  %add34 = fadd double %mul33, 0x40002AE59C598AC8
  %mul35 = fmul double %mul19, %add34
  %add36 = fadd double %mul35, 0xC0033A271C8A2D4B
  %mul37 = fmul double %mul19, %add36
  %add38 = fadd double %mul37, 1.000000e+00
  %div39 = fdiv double %mul30, %add38
  %mul40 = fmul double %div39, %x
  %add41 = fadd double %mul40, %x
  br label %return

if.end44:                                         ; preds = %if.then13, %if.else
  %call = tail call double @fabs(double %x) #8
  %sub45 = fsub double 1.000000e+00, %call
  %mul46 = fmul double %sub45, 5.000000e-01
  %mul47 = fmul double %mul46, 0x3F023DE10DFDF709
  %add48 = fadd double %mul47, 0x3F49EFE07501B288
  %mul49 = fmul double %mul46, %add48
  %add50 = fadd double %mul49, 0xBFA48228B5688F3B
  %mul51 = fmul double %mul46, %add50
  %add52 = fadd double %mul51, 0x3FC9C1550E884455
  %mul53 = fmul double %mul46, %add52
  %add54 = fadd double %mul53, 0xBFD4D61203EB6F7D
  %mul55 = fmul double %mul46, %add54
  %add56 = fadd double %mul55, 0x3FC5555555555555
  %mul57 = fmul double %mul46, %add56
  %mul58 = fmul double %mul46, 0x3FB3B8C5B12E9282
  %add59 = fadd double %mul58, 0xBFE6066C1B8D0159
  %mul60 = fmul double %mul46, %add59
  %add61 = fadd double %mul60, 0x40002AE59C598AC8
  %mul62 = fmul double %mul46, %add61
  %add63 = fadd double %mul62, 0xC0033A271C8A2D4B
  %mul64 = fmul double %mul46, %add63
  %add65 = fadd double %mul64, 1.000000e+00
  %call66 = tail call double @__ieee754_sqrt(double %mul46) #8
  %cmp67 = icmp ugt i32 %and, 1072640818
  br i1 %cmp67, label %if.then68, label %if.else75

if.then68:                                        ; preds = %if.end44
  %div69 = fdiv double %mul57, %add65
  %mul70 = fmul double %call66, %div69
  %add71 = fadd double %call66, %mul70
  %mul72 = fmul double %add71, 2.000000e+00
  %sub73 = fadd double %mul72, 0xBC91A62633145C07
  %sub74 = fsub double 0x3FF921FB54442D18, %sub73
  br label %if.end96

if.else75:                                        ; preds = %if.end44
  %1 = bitcast double %call66 to i64
  %sl_u.sroa.0.0.insert.mask = and i64 %1, -4294967296
  %2 = bitcast i64 %sl_u.sroa.0.0.insert.mask to double
  %mul82 = fmul double %2, %2
  %sub83 = fsub double %mul46, %mul82
  %add84 = fadd double %call66, %2
  %div85 = fdiv double %sub83, %add84
  %div86 = fdiv double %mul57, %add65
  %mul87 = fmul double %call66, 2.000000e+00
  %mul88 = fmul double %mul87, %div86
  %mul89 = fmul double %div85, 2.000000e+00
  %sub90 = fsub double 0x3C91A62633145C07, %mul89
  %sub91 = fsub double %mul88, %sub90
  %mul92 = fmul double %2, 2.000000e+00
  %sub93 = fsub double 0x3FE921FB54442D18, %mul92
  %sub94 = fsub double %sub91, %sub93
  %sub95 = fsub double 0x3FE921FB54442D18, %sub94
  br label %if.end96

if.end96:                                         ; preds = %if.else75, %if.then68
  %t.0 = phi double [ %sub74, %if.then68 ], [ %sub95, %if.else75 ]
  %cmp97 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp97, label %return, label %if.else99

if.else99:                                        ; preds = %if.end96
  %sub100 = fsub double -0.000000e+00, %t.0
  br label %return

return:                                           ; preds = %if.else99, %if.end96, %if.else18, %if.then13, %if.end, %if.then6
  %retval.0 = phi double [ %add, %if.then6 ], [ %div, %if.end ], [ %sub100, %if.else99 ], [ %add41, %if.else18 ], [ %x, %if.then13 ], [ %t.0, %if.end96 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_atan2(double %y, double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %1 = bitcast double %y to i64
  %ew_u3.sroa.0.4.extract.shift = lshr i64 %1, 32
  %ew_u3.sroa.0.4.extract.trunc = trunc i64 %ew_u3.sroa.0.4.extract.shift to i32
  %ew_u3.sroa.0.0.extract.trunc = trunc i64 %1 to i32
  %and10 = and i32 %ew_u3.sroa.0.4.extract.trunc, 2147483647
  %sub = sub i32 0, %ew_u.sroa.0.0.extract.trunc
  %or = or i32 %ew_u.sroa.0.0.extract.trunc, %sub
  %shr = lshr i32 %or, 31
  %or11 = or i32 %and, %shr
  %cmp = icmp ugt i32 %or11, 2146435072
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %sub12 = sub i32 0, %ew_u3.sroa.0.0.extract.trunc
  %or13 = or i32 %ew_u3.sroa.0.0.extract.trunc, %sub12
  %shr14 = lshr i32 %or13, 31
  %or15 = or i32 %and10, %shr14
  %cmp16 = icmp ugt i32 %or15, 2146435072
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %add = fadd double %y, %x
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %sub17 = add nsw i32 %ew_u.sroa.0.4.extract.trunc, -1072693248
  %or18 = or i32 %sub17, %ew_u.sroa.0.0.extract.trunc
  %cmp19 = icmp eq i32 %or18, 0
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  %call = tail call double @atan(double %y) #8
  br label %return

if.end21:                                         ; preds = %if.end
  %shr22122123 = lshr i64 %1, 63
  %shr22122 = trunc i64 %shr22122123 to i32
  %shr24125126 = lshr i64 %0, 62
  %shr24125 = trunc i64 %shr24125126 to i32
  %and25 = and i32 %shr24125, 2
  %or26 = or i32 %and25, %shr22122
  %or27 = or i32 %and10, %ew_u3.sroa.0.0.extract.trunc
  %cmp28 = icmp eq i32 %or27, 0
  br i1 %cmp28, label %if.then29, label %if.end32

if.then29:                                        ; preds = %if.end21
  switch i32 %or26, label %if.end32 [
    i32 0, label %return
    i32 1, label %return
    i32 2, label %sw.bb30
    i32 3, label %sw.bb31
  ]

sw.bb30:                                          ; preds = %if.then29
  br label %return

sw.bb31:                                          ; preds = %if.then29
  br label %return

if.end32:                                         ; preds = %if.then29, %if.end21
  %or33 = or i32 %and, %ew_u.sroa.0.0.extract.trunc
  %cmp34 = icmp eq i32 %or33, 0
  br i1 %cmp34, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.end32
  %cmp36 = icmp slt i32 %ew_u3.sroa.0.4.extract.trunc, 0
  %cond = select i1 %cmp36, double 0xBFF921FB54442D18, double 0x3FF921FB54442D18
  br label %return

if.end37:                                         ; preds = %if.end32
  %cmp38 = icmp eq i32 %and, 2146435072
  %cmp40 = icmp eq i32 %and10, 2146435072
  br i1 %cmp38, label %if.then39, label %if.end53

if.then39:                                        ; preds = %if.end37
  br i1 %cmp40, label %switch.lookup, label %switch.lookup128

if.end53:                                         ; preds = %if.end37
  br i1 %cmp40, label %if.then55, label %if.end58

if.then55:                                        ; preds = %if.end53
  %cmp56 = icmp slt i32 %ew_u3.sroa.0.4.extract.trunc, 0
  %cond57 = select i1 %cmp56, double 0xBFF921FB54442D18, double 0x3FF921FB54442D18
  br label %return

if.end58:                                         ; preds = %if.end53
  %sub59 = sub nsw i32 %and10, %and
  %shr60 = ashr i32 %sub59, 20
  %cmp61 = icmp sgt i32 %shr60, 60
  br i1 %cmp61, label %if.end71, label %if.else63

if.else63:                                        ; preds = %if.end58
  %cmp64 = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 0
  %cmp65 = icmp slt i32 %shr60, -60
  %or.cond = and i1 %cmp64, %cmp65
  br i1 %or.cond, label %if.end71, label %if.else67

if.else67:                                        ; preds = %if.else63
  %div = fdiv double %y, %x
  %call68 = tail call double @fabs(double %div) #8
  %call69 = tail call double @atan(double %call68) #8
  br label %if.end71

if.end71:                                         ; preds = %if.else67, %if.else63, %if.end58
  %z.0 = phi double [ %call69, %if.else67 ], [ 0x3FF921FB54442D18, %if.end58 ], [ 0.000000e+00, %if.else63 ]
  switch i32 %or26, label %sw.default [
    i32 0, label %return
    i32 1, label %do.body74
    i32 2, label %sw.bb85
  ]

do.body74:                                        ; preds = %if.end71
  %2 = bitcast double %z.0 to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %2, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %xor = xor i32 %gh_u.sroa.0.4.extract.trunc, -2147483648
  %sh_u.sroa.0.4.insert.ext = zext i32 %xor to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %2, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %3 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  br label %return

sw.bb85:                                          ; preds = %if.end71
  %sub86 = fadd double %z.0, 0xBCA1A62633145C07
  %sub87 = fsub double 0x400921FB54442D18, %sub86
  br label %return

sw.default:                                       ; preds = %if.end71
  %sub88 = fadd double %z.0, 0xBCA1A62633145C07
  %sub89 = fadd double %sub88, 0xC00921FB54442D18
  br label %return

switch.lookup:                                    ; preds = %if.then39
  %switch.gep = getelementptr inbounds [4 x double]* @switch.table, i32 0, i32 %or26
  %switch.load = load double* %switch.gep, align 8
  ret double %switch.load

switch.lookup128:                                 ; preds = %if.then39
  %switch.gep130 = getelementptr inbounds [4 x double]* @switch.table1, i32 0, i32 %or26
  %switch.load131 = load double* %switch.gep130, align 8
  ret double %switch.load131

return:                                           ; preds = %sw.default, %sw.bb85, %do.body74, %if.end71, %if.then55, %if.then35, %sw.bb31, %sw.bb30, %if.then29, %if.then29, %if.then20, %if.then
  %retval.0 = phi double [ %add, %if.then ], [ %call, %if.then20 ], [ %cond, %if.then35 ], [ %cond57, %if.then55 ], [ %sub89, %sw.default ], [ %sub87, %sw.bb85 ], [ %3, %do.body74 ], [ 0xC00921FB54442D18, %sw.bb31 ], [ 0x400921FB54442D18, %sw.bb30 ], [ %y, %if.then29 ], [ %y, %if.then29 ], [ %z.0, %if.end71 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_atanh(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %sub = sub i32 0, %ew_u.sroa.0.0.extract.trunc
  %or = or i32 %ew_u.sroa.0.0.extract.trunc, %sub
  %shr = lshr i32 %or, 31
  %or2 = or i32 %and, %shr
  %cmp = icmp ugt i32 %or2, 1072693248
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sub3 = fsub double %x, %x
  %div = fdiv double %sub3, %sub3
  br label %return

if.end:                                           ; preds = %entry
  %cmp5 = icmp eq i32 %and, 1072693248
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %div7 = fdiv double %x, 0.000000e+00
  br label %return

if.end8:                                          ; preds = %if.end
  %cmp9 = icmp ult i32 %and, 1043333120
  %add = fadd double %x, 1.000000e+300
  %cmp10 = fcmp ogt double %add, 0.000000e+00
  %or.cond = and i1 %cmp9, %cmp10
  br i1 %or.cond, label %return, label %do.body13

do.body13:                                        ; preds = %if.end8
  %sh_u.sroa.0.4.insert.ext = zext i32 %and to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw nsw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %0, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %1 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  %cmp19 = icmp ult i32 %and, 1071644672
  %add21 = fadd double %1, %1
  br i1 %cmp19, label %if.then20, label %if.else

if.then20:                                        ; preds = %do.body13
  %mul = fmul double %1, %add21
  %sub22 = fsub double 1.000000e+00, %1
  %div23 = fdiv double %mul, %sub22
  %add24 = fadd double %add21, %div23
  %call = tail call double @log1p(double %add24) #8
  br label %if.end31

if.else:                                          ; preds = %do.body13
  %sub27 = fsub double 1.000000e+00, %1
  %div28 = fdiv double %add21, %sub27
  %call29 = tail call double @log1p(double %div28) #8
  br label %if.end31

if.end31:                                         ; preds = %if.else, %if.then20
  %t.0.in = phi double [ %call, %if.then20 ], [ %call29, %if.else ]
  %t.0 = fmul double %t.0.in, 5.000000e-01
  %cmp32 = icmp sgt i32 %ew_u.sroa.0.4.extract.trunc, -1
  br i1 %cmp32, label %return, label %if.else34

if.else34:                                        ; preds = %if.end31
  %sub35 = fsub double -0.000000e+00, %t.0
  br label %return

return:                                           ; preds = %if.else34, %if.end31, %if.end8, %if.then6, %if.then
  %retval.0 = phi double [ %div, %if.then ], [ %div7, %if.then6 ], [ %sub35, %if.else34 ], [ %x, %if.end8 ], [ %t.0, %if.end31 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_cosh(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mul = fmul double %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp ult i32 %and, 1071001155
  br i1 %cmp1, label %if.then2, label %if.end10

if.then2:                                         ; preds = %if.end
  %call = tail call double @fabs(double %x) #8
  %call3 = tail call double @expm1(double %call) #8
  %add = fadd double %call3, 1.000000e+00
  %cmp4 = icmp ult i32 %and, 1015021568
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %if.then2
  %mul7 = fmul double %call3, %call3
  %add8 = fadd double %add, %add
  %div = fdiv double %mul7, %add8
  %add9 = fadd double %div, 1.000000e+00
  br label %return

if.end10:                                         ; preds = %if.end
  %cmp11 = icmp ult i32 %and, 1077280768
  br i1 %cmp11, label %if.then12, label %if.end18

if.then12:                                        ; preds = %if.end10
  %call13 = tail call double @fabs(double %x) #8
  %call14 = tail call double @exp(double %call13) #8
  %mul15 = fmul double %call14, 5.000000e-01
  %div16 = fdiv double 5.000000e-01, %call14
  %add17 = fadd double %mul15, %div16
  br label %return

if.end18:                                         ; preds = %if.end10
  %cmp19 = icmp ult i32 %and, 1082535490
  br i1 %cmp19, label %if.then20, label %do.body25

if.then20:                                        ; preds = %if.end18
  %call21 = tail call double @fabs(double %x) #8
  %call22 = tail call double @exp(double %call21) #8
  %mul23 = fmul double %call22, 5.000000e-01
  br label %return

do.body25:                                        ; preds = %if.end18
  %cmp29 = icmp ult i32 %and, 1082536910
  br i1 %cmp29, label %if.then32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body25
  %gl_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %cmp30 = icmp eq i32 %and, 1082536910
  %cmp31 = icmp ult i32 %gl_u.sroa.0.0.extract.trunc, -1883637634
  %or.cond = and i1 %cmp30, %cmp31
  br i1 %or.cond, label %if.then32, label %if.end38

if.then32:                                        ; preds = %lor.lhs.false, %do.body25
  %call33 = tail call double @fabs(double %x) #8
  %mul34 = fmul double %call33, 5.000000e-01
  %call35 = tail call double @exp(double %mul34) #8
  %mul36 = fmul double %call35, 5.000000e-01
  %mul37 = fmul double %call35, %mul36
  br label %return

if.end38:                                         ; preds = %lor.lhs.false
  %call39 = tail call double @__math_oflow(i32 0) #8
  br label %return

return:                                           ; preds = %if.end38, %if.then32, %if.then20, %if.then12, %if.end6, %if.then2, %if.then
  %retval.0 = phi double [ %mul, %if.then ], [ %add9, %if.end6 ], [ %add17, %if.then12 ], [ %mul23, %if.then20 ], [ %mul37, %if.then32 ], [ %call39, %if.end38 ], [ %add, %if.then2 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_acosf(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp eq i32 %and, 1065353216
  br i1 %cmp, label %if.then, label %if.else3

if.then:                                          ; preds = %entry
  %cmp1 = icmp sgt i32 %0, 0
  %. = select i1 %cmp1, float 0.000000e+00, float 0x400921FB60000000
  br label %return

if.else3:                                         ; preds = %entry
  %cmp4 = icmp ugt i32 %and, 1065353216
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.else3
  %sub = fsub float %x, %x
  %div = fdiv float %sub, %sub
  br label %return

if.end7:                                          ; preds = %if.else3
  %cmp8 = icmp ult i32 %and, 1056964608
  br i1 %cmp8, label %if.then9, label %if.else36

if.then9:                                         ; preds = %if.end7
  %cmp10 = icmp ult i32 %and, 587202561
  br i1 %cmp10, label %return, label %if.end12

if.end12:                                         ; preds = %if.then9
  %mul = fmul float %x, %x
  %mul13 = fmul float %mul, 0x3F023DE100000000
  %add = fadd float %mul13, 0x3F49EFE080000000
  %mul14 = fmul float %mul, %add
  %add15 = fadd float %mul14, 0xBFA48228C0000000
  %mul16 = fmul float %mul, %add15
  %add17 = fadd float %mul16, 0x3FC9C15500000000
  %mul18 = fmul float %mul, %add17
  %add19 = fadd float %mul18, 0xBFD4D61200000000
  %mul20 = fmul float %mul, %add19
  %add21 = fadd float %mul20, 0x3FC5555560000000
  %mul22 = fmul float %mul, %add21
  %mul23 = fmul float %mul, 0x3FB3B8C5C0000000
  %add24 = fadd float %mul23, 0xBFE6066C20000000
  %mul25 = fmul float %mul, %add24
  %add26 = fadd float %mul25, 0x40002AE5A0000000
  %mul27 = fmul float %mul, %add26
  %add28 = fadd float %mul27, 0xC0033A2720000000
  %mul29 = fmul float %mul, %add28
  %add30 = fadd float %mul29, 1.000000e+00
  %div31 = fdiv float %mul22, %add30
  %mul32 = fmul float %div31, %x
  %sub33 = fsub float 0x3E74442D00000000, %mul32
  %sub34 = fsub float %x, %sub33
  %sub35 = fsub float 0x3FF921FB40000000, %sub34
  br label %return

if.else36:                                        ; preds = %if.end7
  %cmp37 = icmp slt i32 %0, 0
  br i1 %cmp37, label %if.then38, label %if.else66

if.then38:                                        ; preds = %if.else36
  %add39 = fadd float %x, 1.000000e+00
  %mul40 = fmul float %add39, 5.000000e-01
  %mul41 = fmul float %mul40, 0x3F023DE100000000
  %add42 = fadd float %mul41, 0x3F49EFE080000000
  %mul43 = fmul float %mul40, %add42
  %add44 = fadd float %mul43, 0xBFA48228C0000000
  %mul45 = fmul float %mul40, %add44
  %add46 = fadd float %mul45, 0x3FC9C15500000000
  %mul47 = fmul float %mul40, %add46
  %add48 = fadd float %mul47, 0xBFD4D61200000000
  %mul49 = fmul float %mul40, %add48
  %add50 = fadd float %mul49, 0x3FC5555560000000
  %mul51 = fmul float %mul40, %add50
  %mul52 = fmul float %mul40, 0x3FB3B8C5C0000000
  %add53 = fadd float %mul52, 0xBFE6066C20000000
  %mul54 = fmul float %mul40, %add53
  %add55 = fadd float %mul54, 0x40002AE5A0000000
  %mul56 = fmul float %mul40, %add55
  %add57 = fadd float %mul56, 0xC0033A2720000000
  %mul58 = fmul float %mul40, %add57
  %add59 = fadd float %mul58, 1.000000e+00
  %call = tail call float @__ieee754_sqrtf(float %mul40) #8
  %div60 = fdiv float %mul51, %add59
  %mul61 = fmul float %call, %div60
  %sub62 = fadd float %mul61, 0xBE74442D00000000
  %add63 = fadd float %call, %sub62
  %mul64 = fmul float %add63, 2.000000e+00
  %sub65 = fsub float 0x400921FB40000000, %mul64
  br label %return

if.else66:                                        ; preds = %if.else36
  %sub67 = fsub float 1.000000e+00, %x
  %mul68 = fmul float %sub67, 5.000000e-01
  %call69 = tail call float @__ieee754_sqrtf(float %mul68) #8
  %1 = bitcast float %call69 to i32
  %and76 = and i32 %1, -4096
  %2 = bitcast i32 %and76 to float
  %mul80 = fmul float %2, %2
  %sub81 = fsub float %mul68, %mul80
  %add82 = fadd float %call69, %2
  %div83 = fdiv float %sub81, %add82
  %mul84 = fmul float %mul68, 0x3F023DE100000000
  %add85 = fadd float %mul84, 0x3F49EFE080000000
  %mul86 = fmul float %mul68, %add85
  %add87 = fadd float %mul86, 0xBFA48228C0000000
  %mul88 = fmul float %mul68, %add87
  %add89 = fadd float %mul88, 0x3FC9C15500000000
  %mul90 = fmul float %mul68, %add89
  %add91 = fadd float %mul90, 0xBFD4D61200000000
  %mul92 = fmul float %mul68, %add91
  %add93 = fadd float %mul92, 0x3FC5555560000000
  %mul94 = fmul float %mul68, %add93
  %mul95 = fmul float %mul68, 0x3FB3B8C5C0000000
  %add96 = fadd float %mul95, 0xBFE6066C20000000
  %mul97 = fmul float %mul68, %add96
  %add98 = fadd float %mul97, 0x40002AE5A0000000
  %mul99 = fmul float %mul68, %add98
  %add100 = fadd float %mul99, 0xC0033A2720000000
  %mul101 = fmul float %mul68, %add100
  %add102 = fadd float %mul101, 1.000000e+00
  %div103 = fdiv float %mul94, %add102
  %mul104 = fmul float %call69, %div103
  %add105 = fadd float %div83, %mul104
  %add106 = fadd float %2, %add105
  %mul107 = fmul float %add106, 2.000000e+00
  br label %return

return:                                           ; preds = %if.else66, %if.then38, %if.end12, %if.then9, %if.then5, %if.then
  %retval.0 = phi float [ %div, %if.then5 ], [ %sub35, %if.end12 ], [ %sub65, %if.then38 ], [ %mul107, %if.else66 ], [ %., %if.then ], [ 0x3FF921FB60000000, %if.then9 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_acoshf(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %cmp = icmp slt i32 %0, 1065353216
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %sub = fsub float %x, %x
  %div = fdiv float %sub, %sub
  br label %return

if.else:                                          ; preds = %entry
  %cmp2 = icmp sgt i32 %0, 1300234239
  br i1 %cmp2, label %if.then3, label %if.else8

if.then3:                                         ; preds = %if.else
  %cmp4 = icmp slt i32 %0, 2139095040
  br i1 %cmp4, label %if.else6, label %if.then5

if.then5:                                         ; preds = %if.then3
  %add = fadd float %x, %x
  br label %return

if.else6:                                         ; preds = %if.then3
  %call = tail call float @logf(float %x) #8
  %add7 = fadd float %call, 0x3FE62E4300000000
  br label %return

if.else8:                                         ; preds = %if.else
  %cmp9 = icmp eq i32 %0, 1065353216
  br i1 %cmp9, label %return, label %if.else11

if.else11:                                        ; preds = %if.else8
  %cmp12 = icmp sgt i32 %0, 1073741824
  br i1 %cmp12, label %if.then13, label %if.else21

if.then13:                                        ; preds = %if.else11
  %mul = fmul float %x, %x
  %mul14 = fmul float %x, 2.000000e+00
  %sub15 = fadd float %mul, -1.000000e+00
  %call16 = tail call float @__ieee754_sqrtf(float %sub15) #8
  %add17 = fadd float %call16, %x
  %div18 = fdiv float 1.000000e+00, %add17
  %sub19 = fsub float %mul14, %div18
  %call20 = tail call float @logf(float %sub19) #8
  br label %return

if.else21:                                        ; preds = %if.else11
  %sub22 = fadd float %x, -1.000000e+00
  %mul23 = fmul float %sub22, 2.000000e+00
  %mul24 = fmul float %sub22, %sub22
  %add25 = fadd float %mul23, %mul24
  %call26 = tail call float @__ieee754_sqrtf(float %add25) #8
  %add27 = fadd float %sub22, %call26
  %call28 = tail call float @log1pf(float %add27) #8
  br label %return

return:                                           ; preds = %if.else21, %if.then13, %if.else8, %if.else6, %if.then5, %if.then
  %retval.0 = phi float [ %div, %if.then ], [ %add7, %if.else6 ], [ %add, %if.then5 ], [ %call20, %if.then13 ], [ %call28, %if.else21 ], [ 0.000000e+00, %if.else8 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_asinf(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp eq i32 %and, 1065353216
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = fmul float %x, 0x3FF921FB60000000
  %mul1 = fmul float %x, 0xBE6777A5C0000000
  %add = fadd float %mul, %mul1
  br label %return

if.else:                                          ; preds = %entry
  %cmp2 = icmp ugt i32 %and, 1065353216
  br i1 %cmp2, label %if.then3, label %if.else5

if.then3:                                         ; preds = %if.else
  %sub = fsub float %x, %x
  %div = fdiv float %sub, %sub
  br label %return

if.else5:                                         ; preds = %if.else
  %cmp6 = icmp ult i32 %and, 1056964608
  br i1 %cmp6, label %if.then7, label %if.end40

if.then7:                                         ; preds = %if.else5
  %cmp8 = icmp ult i32 %and, 838860800
  br i1 %cmp8, label %if.then9, label %if.else13

if.then9:                                         ; preds = %if.then7
  %add10 = fadd float %x, 0x46293E5940000000
  %cmp11 = fcmp ogt float %add10, 1.000000e+00
  br i1 %cmp11, label %return, label %if.end40

if.else13:                                        ; preds = %if.then7
  %mul14 = fmul float %x, %x
  %mul15 = fmul float %mul14, 0x3F023DE100000000
  %add16 = fadd float %mul15, 0x3F49EFE080000000
  %mul17 = fmul float %mul14, %add16
  %add18 = fadd float %mul17, 0xBFA48228C0000000
  %mul19 = fmul float %mul14, %add18
  %add20 = fadd float %mul19, 0x3FC9C15500000000
  %mul21 = fmul float %mul14, %add20
  %add22 = fadd float %mul21, 0xBFD4D61200000000
  %mul23 = fmul float %mul14, %add22
  %add24 = fadd float %mul23, 0x3FC5555560000000
  %mul25 = fmul float %mul14, %add24
  %mul26 = fmul float %mul14, 0x3FB3B8C5C0000000
  %add27 = fadd float %mul26, 0xBFE6066C20000000
  %mul28 = fmul float %mul14, %add27
  %add29 = fadd float %mul28, 0x40002AE5A0000000
  %mul30 = fmul float %mul14, %add29
  %add31 = fadd float %mul30, 0xC0033A2720000000
  %mul32 = fmul float %mul14, %add31
  %add33 = fadd float %mul32, 1.000000e+00
  %div34 = fdiv float %mul25, %add33
  %mul35 = fmul float %div34, %x
  %add36 = fadd float %mul35, %x
  br label %return

if.end40:                                         ; preds = %if.then9, %if.else5
  %call = tail call float @fabsf(float %x) #8
  %sub41 = fsub float 1.000000e+00, %call
  %mul42 = fmul float %sub41, 5.000000e-01
  %mul43 = fmul float %mul42, 0x3F023DE100000000
  %add44 = fadd float %mul43, 0x3F49EFE080000000
  %mul45 = fmul float %mul42, %add44
  %add46 = fadd float %mul45, 0xBFA48228C0000000
  %mul47 = fmul float %mul42, %add46
  %add48 = fadd float %mul47, 0x3FC9C15500000000
  %mul49 = fmul float %mul42, %add48
  %add50 = fadd float %mul49, 0xBFD4D61200000000
  %mul51 = fmul float %mul42, %add50
  %add52 = fadd float %mul51, 0x3FC5555560000000
  %mul53 = fmul float %mul42, %add52
  %mul54 = fmul float %mul42, 0x3FB3B8C5C0000000
  %add55 = fadd float %mul54, 0xBFE6066C20000000
  %mul56 = fmul float %mul42, %add55
  %add57 = fadd float %mul56, 0x40002AE5A0000000
  %mul58 = fmul float %mul42, %add57
  %add59 = fadd float %mul58, 0xC0033A2720000000
  %mul60 = fmul float %mul42, %add59
  %add61 = fadd float %mul60, 1.000000e+00
  %call62 = tail call float @__ieee754_sqrtf(float %mul42) #8
  %cmp63 = icmp ugt i32 %and, 1064933785
  br i1 %cmp63, label %if.then64, label %if.else71

if.then64:                                        ; preds = %if.end40
  %div65 = fdiv float %mul53, %add61
  %mul66 = fmul float %call62, %div65
  %add67 = fadd float %call62, %mul66
  %mul68 = fmul float %add67, 2.000000e+00
  %sub69 = fadd float %mul68, 0x3E6777A5C0000000
  %sub70 = fsub float 0x3FF921FB60000000, %sub69
  br label %if.end96

if.else71:                                        ; preds = %if.end40
  %1 = bitcast float %call62 to i32
  %and78 = and i32 %1, -4096
  %2 = bitcast i32 %and78 to float
  %mul82 = fmul float %2, %2
  %sub83 = fsub float %mul42, %mul82
  %add84 = fadd float %call62, %2
  %div85 = fdiv float %sub83, %add84
  %div86 = fdiv float %mul53, %add61
  %mul87 = fmul float %call62, 2.000000e+00
  %mul88 = fmul float %mul87, %div86
  %mul89 = fmul float %div85, 2.000000e+00
  %sub90 = fsub float 0xBE6777A5C0000000, %mul89
  %sub91 = fsub float %mul88, %sub90
  %mul92 = fmul float %2, 2.000000e+00
  %sub93 = fsub float 0x3FE921FB60000000, %mul92
  %sub94 = fsub float %sub91, %sub93
  %sub95 = fsub float 0x3FE921FB60000000, %sub94
  br label %if.end96

if.end96:                                         ; preds = %if.else71, %if.then64
  %t.0 = phi float [ %sub70, %if.then64 ], [ %sub95, %if.else71 ]
  %cmp97 = icmp sgt i32 %0, 0
  br i1 %cmp97, label %return, label %if.else99

if.else99:                                        ; preds = %if.end96
  %sub100 = fsub float -0.000000e+00, %t.0
  br label %return

return:                                           ; preds = %if.else99, %if.end96, %if.else13, %if.then9, %if.then3, %if.then
  %retval.0 = phi float [ %add, %if.then ], [ %div, %if.then3 ], [ %sub100, %if.else99 ], [ %add36, %if.else13 ], [ %x, %if.then9 ], [ %t.0, %if.end96 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_atan2f(float %y, float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %1 = bitcast float %y to i32
  %and6 = and i32 %1, 2147483647
  %cmp = icmp ugt i32 %and, 2139095040
  %cmp7 = icmp ugt i32 %and6, 2139095040
  %or.cond = or i1 %cmp, %cmp7
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %add = fadd float %y, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp8 = icmp eq i32 %0, 1065353216
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  %call = tail call float @atanf(float %y) #8
  br label %return

if.end10:                                         ; preds = %if.end
  %shr99 = lshr i32 %1, 31
  %shr12100 = lshr i32 %0, 30
  %and13 = and i32 %shr12100, 2
  %or = or i32 %and13, %shr99
  %cmp14 = icmp eq i32 %and6, 0
  br i1 %cmp14, label %if.then15, label %if.end18

if.then15:                                        ; preds = %if.end10
  switch i32 %or, label %if.end18 [
    i32 0, label %return
    i32 1, label %return
    i32 2, label %sw.bb16
    i32 3, label %sw.bb17
  ]

sw.bb16:                                          ; preds = %if.then15
  br label %return

sw.bb17:                                          ; preds = %if.then15
  br label %return

if.end18:                                         ; preds = %if.then15, %if.end10
  switch i32 %and, label %if.end38 [
    i32 0, label %if.then20
    i32 2139095040, label %if.then24
  ]

if.then20:                                        ; preds = %if.end18
  %cmp21 = icmp slt i32 %1, 0
  %cond = select i1 %cmp21, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  br label %return

if.then24:                                        ; preds = %if.end18
  %cmp25 = icmp eq i32 %and6, 2139095040
  br i1 %cmp25, label %switch.lookup, label %switch.lookup101

if.end38:                                         ; preds = %if.end18
  %cmp39 = icmp eq i32 %and6, 2139095040
  br i1 %cmp39, label %if.then40, label %if.end43

if.then40:                                        ; preds = %if.end38
  %cmp41 = icmp slt i32 %1, 0
  %cond42 = select i1 %cmp41, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  br label %return

if.end43:                                         ; preds = %if.end38
  %sub = sub nsw i32 %and6, %and
  %shr44 = ashr i32 %sub, 23
  %cmp45 = icmp sgt i32 %shr44, 60
  br i1 %cmp45, label %if.end55, label %if.else47

if.else47:                                        ; preds = %if.end43
  %cmp48 = icmp slt i32 %0, 0
  %cmp49 = icmp slt i32 %shr44, -60
  %or.cond72 = and i1 %cmp48, %cmp49
  br i1 %or.cond72, label %if.end55, label %if.else51

if.else51:                                        ; preds = %if.else47
  %div = fdiv float %y, %x
  %call52 = tail call float @fabsf(float %div) #8
  %call53 = tail call float @atanf(float %call52) #8
  br label %if.end55

if.end55:                                         ; preds = %if.else51, %if.else47, %if.end43
  %z.0 = phi float [ %call53, %if.else51 ], [ 0x3FF921FB60000000, %if.end43 ], [ 0.000000e+00, %if.else47 ]
  switch i32 %or, label %sw.default [
    i32 0, label %return
    i32 1, label %do.body58
    i32 2, label %sw.bb67
  ]

do.body58:                                        ; preds = %if.end55
  %2 = bitcast float %z.0 to i32
  %xor = xor i32 %2, -2147483648
  %3 = bitcast i32 %xor to float
  br label %return

sw.bb67:                                          ; preds = %if.end55
  %sub68 = fadd float %z.0, 0x3E7777A5C0000000
  %sub69 = fsub float 0x400921FB60000000, %sub68
  br label %return

sw.default:                                       ; preds = %if.end55
  %sub70 = fadd float %z.0, 0x3E7777A5C0000000
  %sub71 = fadd float %sub70, 0xC00921FB60000000
  br label %return

switch.lookup:                                    ; preds = %if.then24
  %switch.gep = getelementptr inbounds [4 x float]* @switch.table2, i32 0, i32 %or
  %switch.load = load float* %switch.gep, align 4
  ret float %switch.load

switch.lookup101:                                 ; preds = %if.then24
  %switch.gep103 = getelementptr inbounds [4 x float]* @switch.table13, i32 0, i32 %or
  %switch.load104 = load float* %switch.gep103, align 4
  ret float %switch.load104

return:                                           ; preds = %sw.default, %sw.bb67, %do.body58, %if.end55, %if.then40, %if.then20, %sw.bb17, %sw.bb16, %if.then15, %if.then15, %if.then9, %if.then
  %retval.0 = phi float [ %add, %if.then ], [ %call, %if.then9 ], [ %cond, %if.then20 ], [ %cond42, %if.then40 ], [ %sub71, %sw.default ], [ %sub69, %sw.bb67 ], [ %3, %do.body58 ], [ 0xC00921FB60000000, %sw.bb17 ], [ 0x400921FB60000000, %sw.bb16 ], [ %y, %if.then15 ], [ %y, %if.then15 ], [ %z.0, %if.end55 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_atanhf(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ugt i32 %and, 1065353216
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sub = fsub float %x, %x
  %div = fdiv float %sub, %sub
  br label %return

if.end:                                           ; preds = %entry
  %cmp2 = icmp eq i32 %and, 1065353216
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %div4 = fdiv float %x, 0.000000e+00
  br label %return

if.end5:                                          ; preds = %if.end
  %cmp6 = icmp ult i32 %and, 830472192
  %add = fadd float %x, 0x46293E5940000000
  %cmp7 = fcmp ogt float %add, 0.000000e+00
  %or.cond = and i1 %cmp6, %cmp7
  br i1 %or.cond, label %return, label %do.body10

do.body10:                                        ; preds = %if.end5
  %1 = bitcast i32 %and to float
  %cmp14 = icmp ult i32 %and, 1056964608
  %add16 = fadd float %1, %1
  br i1 %cmp14, label %if.then15, label %if.else

if.then15:                                        ; preds = %do.body10
  %mul = fmul float %1, %add16
  %sub17 = fsub float 1.000000e+00, %1
  %div18 = fdiv float %mul, %sub17
  %add19 = fadd float %add16, %div18
  %call = tail call float @log1pf(float %add19) #8
  br label %if.end26

if.else:                                          ; preds = %do.body10
  %sub22 = fsub float 1.000000e+00, %1
  %div23 = fdiv float %add16, %sub22
  %call24 = tail call float @log1pf(float %div23) #8
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then15
  %t.0.in = phi float [ %call, %if.then15 ], [ %call24, %if.else ]
  %t.0 = fmul float %t.0.in, 5.000000e-01
  %cmp27 = icmp sgt i32 %0, -1
  br i1 %cmp27, label %return, label %if.else29

if.else29:                                        ; preds = %if.end26
  %sub30 = fsub float -0.000000e+00, %t.0
  br label %return

return:                                           ; preds = %if.else29, %if.end26, %if.end5, %if.then3, %if.then
  %retval.0 = phi float [ %div, %if.then ], [ %div4, %if.then3 ], [ %sub30, %if.else29 ], [ %x, %if.end5 ], [ %t.0, %if.end26 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_coshf(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %mul = fmul float %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp ult i32 %and, 1051816472
  br i1 %cmp1, label %if.then2, label %if.end10

if.then2:                                         ; preds = %if.end
  %call = tail call float @fabsf(float %x) #8
  %call3 = tail call float @expm1f(float %call) #8
  %add = fadd float %call3, 1.000000e+00
  %cmp4 = icmp ult i32 %and, 603979776
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %if.then2
  %mul7 = fmul float %call3, %call3
  %add8 = fadd float %add, %add
  %div = fdiv float %mul7, %add8
  %add9 = fadd float %div, 1.000000e+00
  br label %return

if.end10:                                         ; preds = %if.end
  %cmp11 = icmp ult i32 %and, 1102053376
  br i1 %cmp11, label %if.then12, label %if.end18

if.then12:                                        ; preds = %if.end10
  %call13 = tail call float @fabsf(float %x) #8
  %call14 = tail call float @expf(float %call13) #8
  %mul15 = fmul float %call14, 5.000000e-01
  %div16 = fdiv float 5.000000e-01, %call14
  %add17 = fadd float %mul15, %div16
  br label %return

if.end18:                                         ; preds = %if.end10
  %cmp19 = icmp ult i32 %and, 1118925336
  br i1 %cmp19, label %if.then20, label %if.end24

if.then20:                                        ; preds = %if.end18
  %call21 = tail call float @fabsf(float %x) #8
  %call22 = tail call float @expf(float %call21) #8
  %mul23 = fmul float %call22, 5.000000e-01
  br label %return

if.end24:                                         ; preds = %if.end18
  %cmp25 = icmp ult i32 %and, 1119016189
  br i1 %cmp25, label %if.then26, label %if.end32

if.then26:                                        ; preds = %if.end24
  %call27 = tail call float @fabsf(float %x) #8
  %mul28 = fmul float %call27, 5.000000e-01
  %call29 = tail call float @expf(float %mul28) #8
  %mul30 = fmul float %call29, 5.000000e-01
  %mul31 = fmul float %call29, %mul30
  br label %return

if.end32:                                         ; preds = %if.end24
  %call33 = tail call float @__math_oflowf(i32 0) #8
  br label %return

return:                                           ; preds = %if.end32, %if.then26, %if.then20, %if.then12, %if.end6, %if.then2, %if.then
  %retval.0 = phi float [ %add9, %if.end6 ], [ %add17, %if.then12 ], [ %mul23, %if.then20 ], [ %mul31, %if.then26 ], [ %call33, %if.end32 ], [ %mul, %if.then ], [ %add, %if.then2 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define float @__ieee754_fmodf(float %x, float %y) #3 {
entry:
  %0 = bitcast float %x to i32
  %1 = bitcast float %y to i32
  %and = and i32 %0, -2147483648
  %xor = xor i32 %and, %0
  %and6 = and i32 %1, 2147483647
  %notlhs = icmp eq i32 %and6, 0
  %notrhs = icmp sgt i32 %xor, 2139095039
  %or.cond.not = or i1 %notrhs, %notlhs
  %cmp9 = icmp ugt i32 %and6, 2139095040
  %or.cond102 = or i1 %or.cond.not, %cmp9
  br i1 %or.cond102, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mul = fmul float %x, %y
  %div = fdiv float %mul, %mul
  br label %return

if.end:                                           ; preds = %entry
  %cmp11 = icmp slt i32 %xor, %and6
  br i1 %cmp11, label %return, label %if.end13

if.end13:                                         ; preds = %if.end
  %cmp14 = icmp eq i32 %xor, %and6
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end13
  %shr = lshr i32 %0, 31
  %arrayidx = getelementptr inbounds [2 x float]* @Zero, i32 0, i32 %shr
  %2 = load float* %arrayidx, align 4, !tbaa !435
  br label %return

if.end16:                                         ; preds = %if.end13
  %cmp17 = icmp slt i32 %xor, 8388608
  br i1 %cmp17, label %if.then18, label %if.else

if.then18:                                        ; preds = %if.end16
  %shl = shl i32 %0, 8
  %cmp19184 = icmp sgt i32 %shl, 0
  br i1 %cmp19184, label %for.body.preheader, label %if.end23

for.body.preheader:                               ; preds = %if.then18
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.0186 = phi i32 [ %shl20, %for.body ], [ %shl, %for.body.preheader ]
  %ix.0185 = phi i32 [ %sub, %for.body ], [ -126, %for.body.preheader ]
  %sub = add nsw i32 %ix.0185, -1
  %shl20 = shl i32 %i.0186, 1
  %cmp19 = icmp sgt i32 %shl20, 0
  br i1 %cmp19, label %for.body, label %if.end23.loopexit

if.else:                                          ; preds = %if.end16
  %shr21 = ashr i32 %xor, 23
  %sub22 = add nsw i32 %shr21, -127
  br label %if.end23

if.end23.loopexit:                                ; preds = %for.body
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  br label %if.end23

if.end23:                                         ; preds = %if.end23.loopexit, %if.else, %if.then18
  %ix.1 = phi i32 [ %sub22, %if.else ], [ -126, %if.then18 ], [ %sub.lcssa, %if.end23.loopexit ]
  %cmp24 = icmp ult i32 %and6, 8388608
  br i1 %cmp24, label %if.then25, label %if.else34

if.then25:                                        ; preds = %if.end23
  %shl26 = shl i32 %1, 8
  %cmp28180 = icmp sgt i32 %shl26, -1
  br i1 %cmp28180, label %for.body29.preheader, label %if.end37

for.body29.preheader:                             ; preds = %if.then25
  br label %for.body29

for.body29:                                       ; preds = %for.body29, %for.body29.preheader
  %i.1182 = phi i32 [ %shl32, %for.body29 ], [ %shl26, %for.body29.preheader ]
  %iy.0181 = phi i32 [ %sub30, %for.body29 ], [ -126, %for.body29.preheader ]
  %sub30 = add nsw i32 %iy.0181, -1
  %shl32 = shl i32 %i.1182, 1
  %cmp28 = icmp sgt i32 %shl32, -1
  br i1 %cmp28, label %for.body29, label %if.end37.loopexit

if.else34:                                        ; preds = %if.end23
  %shr35165 = lshr i32 %and6, 23
  %sub36 = add nsw i32 %shr35165, -127
  br label %if.end37

if.end37.loopexit:                                ; preds = %for.body29
  %sub30.lcssa = phi i32 [ %sub30, %for.body29 ]
  br label %if.end37

if.end37:                                         ; preds = %if.end37.loopexit, %if.else34, %if.then25
  %iy.1 = phi i32 [ %sub36, %if.else34 ], [ -126, %if.then25 ], [ %sub30.lcssa, %if.end37.loopexit ]
  %cmp38 = icmp sgt i32 %ix.1, -127
  br i1 %cmp38, label %if.then39, label %if.else41

if.then39:                                        ; preds = %if.end37
  %and40 = and i32 %0, 8388607
  %or = or i32 %and40, 8388608
  br label %if.end44

if.else41:                                        ; preds = %if.end37
  %sub42 = sub nsw i32 -126, %ix.1
  %shl43 = shl i32 %xor, %sub42
  br label %if.end44

if.end44:                                         ; preds = %if.else41, %if.then39
  %hx.0 = phi i32 [ %or, %if.then39 ], [ %shl43, %if.else41 ]
  %cmp45 = icmp sgt i32 %iy.1, -127
  br i1 %cmp45, label %if.then46, label %if.else49

if.then46:                                        ; preds = %if.end44
  %and47 = and i32 %1, 8388607
  %or48 = or i32 %and47, 8388608
  br label %if.end52

if.else49:                                        ; preds = %if.end44
  %sub50 = sub nsw i32 -126, %iy.1
  %shl51 = shl i32 %and6, %sub50
  br label %if.end52

if.end52:                                         ; preds = %if.else49, %if.then46
  %hy.0 = phi i32 [ %or48, %if.then46 ], [ %shl51, %if.else49 ]
  %tobool173 = icmp eq i32 %ix.1, %iy.1
  %sub54174 = sub nsw i32 %hx.0, %hy.0
  br i1 %tobool173, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %if.end52
  %sub53 = sub nsw i32 %ix.1, %iy.1
  br label %while.body

while.body:                                       ; preds = %while.cond.backedge, %while.body.lr.ph
  %sub54177 = phi i32 [ %sub54174, %while.body.lr.ph ], [ %sub54, %while.cond.backedge ]
  %dec176.in = phi i32 [ %sub53, %while.body.lr.ph ], [ %dec176, %while.cond.backedge ]
  %hx.1175 = phi i32 [ %hx.0, %while.body.lr.ph ], [ %hx.1.be, %while.cond.backedge ]
  %dec176 = add nsw i32 %dec176.in, -1
  %cmp55 = icmp slt i32 %sub54177, 0
  br i1 %cmp55, label %while.cond.backedge, label %if.else57

if.else57:                                        ; preds = %while.body
  %cmp58 = icmp eq i32 %hx.1175, %hy.0
  br i1 %cmp58, label %if.then59, label %while.cond.backedge

if.then59:                                        ; preds = %if.else57
  %shr60 = lshr i32 %0, 31
  %arrayidx61 = getelementptr inbounds [2 x float]* @Zero, i32 0, i32 %shr60
  %3 = load float* %arrayidx61, align 4, !tbaa !435
  br label %return

while.cond.backedge:                              ; preds = %if.else57, %while.body
  %hx.1.be.in = phi i32 [ %hx.1175, %while.body ], [ %sub54177, %if.else57 ]
  %hx.1.be = shl nsw i32 %hx.1.be.in, 1
  %tobool = icmp eq i32 %dec176, 0
  %sub54 = sub nsw i32 %hx.1.be, %hy.0
  br i1 %tobool, label %while.end.loopexit, label %while.body

while.end.loopexit:                               ; preds = %while.cond.backedge
  %sub54.lcssa190 = phi i32 [ %sub54, %while.cond.backedge ]
  %hx.1.be.lcssa = phi i32 [ %hx.1.be, %while.cond.backedge ]
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.end52
  %sub54.lcssa = phi i32 [ %sub54174, %if.end52 ], [ %sub54.lcssa190, %while.end.loopexit ]
  %hx.1.lcssa = phi i32 [ %hx.0, %if.end52 ], [ %hx.1.be.lcssa, %while.end.loopexit ]
  %cmp66 = icmp sgt i32 %sub54.lcssa, -1
  %sub54.hx.1 = select i1 %cmp66, i32 %sub54.lcssa, i32 %hx.1.lcssa
  %cmp69 = icmp eq i32 %sub54.hx.1, 0
  br i1 %cmp69, label %if.then70, label %while.cond74.preheader

while.cond74.preheader:                           ; preds = %while.end
  %cmp75168 = icmp slt i32 %sub54.hx.1, 8388608
  br i1 %cmp75168, label %while.body76.preheader, label %while.end79

while.body76.preheader:                           ; preds = %while.cond74.preheader
  br label %while.body76

if.then70:                                        ; preds = %while.end
  %shr71 = lshr i32 %0, 31
  %arrayidx72 = getelementptr inbounds [2 x float]* @Zero, i32 0, i32 %shr71
  %4 = load float* %arrayidx72, align 4, !tbaa !435
  br label %return

while.body76:                                     ; preds = %while.body76, %while.body76.preheader
  %hx.3170 = phi i32 [ %add77, %while.body76 ], [ %sub54.hx.1, %while.body76.preheader ]
  %iy.2169 = phi i32 [ %sub78, %while.body76 ], [ %iy.1, %while.body76.preheader ]
  %add77 = shl nsw i32 %hx.3170, 1
  %sub78 = add nsw i32 %iy.2169, -1
  %cmp75 = icmp slt i32 %add77, 8388608
  br i1 %cmp75, label %while.body76, label %while.end79.loopexit

while.end79.loopexit:                             ; preds = %while.body76
  %sub78.lcssa = phi i32 [ %sub78, %while.body76 ]
  %add77.lcssa = phi i32 [ %add77, %while.body76 ]
  br label %while.end79

while.end79:                                      ; preds = %while.end79.loopexit, %while.cond74.preheader
  %hx.3.lcssa = phi i32 [ %sub54.hx.1, %while.cond74.preheader ], [ %add77.lcssa, %while.end79.loopexit ]
  %iy.2.lcssa = phi i32 [ %iy.1, %while.cond74.preheader ], [ %sub78.lcssa, %while.end79.loopexit ]
  %cmp80 = icmp sgt i32 %iy.2.lcssa, -127
  br i1 %cmp80, label %if.then81, label %if.else91

if.then81:                                        ; preds = %while.end79
  %sub82 = add nsw i32 %hx.3.lcssa, -8388608
  %add83 = shl i32 %iy.2.lcssa, 23
  %shl84 = add i32 %add83, 1065353216
  %or85 = or i32 %sub82, %shl84
  br label %if.end101

if.else91:                                        ; preds = %while.end79
  %sub92 = sub nsw i32 -126, %iy.2.lcssa
  %shr93 = ashr i32 %hx.3.lcssa, %sub92
  br label %if.end101

if.end101:                                        ; preds = %if.else91, %if.then81
  %or85.pn = phi i32 [ %or85, %if.then81 ], [ %shr93, %if.else91 ]
  %x.addr.0.in = or i32 %or85.pn, %and
  %x.addr.0 = bitcast i32 %x.addr.0.in to float
  br label %return

return:                                           ; preds = %if.end101, %if.then70, %if.then59, %if.then15, %if.end, %if.then
  %retval.0 = phi float [ %div, %if.then ], [ %2, %if.then15 ], [ %3, %if.then59 ], [ %4, %if.then70 ], [ %x.addr.0, %if.end101 ], [ %x, %if.end ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_hypotf(float %x, float %y) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %1 = bitcast float %y to i32
  %and6 = and i32 %1, 2147483647
  %cmp = icmp ugt i32 %and6, %and
  %and.and6 = select i1 %cmp, i32 %and, i32 %and6
  %and6.and = select i1 %cmp, i32 %and6, i32 %and
  %2 = bitcast i32 %and6.and to float
  %3 = bitcast i32 %and.and6 to float
  %sub = sub nsw i32 %and6.and, %and.and6
  %cmp16 = icmp sgt i32 %sub, 251658240
  br i1 %cmp16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %entry
  %add = fadd float %2, %3
  br label %return

if.end18:                                         ; preds = %entry
  %cmp19 = icmp ugt i32 %and6.and, 1484783616
  br i1 %cmp19, label %if.then20, label %if.end44

if.then20:                                        ; preds = %if.end18
  %cmp21 = icmp ult i32 %and6.and, 2139095040
  br i1 %cmp21, label %if.end30, label %if.then22

if.then22:                                        ; preds = %if.then20
  %add23 = fadd float %2, %3
  %cmp24 = icmp eq i32 %and6.and, 2139095040
  %.add23 = select i1 %cmp24, float %2, float %add23
  %cmp27 = icmp eq i32 %and.and6, 2139095040
  %w.1 = select i1 %cmp27, float %3, float %.add23
  br label %return

if.end30:                                         ; preds = %if.then20
  %sub31 = add nsw i32 %and6.and, -570425344
  %sub32 = add nsw i32 %and.and6, -570425344
  %4 = bitcast i32 %sub31 to float
  %5 = bitcast i32 %sub32 to float
  br label %if.end44

if.end44:                                         ; preds = %if.end30, %if.end18
  %hb.1 = phi i32 [ %sub32, %if.end30 ], [ %and.and6, %if.end18 ]
  %ha.1 = phi i32 [ %sub31, %if.end30 ], [ %and6.and, %if.end18 ]
  %k.0 = phi i32 [ 68, %if.end30 ], [ 0, %if.end18 ]
  %b.0 = phi float [ %5, %if.end30 ], [ %3, %if.end18 ]
  %a.0 = phi float [ %4, %if.end30 ], [ %2, %if.end18 ]
  %cmp45 = icmp slt i32 %hb.1, 645922816
  br i1 %cmp45, label %if.then46, label %if.end74

if.then46:                                        ; preds = %if.end44
  %cmp47 = icmp eq i32 %hb.1, 0
  br i1 %cmp47, label %return, label %if.else

if.else:                                          ; preds = %if.then46
  %cmp49 = icmp slt i32 %hb.1, 8388608
  br i1 %cmp49, label %do.body51, label %if.else58

do.body51:                                        ; preds = %if.else
  %mul = fmul float %b.0, 0x47D0000000000000
  %mul56 = fmul float %a.0, 0x47D0000000000000
  %sub57196 = or i32 %k.0, -126
  br label %if.end74

if.else58:                                        ; preds = %if.else
  %add59 = add nsw i32 %ha.1, 570425344
  %add60 = add nsw i32 %hb.1, 570425344
  %sub61 = add nsw i32 %k.0, -68
  %6 = bitcast i32 %add59 to float
  %7 = bitcast i32 %add60 to float
  br label %if.end74

if.end74:                                         ; preds = %if.else58, %do.body51, %if.end44
  %hb.2 = phi i32 [ %hb.1, %do.body51 ], [ %add60, %if.else58 ], [ %hb.1, %if.end44 ]
  %ha.2 = phi i32 [ %ha.1, %do.body51 ], [ %add59, %if.else58 ], [ %ha.1, %if.end44 ]
  %k.1 = phi i32 [ %sub57196, %do.body51 ], [ %sub61, %if.else58 ], [ %k.0, %if.end44 ]
  %b.1 = phi float [ %mul, %do.body51 ], [ %7, %if.else58 ], [ %b.0, %if.end44 ]
  %a.1 = phi float [ %mul56, %do.body51 ], [ %6, %if.else58 ], [ %a.0, %if.end44 ]
  %sub75 = fsub float %a.1, %b.1
  %cmp76 = fcmp ogt float %sub75, %b.1
  br i1 %cmp76, label %do.body78, label %if.else92

do.body78:                                        ; preds = %if.end74
  %and80 = and i32 %ha.2, -4096
  %8 = bitcast i32 %and80 to float
  %sub84 = fsub float %a.1, %8
  %mul85 = fmul float %8, %8
  %9 = fmul float %b.1, %b.1
  %mul87 = fsub float -0.000000e+00, %9
  %add88 = fadd float %8, %a.1
  %mul89 = fmul float %sub84, %add88
  %sub90 = fsub float %mul87, %mul89
  %sub91 = fsub float %mul85, %sub90
  %call = tail call float @__ieee754_sqrtf(float %sub91) #8
  br label %if.end118

if.else92:                                        ; preds = %if.end74
  %add93 = fadd float %a.1, %a.1
  %and96 = and i32 %hb.2, -4096
  %10 = bitcast i32 %and96 to float
  %sub100 = fsub float %b.1, %10
  %add103 = add nsw i32 %ha.2, 8388608
  %and104 = and i32 %add103, -4096
  %11 = bitcast i32 %and104 to float
  %sub108 = fsub float %add93, %11
  %mul109 = fmul float %10, %11
  %12 = fmul float %sub75, %sub75
  %mul111 = fsub float -0.000000e+00, %12
  %mul112 = fmul float %11, %sub100
  %mul113 = fmul float %b.1, %sub108
  %add114 = fadd float %mul112, %mul113
  %sub115 = fsub float %mul111, %add114
  %sub116 = fsub float %mul109, %sub115
  %call117 = tail call float @__ieee754_sqrtf(float %sub116) #8
  br label %if.end118

if.end118:                                        ; preds = %if.else92, %do.body78
  %w.2 = phi float [ %call, %do.body78 ], [ %call117, %if.else92 ]
  %cmp119 = icmp eq i32 %k.1, 0
  br i1 %cmp119, label %return, label %do.body121

do.body121:                                       ; preds = %if.end118
  %shl = shl nsw i32 %k.1, 23
  %add123 = add nsw i32 %shl, 1065353216
  %13 = bitcast i32 %add123 to float
  %mul127 = fmul float %13, %w.2
  br label %return

return:                                           ; preds = %do.body121, %if.end118, %if.then46, %if.then22, %if.then17
  %retval.0 = phi float [ %add, %if.then17 ], [ %mul127, %do.body121 ], [ %w.1, %if.then22 ], [ %a.0, %if.then46 ], [ %w.2, %if.end118 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_j0f(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %mul = fmul float %x, %x
  %div = fdiv float 1.000000e+00, %mul
  br label %return

if.end:                                           ; preds = %entry
  %call = tail call float @fabsf(float %x) #8
  %cmp1 = icmp ugt i32 %and, 1073741823
  br i1 %cmp1, label %if.then2, label %if.end32

if.then2:                                         ; preds = %if.end
  %call3 = tail call float @sinf(float %call) #8
  %call4 = tail call float @cosf(float %call) #8
  %sub = fsub float %call3, %call4
  %add = fadd float %call3, %call4
  %cmp5 = icmp ult i32 %and, 2130706432
  br i1 %cmp5, label %if.then6, label %if.then18

if.then6:                                         ; preds = %if.then2
  %add7 = fadd float %call, %call
  %call8 = tail call float @cosf(float %add7) #8
  %sub9 = fsub float -0.000000e+00, %call8
  %mul10 = fmul float %call3, %call4
  %cmp11 = fcmp olt float %mul10, 0.000000e+00
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.then6
  %div13 = fdiv float %sub9, %sub
  br label %if.end16

if.else:                                          ; preds = %if.then6
  %div14 = fdiv float %sub9, %add
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then12
  %cc.0 = phi float [ %div13, %if.then12 ], [ %add, %if.else ]
  %ss.0 = phi float [ %sub, %if.then12 ], [ %div14, %if.else ]
  %cmp17 = icmp ugt i32 %and, 1543503872
  br i1 %cmp17, label %if.then18, label %if.else22

if.then18:                                        ; preds = %if.end16, %if.then2
  %cc.0152 = phi float [ %cc.0, %if.end16 ], [ %add, %if.then2 ]
  %mul19 = fmul float %cc.0152, 0x3FE20DD760000000
  %call20 = tail call float @__ieee754_sqrtf(float %call) #8
  %div21 = fdiv float %mul19, %call20
  br label %return

if.else22:                                        ; preds = %if.end16
  %1 = bitcast float %call to i32
  %and.i = and i32 %1, 2147483647
  %cmp.i = icmp ugt i32 %and.i, 1090519039
  br i1 %cmp.i, label %pzerof.exit, label %if.else.i

if.else.i:                                        ; preds = %if.else22
  %cmp1.i = icmp ugt i32 %and.i, 1089936471
  br i1 %cmp1.i, label %pzerof.exit, label %if.else3.i

if.else3.i:                                       ; preds = %if.else.i
  %cmp4.i = icmp ugt i32 %and.i, 1077336935
  %..i = select i1 %cmp4.i, float* getelementptr inbounds ([5 x float]* @pS3, i32 0, i32 0), float* getelementptr inbounds ([5 x float]* @pS2, i32 0, i32 0)
  %.63.i = select i1 %cmp4.i, float* getelementptr inbounds ([6 x float]* @pR3, i32 0, i32 0), float* getelementptr inbounds ([6 x float]* @pR2, i32 0, i32 0)
  br label %pzerof.exit

pzerof.exit:                                      ; preds = %if.else3.i, %if.else.i, %if.else22
  %q.0.i = phi float* [ getelementptr inbounds ([5 x float]* @pS8, i32 0, i32 0), %if.else22 ], [ getelementptr inbounds ([5 x float]* @pS5, i32 0, i32 0), %if.else.i ], [ %..i, %if.else3.i ]
  %p.0.i = phi float* [ getelementptr inbounds ([6 x float]* @pR8, i32 0, i32 0), %if.else22 ], [ getelementptr inbounds ([6 x float]* @pR5, i32 0, i32 0), %if.else.i ], [ %.63.i, %if.else3.i ]
  %mul.i = fmul float %call, %call
  %div.i = fdiv float 1.000000e+00, %mul.i
  %2 = load float* %p.0.i, align 4, !tbaa !435
  %arrayidx9.i = getelementptr inbounds float* %p.0.i, i32 1
  %3 = load float* %arrayidx9.i, align 4, !tbaa !435
  %arrayidx10.i = getelementptr inbounds float* %p.0.i, i32 2
  %4 = load float* %arrayidx10.i, align 4, !tbaa !435
  %arrayidx11.i = getelementptr inbounds float* %p.0.i, i32 3
  %5 = load float* %arrayidx11.i, align 4, !tbaa !435
  %arrayidx12.i = getelementptr inbounds float* %p.0.i, i32 4
  %6 = load float* %arrayidx12.i, align 4, !tbaa !435
  %arrayidx13.i = getelementptr inbounds float* %p.0.i, i32 5
  %7 = load float* %arrayidx13.i, align 4, !tbaa !435
  %mul14.i = fmul float %div.i, %7
  %add.i = fadd float %6, %mul14.i
  %mul15.i = fmul float %div.i, %add.i
  %add16.i = fadd float %5, %mul15.i
  %mul17.i = fmul float %div.i, %add16.i
  %add18.i = fadd float %4, %mul17.i
  %mul19.i = fmul float %div.i, %add18.i
  %add20.i = fadd float %3, %mul19.i
  %mul21.i = fmul float %div.i, %add20.i
  %add22.i = fadd float %2, %mul21.i
  %8 = load float* %q.0.i, align 4, !tbaa !435
  %arrayidx24.i = getelementptr inbounds float* %q.0.i, i32 1
  %9 = load float* %arrayidx24.i, align 4, !tbaa !435
  %arrayidx25.i = getelementptr inbounds float* %q.0.i, i32 2
  %10 = load float* %arrayidx25.i, align 4, !tbaa !435
  %arrayidx26.i = getelementptr inbounds float* %q.0.i, i32 3
  %11 = load float* %arrayidx26.i, align 4, !tbaa !435
  %arrayidx27.i = getelementptr inbounds float* %q.0.i, i32 4
  %12 = load float* %arrayidx27.i, align 4, !tbaa !435
  %mul28.i = fmul float %div.i, %12
  %add29.i = fadd float %11, %mul28.i
  %mul30.i = fmul float %div.i, %add29.i
  %add31.i = fadd float %10, %mul30.i
  %mul32.i = fmul float %div.i, %add31.i
  %add33.i = fadd float %9, %mul32.i
  %mul34.i = fmul float %div.i, %add33.i
  %add35.i = fadd float %8, %mul34.i
  %mul36.i = fmul float %div.i, %add35.i
  %add37.i = fadd float %mul36.i, 1.000000e+00
  %div38.i = fdiv float %add22.i, %add37.i
  %add39.i = fadd float %div38.i, 1.000000e+00
  br i1 %cmp.i, label %qzerof.exit, label %if.else.i124

if.else.i124:                                     ; preds = %pzerof.exit
  %cmp1.i123 = icmp ugt i32 %and.i, 1089936471
  br i1 %cmp1.i123, label %qzerof.exit, label %if.else3.i127

if.else3.i127:                                    ; preds = %if.else.i124
  %cmp4.i125 = icmp ugt i32 %and.i, 1077336935
  %..i126 = select i1 %cmp4.i125, float* getelementptr inbounds ([6 x float]* @qS3, i32 0, i32 0), float* getelementptr inbounds ([6 x float]* @qS2, i32 0, i32 0)
  %.70.i = select i1 %cmp4.i125, float* getelementptr inbounds ([6 x float]* @qR3, i32 0, i32 0), float* getelementptr inbounds ([6 x float]* @qR2, i32 0, i32 0)
  br label %qzerof.exit

qzerof.exit:                                      ; preds = %if.else3.i127, %if.else.i124, %pzerof.exit
  %q.0.i128 = phi float* [ getelementptr inbounds ([6 x float]* @qS8, i32 0, i32 0), %pzerof.exit ], [ getelementptr inbounds ([6 x float]* @qS5, i32 0, i32 0), %if.else.i124 ], [ %..i126, %if.else3.i127 ]
  %p.0.i129 = phi float* [ getelementptr inbounds ([6 x float]* @qR8, i32 0, i32 0), %pzerof.exit ], [ getelementptr inbounds ([6 x float]* @qR5, i32 0, i32 0), %if.else.i124 ], [ %.70.i, %if.else3.i127 ]
  %13 = load float* %p.0.i129, align 4, !tbaa !435
  %arrayidx9.i132 = getelementptr inbounds float* %p.0.i129, i32 1
  %14 = load float* %arrayidx9.i132, align 4, !tbaa !435
  %arrayidx10.i133 = getelementptr inbounds float* %p.0.i129, i32 2
  %15 = load float* %arrayidx10.i133, align 4, !tbaa !435
  %arrayidx11.i134 = getelementptr inbounds float* %p.0.i129, i32 3
  %16 = load float* %arrayidx11.i134, align 4, !tbaa !435
  %arrayidx12.i135 = getelementptr inbounds float* %p.0.i129, i32 4
  %17 = load float* %arrayidx12.i135, align 4, !tbaa !435
  %arrayidx13.i136 = getelementptr inbounds float* %p.0.i129, i32 5
  %18 = load float* %arrayidx13.i136, align 4, !tbaa !435
  %mul14.i137 = fmul float %div.i, %18
  %add.i138 = fadd float %17, %mul14.i137
  %mul15.i139 = fmul float %div.i, %add.i138
  %add16.i140 = fadd float %16, %mul15.i139
  %mul17.i141 = fmul float %div.i, %add16.i140
  %add18.i142 = fadd float %15, %mul17.i141
  %mul19.i143 = fmul float %div.i, %add18.i142
  %add20.i144 = fadd float %14, %mul19.i143
  %mul21.i145 = fmul float %div.i, %add20.i144
  %add22.i146 = fadd float %13, %mul21.i145
  %19 = load float* %q.0.i128, align 4, !tbaa !435
  %arrayidx24.i147 = getelementptr inbounds float* %q.0.i128, i32 1
  %20 = load float* %arrayidx24.i147, align 4, !tbaa !435
  %arrayidx25.i148 = getelementptr inbounds float* %q.0.i128, i32 2
  %21 = load float* %arrayidx25.i148, align 4, !tbaa !435
  %arrayidx26.i149 = getelementptr inbounds float* %q.0.i128, i32 3
  %22 = load float* %arrayidx26.i149, align 4, !tbaa !435
  %arrayidx27.i150 = getelementptr inbounds float* %q.0.i128, i32 4
  %23 = load float* %arrayidx27.i150, align 4, !tbaa !435
  %arrayidx28.i = getelementptr inbounds float* %q.0.i128, i32 5
  %24 = load float* %arrayidx28.i, align 4, !tbaa !435
  %mul29.i = fmul float %div.i, %24
  %add30.i = fadd float %23, %mul29.i
  %mul31.i = fmul float %div.i, %add30.i
  %add32.i = fadd float %22, %mul31.i
  %mul33.i = fmul float %div.i, %add32.i
  %add34.i = fadd float %21, %mul33.i
  %mul35.i = fmul float %div.i, %add34.i
  %add36.i = fadd float %20, %mul35.i
  %mul37.i = fmul float %div.i, %add36.i
  %add38.i = fadd float %19, %mul37.i
  %mul39.i = fmul float %div.i, %add38.i
  %add40.i = fadd float %mul39.i, 1.000000e+00
  %div41.i = fdiv float %add22.i146, %add40.i
  %add42.i = fadd float %div41.i, -1.250000e-01
  %div43.i = fdiv float %add42.i, %call
  %mul25 = fmul float %cc.0, %add39.i
  %mul26 = fmul float %ss.0, %div43.i
  %sub27 = fsub float %mul25, %mul26
  %mul28 = fmul float %sub27, 0x3FE20DD760000000
  %call29 = tail call float @__ieee754_sqrtf(float %call) #8
  %div30 = fdiv float %mul28, %call29
  br label %return

if.end32:                                         ; preds = %if.end
  %cmp33 = icmp ult i32 %and, 956301312
  %add35 = fadd float %call, 0x46293E5940000000
  %cmp36 = fcmp ogt float %add35, 1.000000e+00
  %or.cond = and i1 %cmp33, %cmp36
  br i1 %or.cond, label %if.then37, label %if.end45

if.then37:                                        ; preds = %if.end32
  %cmp38 = icmp ult i32 %and, 838860800
  br i1 %cmp38, label %return, label %if.else40

if.else40:                                        ; preds = %if.then37
  %mul41 = fmul float %call, 2.500000e-01
  %mul42 = fmul float %call, %mul41
  %sub43 = fsub float 1.000000e+00, %mul42
  br label %return

if.end45:                                         ; preds = %if.end32
  %mul46 = fmul float %call, %call
  %mul47 = fmul float %mul46, 0xBE33D5E780000000
  %add48 = fadd float %mul47, 0x3EBEB1D100000000
  %mul49 = fmul float %mul46, %add48
  %add50 = fadd float %mul49, 0xBF28E6A5C0000000
  %mul51 = fmul float %mul46, %add50
  %add52 = fadd float %mul51, 1.562500e-02
  %mul53 = fmul float %mul46, %add52
  %mul54 = fmul float %mul46, 0x3E1408BD00000000
  %add55 = fadd float %mul54, 0x3EA13B54C0000000
  %mul56 = fmul float %mul46, %add55
  %add57 = fadd float %mul56, 0x3F1EA6D2E0000000
  %mul58 = fmul float %mul46, %add57
  %add59 = fadd float %mul58, 0x3F8FFCE880000000
  %mul60 = fmul float %mul46, %add59
  %add61 = fadd float %mul60, 1.000000e+00
  %cmp62 = icmp ult i32 %and, 1065353216
  br i1 %cmp62, label %if.then63, label %if.else68

if.then63:                                        ; preds = %if.end45
  %div64 = fdiv float %mul53, %add61
  %add65 = fadd float %div64, -2.500000e-01
  %mul66 = fmul float %mul46, %add65
  %add67 = fadd float %mul66, 1.000000e+00
  br label %return

if.else68:                                        ; preds = %if.end45
  %mul69 = fmul float %call, 5.000000e-01
  %add70 = fadd float %mul69, 1.000000e+00
  %sub71 = fsub float 1.000000e+00, %mul69
  %mul72 = fmul float %add70, %sub71
  %div73 = fdiv float %mul53, %add61
  %mul74 = fmul float %mul46, %div73
  %add75 = fadd float %mul72, %mul74
  br label %return

return:                                           ; preds = %if.else68, %if.then63, %if.else40, %if.then37, %qzerof.exit, %if.then18, %if.then
  %retval.0 = phi float [ %sub43, %if.else40 ], [ %add67, %if.then63 ], [ %add75, %if.else68 ], [ %div, %if.then ], [ %div21, %if.then18 ], [ %div30, %qzerof.exit ], [ 1.000000e+00, %if.then37 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_y0f(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %mul = fmul float %x, %x
  %add = fadd float %mul, %x
  %div = fdiv float 1.000000e+00, %add
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %return, label %if.end3

if.end3:                                          ; preds = %if.end
  %cmp4 = icmp slt i32 %0, 0
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %if.end3
  %cmp7 = icmp ugt i32 %and, 1073741823
  br i1 %cmp7, label %if.then8, label %if.end38

if.then8:                                         ; preds = %if.end6
  %call = tail call float @sinf(float %x) #8
  %call9 = tail call float @cosf(float %x) #8
  %sub = fsub float %call, %call9
  %add10 = fadd float %call, %call9
  %cmp11 = icmp ult i32 %and, 2130706432
  br i1 %cmp11, label %if.then12, label %if.then24

if.then12:                                        ; preds = %if.then8
  %add13 = fadd float %x, %x
  %call14 = tail call float @cosf(float %add13) #8
  %sub15 = fsub float -0.000000e+00, %call14
  %mul16 = fmul float %call, %call9
  %cmp17 = fcmp olt float %mul16, 0.000000e+00
  br i1 %cmp17, label %if.then18, label %if.else

if.then18:                                        ; preds = %if.then12
  %div19 = fdiv float %sub15, %sub
  br label %if.end22

if.else:                                          ; preds = %if.then12
  %div20 = fdiv float %sub15, %add10
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then18
  %cc.0 = phi float [ %div19, %if.then18 ], [ %add10, %if.else ]
  %ss.0 = phi float [ %sub, %if.then18 ], [ %div20, %if.else ]
  %cmp23 = icmp ugt i32 %and, 1543503872
  br i1 %cmp23, label %if.then24, label %if.else28

if.then24:                                        ; preds = %if.end22, %if.then8
  %ss.0144 = phi float [ %ss.0, %if.end22 ], [ %sub, %if.then8 ]
  %mul25 = fmul float %ss.0144, 0x3FE20DD760000000
  %call26 = tail call float @__ieee754_sqrtf(float %x) #8
  %div27 = fdiv float %mul25, %call26
  br label %return

if.else28:                                        ; preds = %if.end22
  %cmp.i = icmp ugt i32 %and, 1090519039
  br i1 %cmp.i, label %pzerof.exit, label %if.else.i

if.else.i:                                        ; preds = %if.else28
  %cmp1.i = icmp ugt i32 %and, 1089936471
  br i1 %cmp1.i, label %pzerof.exit, label %if.else3.i

if.else3.i:                                       ; preds = %if.else.i
  %cmp4.i = icmp ugt i32 %and, 1077336935
  %..i = select i1 %cmp4.i, float* getelementptr inbounds ([5 x float]* @pS3, i32 0, i32 0), float* getelementptr inbounds ([5 x float]* @pS2, i32 0, i32 0)
  %.63.i = select i1 %cmp4.i, float* getelementptr inbounds ([6 x float]* @pR3, i32 0, i32 0), float* getelementptr inbounds ([6 x float]* @pR2, i32 0, i32 0)
  br label %pzerof.exit

pzerof.exit:                                      ; preds = %if.else3.i, %if.else.i, %if.else28
  %q.0.i = phi float* [ getelementptr inbounds ([5 x float]* @pS8, i32 0, i32 0), %if.else28 ], [ getelementptr inbounds ([5 x float]* @pS5, i32 0, i32 0), %if.else.i ], [ %..i, %if.else3.i ]
  %p.0.i = phi float* [ getelementptr inbounds ([6 x float]* @pR8, i32 0, i32 0), %if.else28 ], [ getelementptr inbounds ([6 x float]* @pR5, i32 0, i32 0), %if.else.i ], [ %.63.i, %if.else3.i ]
  %mul.i = fmul float %x, %x
  %div.i = fdiv float 1.000000e+00, %mul.i
  %1 = load float* %p.0.i, align 4, !tbaa !435
  %arrayidx9.i = getelementptr inbounds float* %p.0.i, i32 1
  %2 = load float* %arrayidx9.i, align 4, !tbaa !435
  %arrayidx10.i = getelementptr inbounds float* %p.0.i, i32 2
  %3 = load float* %arrayidx10.i, align 4, !tbaa !435
  %arrayidx11.i = getelementptr inbounds float* %p.0.i, i32 3
  %4 = load float* %arrayidx11.i, align 4, !tbaa !435
  %arrayidx12.i = getelementptr inbounds float* %p.0.i, i32 4
  %5 = load float* %arrayidx12.i, align 4, !tbaa !435
  %arrayidx13.i = getelementptr inbounds float* %p.0.i, i32 5
  %6 = load float* %arrayidx13.i, align 4, !tbaa !435
  %mul14.i = fmul float %div.i, %6
  %add.i = fadd float %5, %mul14.i
  %mul15.i = fmul float %div.i, %add.i
  %add16.i = fadd float %4, %mul15.i
  %mul17.i = fmul float %div.i, %add16.i
  %add18.i = fadd float %3, %mul17.i
  %mul19.i = fmul float %div.i, %add18.i
  %add20.i = fadd float %2, %mul19.i
  %mul21.i = fmul float %div.i, %add20.i
  %add22.i = fadd float %1, %mul21.i
  %7 = load float* %q.0.i, align 4, !tbaa !435
  %arrayidx24.i = getelementptr inbounds float* %q.0.i, i32 1
  %8 = load float* %arrayidx24.i, align 4, !tbaa !435
  %arrayidx25.i = getelementptr inbounds float* %q.0.i, i32 2
  %9 = load float* %arrayidx25.i, align 4, !tbaa !435
  %arrayidx26.i = getelementptr inbounds float* %q.0.i, i32 3
  %10 = load float* %arrayidx26.i, align 4, !tbaa !435
  %arrayidx27.i = getelementptr inbounds float* %q.0.i, i32 4
  %11 = load float* %arrayidx27.i, align 4, !tbaa !435
  %mul28.i = fmul float %div.i, %11
  %add29.i = fadd float %10, %mul28.i
  %mul30.i = fmul float %div.i, %add29.i
  %add31.i = fadd float %9, %mul30.i
  %mul32.i = fmul float %div.i, %add31.i
  %add33.i = fadd float %8, %mul32.i
  %mul34.i = fmul float %div.i, %add33.i
  %add35.i = fadd float %7, %mul34.i
  %mul36.i = fmul float %div.i, %add35.i
  %add37.i = fadd float %mul36.i, 1.000000e+00
  %div38.i = fdiv float %add22.i, %add37.i
  %add39.i = fadd float %div38.i, 1.000000e+00
  br i1 %cmp.i, label %qzerof.exit, label %if.else.i116

if.else.i116:                                     ; preds = %pzerof.exit
  %cmp1.i115 = icmp ugt i32 %and, 1089936471
  br i1 %cmp1.i115, label %qzerof.exit, label %if.else3.i119

if.else3.i119:                                    ; preds = %if.else.i116
  %cmp4.i117 = icmp ugt i32 %and, 1077336935
  %..i118 = select i1 %cmp4.i117, float* getelementptr inbounds ([6 x float]* @qS3, i32 0, i32 0), float* getelementptr inbounds ([6 x float]* @qS2, i32 0, i32 0)
  %.70.i = select i1 %cmp4.i117, float* getelementptr inbounds ([6 x float]* @qR3, i32 0, i32 0), float* getelementptr inbounds ([6 x float]* @qR2, i32 0, i32 0)
  br label %qzerof.exit

qzerof.exit:                                      ; preds = %if.else3.i119, %if.else.i116, %pzerof.exit
  %q.0.i120 = phi float* [ getelementptr inbounds ([6 x float]* @qS8, i32 0, i32 0), %pzerof.exit ], [ getelementptr inbounds ([6 x float]* @qS5, i32 0, i32 0), %if.else.i116 ], [ %..i118, %if.else3.i119 ]
  %p.0.i121 = phi float* [ getelementptr inbounds ([6 x float]* @qR8, i32 0, i32 0), %pzerof.exit ], [ getelementptr inbounds ([6 x float]* @qR5, i32 0, i32 0), %if.else.i116 ], [ %.70.i, %if.else3.i119 ]
  %12 = load float* %p.0.i121, align 4, !tbaa !435
  %arrayidx9.i124 = getelementptr inbounds float* %p.0.i121, i32 1
  %13 = load float* %arrayidx9.i124, align 4, !tbaa !435
  %arrayidx10.i125 = getelementptr inbounds float* %p.0.i121, i32 2
  %14 = load float* %arrayidx10.i125, align 4, !tbaa !435
  %arrayidx11.i126 = getelementptr inbounds float* %p.0.i121, i32 3
  %15 = load float* %arrayidx11.i126, align 4, !tbaa !435
  %arrayidx12.i127 = getelementptr inbounds float* %p.0.i121, i32 4
  %16 = load float* %arrayidx12.i127, align 4, !tbaa !435
  %arrayidx13.i128 = getelementptr inbounds float* %p.0.i121, i32 5
  %17 = load float* %arrayidx13.i128, align 4, !tbaa !435
  %mul14.i129 = fmul float %div.i, %17
  %add.i130 = fadd float %16, %mul14.i129
  %mul15.i131 = fmul float %div.i, %add.i130
  %add16.i132 = fadd float %15, %mul15.i131
  %mul17.i133 = fmul float %div.i, %add16.i132
  %add18.i134 = fadd float %14, %mul17.i133
  %mul19.i135 = fmul float %div.i, %add18.i134
  %add20.i136 = fadd float %13, %mul19.i135
  %mul21.i137 = fmul float %div.i, %add20.i136
  %add22.i138 = fadd float %12, %mul21.i137
  %18 = load float* %q.0.i120, align 4, !tbaa !435
  %arrayidx24.i139 = getelementptr inbounds float* %q.0.i120, i32 1
  %19 = load float* %arrayidx24.i139, align 4, !tbaa !435
  %arrayidx25.i140 = getelementptr inbounds float* %q.0.i120, i32 2
  %20 = load float* %arrayidx25.i140, align 4, !tbaa !435
  %arrayidx26.i141 = getelementptr inbounds float* %q.0.i120, i32 3
  %21 = load float* %arrayidx26.i141, align 4, !tbaa !435
  %arrayidx27.i142 = getelementptr inbounds float* %q.0.i120, i32 4
  %22 = load float* %arrayidx27.i142, align 4, !tbaa !435
  %arrayidx28.i = getelementptr inbounds float* %q.0.i120, i32 5
  %23 = load float* %arrayidx28.i, align 4, !tbaa !435
  %mul29.i = fmul float %div.i, %23
  %add30.i = fadd float %22, %mul29.i
  %mul31.i = fmul float %div.i, %add30.i
  %add32.i = fadd float %21, %mul31.i
  %mul33.i = fmul float %div.i, %add32.i
  %add34.i = fadd float %20, %mul33.i
  %mul35.i = fmul float %div.i, %add34.i
  %add36.i = fadd float %19, %mul35.i
  %mul37.i = fmul float %div.i, %add36.i
  %add38.i = fadd float %18, %mul37.i
  %mul39.i = fmul float %div.i, %add38.i
  %add40.i = fadd float %mul39.i, 1.000000e+00
  %div41.i = fdiv float %add22.i138, %add40.i
  %add42.i = fadd float %div41.i, -1.250000e-01
  %div43.i = fdiv float %add42.i, %x
  %mul31 = fmul float %ss.0, %add39.i
  %mul32 = fmul float %cc.0, %div43.i
  %add33 = fadd float %mul31, %mul32
  %mul34 = fmul float %add33, 0x3FE20DD760000000
  %call35 = tail call float @__ieee754_sqrtf(float %x) #8
  %div36 = fdiv float %mul34, %call35
  br label %return

if.end38:                                         ; preds = %if.end6
  %cmp39 = icmp ult i32 %and, 964689921
  br i1 %cmp39, label %if.then40, label %if.end44

if.then40:                                        ; preds = %if.end38
  %call41 = tail call float @logf(float %x) #8
  %mul42 = fmul float %call41, 0x3FE45F3060000000
  %add43 = fadd float %mul42, 0xBFB2E4D6A0000000
  br label %return

if.end44:                                         ; preds = %if.end38
  %mul45 = fmul float %x, %x
  %mul46 = fmul float %mul45, 0xBDC5E43D60000000
  %add47 = fadd float %mul46, 0x3E55005740000000
  %mul48 = fmul float %mul45, %add47
  %add49 = fadd float %mul48, 0xBECFFEA780000000
  %mul50 = fmul float %mul45, %add49
  %add51 = fadd float %mul50, 0x3F36C54D20000000
  %mul52 = fmul float %mul45, %add51
  %add53 = fadd float %mul52, 0xBF8C4CE8C0000000
  %mul54 = fmul float %mul45, %add53
  %add55 = fadd float %mul54, 0x3FC69D01A0000000
  %mul56 = fmul float %mul45, %add55
  %add57 = fadd float %mul56, 0xBFB2E4D6A0000000
  %mul58 = fmul float %mul45, 0x3DFE501840000000
  %add59 = fadd float %mul58, 0x3E91642D80000000
  %mul60 = fmul float %mul45, %add59
  %add61 = fadd float %mul60, 0x3F13ECBC00000000
  %mul62 = fmul float %mul45, %add61
  %add63 = fadd float %mul62, 0x3F8A1270A0000000
  %mul64 = fmul float %mul45, %add63
  %add65 = fadd float %mul64, 1.000000e+00
  %div66 = fdiv float %add57, %add65
  %call67 = tail call float @__ieee754_j0f(float %x) #9
  %call68 = tail call float @logf(float %x) #8
  %mul69 = fmul float %call67, %call68
  %mul70 = fmul float %mul69, 0x3FE45F3060000000
  %add71 = fadd float %div66, %mul70
  br label %return

return:                                           ; preds = %if.end44, %if.then40, %qzerof.exit, %if.then24, %if.end3, %if.end, %if.then
  %retval.0 = phi float [ %add43, %if.then40 ], [ %add71, %if.end44 ], [ %div, %if.then ], [ 0xFFF0000000000000, %if.end ], [ 0x7FF8000000000000, %if.end3 ], [ %div27, %if.then24 ], [ %div36, %qzerof.exit ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_j1f(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %div = fdiv float 1.000000e+00, %x
  br label %return

if.end:                                           ; preds = %entry
  %call = tail call float @fabsf(float %x) #8
  %cmp1 = icmp ugt i32 %and, 1073741823
  br i1 %cmp1, label %if.then2, label %if.end35

if.then2:                                         ; preds = %if.end
  %call3 = tail call float @sinf(float %call) #8
  %call4 = tail call float @cosf(float %call) #8
  %sub = fsub float -0.000000e+00, %call3
  %sub5 = fsub float %sub, %call4
  %sub6 = fsub float %call3, %call4
  %cmp7 = icmp ult i32 %and, 2130706432
  br i1 %cmp7, label %if.then8, label %if.then17

if.then8:                                         ; preds = %if.then2
  %add = fadd float %call, %call
  %call9 = tail call float @cosf(float %add) #8
  %mul = fmul float %call3, %call4
  %cmp10 = fcmp ogt float %mul, 0.000000e+00
  br i1 %cmp10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.then8
  %div12 = fdiv float %call9, %sub5
  br label %if.end15

if.else:                                          ; preds = %if.then8
  %div13 = fdiv float %call9, %sub6
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then11
  %cc.0 = phi float [ %div12, %if.then11 ], [ %sub6, %if.else ]
  %ss.0 = phi float [ %sub5, %if.then11 ], [ %div13, %if.else ]
  %cmp16 = icmp ugt i32 %and, 1543503872
  br i1 %cmp16, label %if.then17, label %if.else21

if.then17:                                        ; preds = %if.end15, %if.then2
  %cc.0130 = phi float [ %cc.0, %if.end15 ], [ %sub6, %if.then2 ]
  %mul18 = fmul float %cc.0130, 0x3FE20DD760000000
  %call19 = tail call float @__ieee754_sqrtf(float %call) #8
  %div20 = fdiv float %mul18, %call19
  br label %if.end30

if.else21:                                        ; preds = %if.end15
  %1 = bitcast float %call to i32
  %and.i = and i32 %1, 2147483647
  %cmp.i = icmp ugt i32 %and.i, 1090519039
  br i1 %cmp.i, label %ponef.exit, label %if.else.i

if.else.i:                                        ; preds = %if.else21
  %cmp1.i = icmp ugt i32 %and.i, 1089936471
  br i1 %cmp1.i, label %ponef.exit, label %if.else3.i

if.else3.i:                                       ; preds = %if.else.i
  %cmp4.i = icmp ugt i32 %and.i, 1077336935
  %..i = select i1 %cmp4.i, float* getelementptr inbounds ([5 x float]* @ps3, i32 0, i32 0), float* getelementptr inbounds ([5 x float]* @ps2, i32 0, i32 0)
  %.63.i = select i1 %cmp4.i, float* getelementptr inbounds ([6 x float]* @pr3, i32 0, i32 0), float* getelementptr inbounds ([6 x float]* @pr2, i32 0, i32 0)
  br label %ponef.exit

ponef.exit:                                       ; preds = %if.else3.i, %if.else.i, %if.else21
  %q.0.i = phi float* [ getelementptr inbounds ([5 x float]* @ps8, i32 0, i32 0), %if.else21 ], [ getelementptr inbounds ([5 x float]* @ps5, i32 0, i32 0), %if.else.i ], [ %..i, %if.else3.i ]
  %p.0.i = phi float* [ getelementptr inbounds ([6 x float]* @pr8, i32 0, i32 0), %if.else21 ], [ getelementptr inbounds ([6 x float]* @pr5, i32 0, i32 0), %if.else.i ], [ %.63.i, %if.else3.i ]
  %mul.i = fmul float %call, %call
  %div.i = fdiv float 1.000000e+00, %mul.i
  %2 = load float* %p.0.i, align 4, !tbaa !435
  %arrayidx9.i = getelementptr inbounds float* %p.0.i, i32 1
  %3 = load float* %arrayidx9.i, align 4, !tbaa !435
  %arrayidx10.i = getelementptr inbounds float* %p.0.i, i32 2
  %4 = load float* %arrayidx10.i, align 4, !tbaa !435
  %arrayidx11.i = getelementptr inbounds float* %p.0.i, i32 3
  %5 = load float* %arrayidx11.i, align 4, !tbaa !435
  %arrayidx12.i = getelementptr inbounds float* %p.0.i, i32 4
  %6 = load float* %arrayidx12.i, align 4, !tbaa !435
  %arrayidx13.i = getelementptr inbounds float* %p.0.i, i32 5
  %7 = load float* %arrayidx13.i, align 4, !tbaa !435
  %mul14.i = fmul float %div.i, %7
  %add.i = fadd float %6, %mul14.i
  %mul15.i = fmul float %div.i, %add.i
  %add16.i = fadd float %5, %mul15.i
  %mul17.i = fmul float %div.i, %add16.i
  %add18.i = fadd float %4, %mul17.i
  %mul19.i = fmul float %div.i, %add18.i
  %add20.i = fadd float %3, %mul19.i
  %mul21.i = fmul float %div.i, %add20.i
  %add22.i = fadd float %2, %mul21.i
  %8 = load float* %q.0.i, align 4, !tbaa !435
  %arrayidx24.i = getelementptr inbounds float* %q.0.i, i32 1
  %9 = load float* %arrayidx24.i, align 4, !tbaa !435
  %arrayidx25.i = getelementptr inbounds float* %q.0.i, i32 2
  %10 = load float* %arrayidx25.i, align 4, !tbaa !435
  %arrayidx26.i = getelementptr inbounds float* %q.0.i, i32 3
  %11 = load float* %arrayidx26.i, align 4, !tbaa !435
  %arrayidx27.i = getelementptr inbounds float* %q.0.i, i32 4
  %12 = load float* %arrayidx27.i, align 4, !tbaa !435
  %mul28.i = fmul float %div.i, %12
  %add29.i = fadd float %11, %mul28.i
  %mul30.i = fmul float %div.i, %add29.i
  %add31.i = fadd float %10, %mul30.i
  %mul32.i = fmul float %div.i, %add31.i
  %add33.i = fadd float %9, %mul32.i
  %mul34.i = fmul float %div.i, %add33.i
  %add35.i = fadd float %8, %mul34.i
  %mul36.i = fmul float %div.i, %add35.i
  %add37.i = fadd float %mul36.i, 1.000000e+00
  %div38.i = fdiv float %add22.i, %add37.i
  %add39.i = fadd float %div38.i, 1.000000e+00
  %and.i104 = and i32 %1, 2145386496
  %cmp.i105 = icmp ugt i32 %and.i104, 1075838975
  %q.0.i106 = select i1 %cmp.i105, float* getelementptr inbounds ([6 x float]* @qs8, i32 0, i32 0), float* getelementptr inbounds ([6 x float]* @qs2, i32 0, i32 0)
  %p.0.i107 = select i1 %cmp.i105, float* getelementptr inbounds ([6 x float]* @qr8, i32 0, i32 0), float* getelementptr inbounds ([6 x float]* @qr2, i32 0, i32 0)
  %13 = load float* %p.0.i107, align 4, !tbaa !435
  %arrayidx9.i110 = getelementptr inbounds float* %p.0.i107, i32 1
  %14 = load float* %arrayidx9.i110, align 4, !tbaa !435
  %arrayidx10.i111 = getelementptr inbounds float* %p.0.i107, i32 2
  %15 = load float* %arrayidx10.i111, align 4, !tbaa !435
  %arrayidx11.i112 = getelementptr inbounds float* %p.0.i107, i32 3
  %16 = load float* %arrayidx11.i112, align 4, !tbaa !435
  %arrayidx12.i113 = getelementptr inbounds float* %p.0.i107, i32 4
  %17 = load float* %arrayidx12.i113, align 4, !tbaa !435
  %arrayidx13.i114 = getelementptr inbounds float* %p.0.i107, i32 5
  %18 = load float* %arrayidx13.i114, align 4, !tbaa !435
  %mul14.i115 = fmul float %div.i, %18
  %add.i116 = fadd float %17, %mul14.i115
  %mul15.i117 = fmul float %div.i, %add.i116
  %add16.i118 = fadd float %16, %mul15.i117
  %mul17.i119 = fmul float %div.i, %add16.i118
  %add18.i120 = fadd float %15, %mul17.i119
  %mul19.i121 = fmul float %div.i, %add18.i120
  %add20.i122 = fadd float %14, %mul19.i121
  %mul21.i123 = fmul float %div.i, %add20.i122
  %add22.i124 = fadd float %13, %mul21.i123
  %19 = load float* %q.0.i106, align 4, !tbaa !435
  %arrayidx24.i125 = getelementptr inbounds float* %q.0.i106, i32 1
  %20 = load float* %arrayidx24.i125, align 4, !tbaa !435
  %arrayidx25.i126 = getelementptr inbounds float* %q.0.i106, i32 2
  %21 = load float* %arrayidx25.i126, align 4, !tbaa !435
  %arrayidx26.i127 = getelementptr inbounds float* %q.0.i106, i32 3
  %22 = load float* %arrayidx26.i127, align 4, !tbaa !435
  %arrayidx27.i128 = getelementptr inbounds float* %q.0.i106, i32 4
  %23 = load float* %arrayidx27.i128, align 4, !tbaa !435
  %arrayidx28.i = getelementptr inbounds float* %q.0.i106, i32 5
  %24 = load float* %arrayidx28.i, align 4, !tbaa !435
  %mul29.i = fmul float %div.i, %24
  %add30.i = fadd float %23, %mul29.i
  %mul31.i = fmul float %div.i, %add30.i
  %add32.i = fadd float %22, %mul31.i
  %mul33.i = fmul float %div.i, %add32.i
  %add34.i = fadd float %21, %mul33.i
  %mul35.i = fmul float %div.i, %add34.i
  %add36.i = fadd float %20, %mul35.i
  %mul37.i = fmul float %div.i, %add36.i
  %add38.i = fadd float %19, %mul37.i
  %mul39.i = fmul float %div.i, %add38.i
  %add40.i = fadd float %mul39.i, 1.000000e+00
  %div41.i = fdiv float %add22.i124, %add40.i
  %add42.i = fadd float %div41.i, 3.750000e-01
  %div43.i = fdiv float %add42.i, %call
  %mul24 = fmul float %cc.0, %add39.i
  %mul25 = fmul float %ss.0, %div43.i
  %sub26 = fsub float %mul24, %mul25
  %mul27 = fmul float %sub26, 0x3FE20DD760000000
  %call28 = tail call float @__ieee754_sqrtf(float %call) #8
  %div29 = fdiv float %mul27, %call28
  br label %if.end30

if.end30:                                         ; preds = %ponef.exit, %if.then17
  %z.0 = phi float [ %div20, %if.then17 ], [ %div29, %ponef.exit ]
  %cmp31 = icmp slt i32 %0, 0
  br i1 %cmp31, label %if.then32, label %return

if.then32:                                        ; preds = %if.end30
  %sub33 = fsub float -0.000000e+00, %z.0
  br label %return

if.end35:                                         ; preds = %if.end
  %cmp36 = icmp ult i32 %and, 838860800
  %add38 = fadd float %x, 0x46293E5940000000
  %cmp39 = fcmp ogt float %add38, 1.000000e+00
  %or.cond = and i1 %cmp36, %cmp39
  br i1 %or.cond, label %if.then40, label %if.end43

if.then40:                                        ; preds = %if.end35
  %mul41 = fmul float %x, 5.000000e-01
  br label %return

if.end43:                                         ; preds = %if.end35
  %mul44 = fmul float %x, %x
  %mul45 = fmul float %mul44, 0x3E6AAAFA40000000
  %add46 = fadd float %mul45, 0xBEF0C5C6C0000000
  %mul47 = fmul float %mul44, %add46
  %add48 = fadd float %mul47, 0x3F570D9FA0000000
  %mul49 = fmul float %mul44, %add48
  %add50 = fadd float %mul49, -6.250000e-02
  %mul51 = fmul float %mul44, %add50
  %mul52 = fmul float %mul44, 0x3DAB2ACFC0000000
  %add53 = fadd float %mul52, 0x3E35AC88C0000000
  %mul54 = fmul float %mul44, %add53
  %add55 = fadd float %mul54, 0x3EB3BFF840000000
  %mul56 = fmul float %mul44, %add55
  %add57 = fadd float %mul56, 0x3F285F56C0000000
  %mul58 = fmul float %mul44, %add57
  %add59 = fadd float %mul58, 0x3F939D0B20000000
  %mul60 = fmul float %mul44, %add59
  %add61 = fadd float %mul60, 1.000000e+00
  %mul62 = fmul float %mul51, %x
  %mul63 = fmul float %x, 5.000000e-01
  %div64 = fdiv float %mul62, %add61
  %add65 = fadd float %mul63, %div64
  br label %return

return:                                           ; preds = %if.end43, %if.then40, %if.then32, %if.end30, %if.then
  %retval.0 = phi float [ %sub33, %if.then32 ], [ %mul41, %if.then40 ], [ %add65, %if.end43 ], [ %div, %if.then ], [ %z.0, %if.end30 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_y1f(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %mul = fmul float %x, %x
  %add = fadd float %mul, %x
  %div = fdiv float 1.000000e+00, %add
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %return, label %if.end3

if.end3:                                          ; preds = %if.end
  %cmp4 = icmp slt i32 %0, 0
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %if.end3
  %cmp7 = icmp ugt i32 %and, 1073741823
  br i1 %cmp7, label %if.then8, label %if.end38

if.then8:                                         ; preds = %if.end6
  %call = tail call float @sinf(float %x) #8
  %call9 = tail call float @cosf(float %x) #8
  %sub = fsub float -0.000000e+00, %call
  %sub10 = fsub float %sub, %call9
  %sub11 = fsub float %call, %call9
  %cmp12 = icmp ult i32 %and, 2130706432
  br i1 %cmp12, label %if.then13, label %if.then24

if.then13:                                        ; preds = %if.then8
  %add14 = fadd float %x, %x
  %call15 = tail call float @cosf(float %add14) #8
  %mul16 = fmul float %call, %call9
  %cmp17 = fcmp ogt float %mul16, 0.000000e+00
  br i1 %cmp17, label %if.then18, label %if.else

if.then18:                                        ; preds = %if.then13
  %div19 = fdiv float %call15, %sub10
  br label %if.end22

if.else:                                          ; preds = %if.then13
  %div20 = fdiv float %call15, %sub11
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then18
  %cc.0 = phi float [ %div19, %if.then18 ], [ %sub11, %if.else ]
  %ss.0 = phi float [ %sub10, %if.then18 ], [ %div20, %if.else ]
  %cmp23 = icmp ugt i32 %and, 1543503872
  br i1 %cmp23, label %if.then24, label %if.else28

if.then24:                                        ; preds = %if.end22, %if.then8
  %ss.0139 = phi float [ %ss.0, %if.end22 ], [ %sub10, %if.then8 ]
  %mul25 = fmul float %ss.0139, 0x3FE20DD760000000
  %call26 = tail call float @__ieee754_sqrtf(float %x) #8
  %div27 = fdiv float %mul25, %call26
  br label %return

if.else28:                                        ; preds = %if.end22
  %cmp.i = icmp ugt i32 %and, 1090519039
  br i1 %cmp.i, label %ponef.exit, label %if.else.i

if.else.i:                                        ; preds = %if.else28
  %cmp1.i = icmp ugt i32 %and, 1089936471
  br i1 %cmp1.i, label %ponef.exit, label %if.else3.i

if.else3.i:                                       ; preds = %if.else.i
  %cmp4.i = icmp ugt i32 %and, 1077336935
  %..i = select i1 %cmp4.i, float* getelementptr inbounds ([5 x float]* @ps3, i32 0, i32 0), float* getelementptr inbounds ([5 x float]* @ps2, i32 0, i32 0)
  %.63.i = select i1 %cmp4.i, float* getelementptr inbounds ([6 x float]* @pr3, i32 0, i32 0), float* getelementptr inbounds ([6 x float]* @pr2, i32 0, i32 0)
  br label %ponef.exit

ponef.exit:                                       ; preds = %if.else3.i, %if.else.i, %if.else28
  %q.0.i = phi float* [ getelementptr inbounds ([5 x float]* @ps8, i32 0, i32 0), %if.else28 ], [ getelementptr inbounds ([5 x float]* @ps5, i32 0, i32 0), %if.else.i ], [ %..i, %if.else3.i ]
  %p.0.i = phi float* [ getelementptr inbounds ([6 x float]* @pr8, i32 0, i32 0), %if.else28 ], [ getelementptr inbounds ([6 x float]* @pr5, i32 0, i32 0), %if.else.i ], [ %.63.i, %if.else3.i ]
  %mul.i = fmul float %x, %x
  %div.i = fdiv float 1.000000e+00, %mul.i
  %1 = load float* %p.0.i, align 4, !tbaa !435
  %arrayidx9.i = getelementptr inbounds float* %p.0.i, i32 1
  %2 = load float* %arrayidx9.i, align 4, !tbaa !435
  %arrayidx10.i = getelementptr inbounds float* %p.0.i, i32 2
  %3 = load float* %arrayidx10.i, align 4, !tbaa !435
  %arrayidx11.i = getelementptr inbounds float* %p.0.i, i32 3
  %4 = load float* %arrayidx11.i, align 4, !tbaa !435
  %arrayidx12.i = getelementptr inbounds float* %p.0.i, i32 4
  %5 = load float* %arrayidx12.i, align 4, !tbaa !435
  %arrayidx13.i = getelementptr inbounds float* %p.0.i, i32 5
  %6 = load float* %arrayidx13.i, align 4, !tbaa !435
  %mul14.i = fmul float %div.i, %6
  %add.i = fadd float %5, %mul14.i
  %mul15.i = fmul float %div.i, %add.i
  %add16.i = fadd float %4, %mul15.i
  %mul17.i = fmul float %div.i, %add16.i
  %add18.i = fadd float %3, %mul17.i
  %mul19.i = fmul float %div.i, %add18.i
  %add20.i = fadd float %2, %mul19.i
  %mul21.i = fmul float %div.i, %add20.i
  %add22.i = fadd float %1, %mul21.i
  %7 = load float* %q.0.i, align 4, !tbaa !435
  %arrayidx24.i = getelementptr inbounds float* %q.0.i, i32 1
  %8 = load float* %arrayidx24.i, align 4, !tbaa !435
  %arrayidx25.i = getelementptr inbounds float* %q.0.i, i32 2
  %9 = load float* %arrayidx25.i, align 4, !tbaa !435
  %arrayidx26.i = getelementptr inbounds float* %q.0.i, i32 3
  %10 = load float* %arrayidx26.i, align 4, !tbaa !435
  %arrayidx27.i = getelementptr inbounds float* %q.0.i, i32 4
  %11 = load float* %arrayidx27.i, align 4, !tbaa !435
  %mul28.i = fmul float %div.i, %11
  %add29.i = fadd float %10, %mul28.i
  %mul30.i = fmul float %div.i, %add29.i
  %add31.i = fadd float %9, %mul30.i
  %mul32.i = fmul float %div.i, %add31.i
  %add33.i = fadd float %8, %mul32.i
  %mul34.i = fmul float %div.i, %add33.i
  %add35.i = fadd float %7, %mul34.i
  %mul36.i = fmul float %div.i, %add35.i
  %add37.i = fadd float %mul36.i, 1.000000e+00
  %div38.i = fdiv float %add22.i, %add37.i
  %add39.i = fadd float %div38.i, 1.000000e+00
  %and.i113 = and i32 %0, 2145386496
  %cmp.i114 = icmp ugt i32 %and.i113, 1075838975
  %q.0.i115 = select i1 %cmp.i114, float* getelementptr inbounds ([6 x float]* @qs8, i32 0, i32 0), float* getelementptr inbounds ([6 x float]* @qs2, i32 0, i32 0)
  %p.0.i116 = select i1 %cmp.i114, float* getelementptr inbounds ([6 x float]* @qr8, i32 0, i32 0), float* getelementptr inbounds ([6 x float]* @qr2, i32 0, i32 0)
  %12 = load float* %p.0.i116, align 4, !tbaa !435
  %arrayidx9.i119 = getelementptr inbounds float* %p.0.i116, i32 1
  %13 = load float* %arrayidx9.i119, align 4, !tbaa !435
  %arrayidx10.i120 = getelementptr inbounds float* %p.0.i116, i32 2
  %14 = load float* %arrayidx10.i120, align 4, !tbaa !435
  %arrayidx11.i121 = getelementptr inbounds float* %p.0.i116, i32 3
  %15 = load float* %arrayidx11.i121, align 4, !tbaa !435
  %arrayidx12.i122 = getelementptr inbounds float* %p.0.i116, i32 4
  %16 = load float* %arrayidx12.i122, align 4, !tbaa !435
  %arrayidx13.i123 = getelementptr inbounds float* %p.0.i116, i32 5
  %17 = load float* %arrayidx13.i123, align 4, !tbaa !435
  %mul14.i124 = fmul float %div.i, %17
  %add.i125 = fadd float %16, %mul14.i124
  %mul15.i126 = fmul float %div.i, %add.i125
  %add16.i127 = fadd float %15, %mul15.i126
  %mul17.i128 = fmul float %div.i, %add16.i127
  %add18.i129 = fadd float %14, %mul17.i128
  %mul19.i130 = fmul float %div.i, %add18.i129
  %add20.i131 = fadd float %13, %mul19.i130
  %mul21.i132 = fmul float %div.i, %add20.i131
  %add22.i133 = fadd float %12, %mul21.i132
  %18 = load float* %q.0.i115, align 4, !tbaa !435
  %arrayidx24.i134 = getelementptr inbounds float* %q.0.i115, i32 1
  %19 = load float* %arrayidx24.i134, align 4, !tbaa !435
  %arrayidx25.i135 = getelementptr inbounds float* %q.0.i115, i32 2
  %20 = load float* %arrayidx25.i135, align 4, !tbaa !435
  %arrayidx26.i136 = getelementptr inbounds float* %q.0.i115, i32 3
  %21 = load float* %arrayidx26.i136, align 4, !tbaa !435
  %arrayidx27.i137 = getelementptr inbounds float* %q.0.i115, i32 4
  %22 = load float* %arrayidx27.i137, align 4, !tbaa !435
  %arrayidx28.i = getelementptr inbounds float* %q.0.i115, i32 5
  %23 = load float* %arrayidx28.i, align 4, !tbaa !435
  %mul29.i = fmul float %div.i, %23
  %add30.i = fadd float %22, %mul29.i
  %mul31.i = fmul float %div.i, %add30.i
  %add32.i = fadd float %21, %mul31.i
  %mul33.i = fmul float %div.i, %add32.i
  %add34.i = fadd float %20, %mul33.i
  %mul35.i = fmul float %div.i, %add34.i
  %add36.i = fadd float %19, %mul35.i
  %mul37.i = fmul float %div.i, %add36.i
  %add38.i = fadd float %18, %mul37.i
  %mul39.i = fmul float %div.i, %add38.i
  %add40.i = fadd float %mul39.i, 1.000000e+00
  %div41.i = fdiv float %add22.i133, %add40.i
  %add42.i = fadd float %div41.i, 3.750000e-01
  %div43.i = fdiv float %add42.i, %x
  %mul31 = fmul float %ss.0, %add39.i
  %mul32 = fmul float %cc.0, %div43.i
  %add33 = fadd float %mul31, %mul32
  %mul34 = fmul float %add33, 0x3FE20DD760000000
  %call35 = tail call float @__ieee754_sqrtf(float %x) #8
  %div36 = fdiv float %mul34, %call35
  br label %return

if.end38:                                         ; preds = %if.end6
  %cmp39 = icmp ult i32 %and, 612368385
  br i1 %cmp39, label %if.then40, label %if.end42

if.then40:                                        ; preds = %if.end38
  %div41 = fdiv float 0xBFE45F3060000000, %x
  br label %return

if.end42:                                         ; preds = %if.end38
  %mul43 = fmul float %x, %x
  %mul44 = fmul float %mul43, 0xBE78AC0060000000
  %add45 = fadd float %mul44, 0x3EF8AB0380000000
  %mul46 = fmul float %mul43, %add45
  %add47 = fadd float %mul46, 0xBF5F55E540000000
  %mul48 = fmul float %mul43, %add47
  %add49 = fadd float %mul48, 0x3FA9D3C780000000
  %mul50 = fmul float %mul43, %add49
  %add51 = fadd float %mul50, 0xBFC9186620000000
  %mul52 = fmul float %mul43, 0x3DB25039E0000000
  %add53 = fadd float %mul52, 0x3E3ABF1D60000000
  %mul54 = fmul float %mul43, %add53
  %add55 = fadd float %mul54, 0x3EB6C05A80000000
  %mul56 = fmul float %mul43, %add55
  %add57 = fadd float %mul56, 0x3F2A8C8960000000
  %mul58 = fmul float %mul43, %add57
  %add59 = fadd float %mul58, 0x3F94650D40000000
  %mul60 = fmul float %mul43, %add59
  %add61 = fadd float %mul60, 1.000000e+00
  %div62 = fdiv float %add51, %add61
  %mul63 = fmul float %div62, %x
  %call64 = tail call float @__ieee754_j1f(float %x) #9
  %call65 = tail call float @logf(float %x) #8
  %mul66 = fmul float %call64, %call65
  %div67 = fdiv float 1.000000e+00, %x
  %sub68 = fsub float %mul66, %div67
  %mul69 = fmul float %sub68, 0x3FE45F3060000000
  %add70 = fadd float %mul63, %mul69
  br label %return

return:                                           ; preds = %if.end42, %if.then40, %ponef.exit, %if.then24, %if.end3, %if.end, %if.then
  %retval.0 = phi float [ %div41, %if.then40 ], [ %add70, %if.end42 ], [ %div, %if.then ], [ 0xFFF0000000000000, %if.end ], [ 0x7FF8000000000000, %if.end3 ], [ %div27, %if.then24 ], [ %div36, %ponef.exit ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_jnf(i32 %n, float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ugt i32 %and, 2139095040
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %add = fadd float %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp slt i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %sub = sub nsw i32 0, %n
  %sub3 = fsub float -0.000000e+00, %x
  %xor = xor i32 %0, -2147483648
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %hx.0 = phi i32 [ %xor, %if.then2 ], [ %0, %if.end ]
  %x.addr.0 = phi float [ %sub3, %if.then2 ], [ %x, %if.end ]
  %n.addr.0 = phi i32 [ %sub, %if.then2 ], [ %n, %if.end ]
  switch i32 %n.addr.0, label %if.end11 [
    i32 0, label %if.then6
    i32 1, label %if.then9
  ]

if.then6:                                         ; preds = %if.end4
  %call = tail call float @__ieee754_j0f(float %x.addr.0) #8
  br label %return

if.then9:                                         ; preds = %if.end4
  %call10 = tail call float @__ieee754_j1f(float %x.addr.0) #8
  br label %return

if.end11:                                         ; preds = %if.end4
  %shr261 = lshr i32 %hx.0, 31
  %and13 = and i32 %shr261, %n.addr.0
  %call14 = tail call float @fabsf(float %x.addr.0) #8
  switch i32 %0, label %if.else [
    i32 -8388608, label %if.end128
    i32 -2147483648, label %if.end128
    i32 2139095040, label %if.end128
    i32 0, label %if.end128
  ]

if.else:                                          ; preds = %if.end11
  %conv = sitofp i32 %n.addr.0 to float
  %cmp18 = fcmp ugt float %conv, %call14
  br i1 %cmp18, label %if.else28, label %if.then20

if.then20:                                        ; preds = %if.else
  %call21 = tail call float @__ieee754_j0f(float %call14) #8
  %call22 = tail call float @__ieee754_j1f(float %call14) #8
  %cmp23256 = icmp sgt i32 %n.addr.0, 1
  br i1 %cmp23256, label %for.body.preheader, label %if.end128

for.body.preheader:                               ; preds = %if.then20
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.0259 = phi i32 [ %inc, %for.body ], [ 1, %for.body.preheader ]
  %b.0258 = phi float [ %sub27, %for.body ], [ %call22, %for.body.preheader ]
  %a.0257 = phi float [ %b.0258, %for.body ], [ %call21, %for.body.preheader ]
  %add25 = shl nsw i32 %i.0259, 1
  %conv26 = sitofp i32 %add25 to float
  %div = fdiv float %conv26, %call14
  %mul = fmul float %b.0258, %div
  %sub27 = fsub float %mul, %a.0257
  %inc = add nsw i32 %i.0259, 1
  %exitcond262 = icmp eq i32 %inc, %n.addr.0
  br i1 %exitcond262, label %if.end128.loopexit, label %for.body

if.else28:                                        ; preds = %if.else
  %cmp29 = icmp ult i32 %and, 813694976
  br i1 %cmp29, label %if.then31, label %if.else49

if.then31:                                        ; preds = %if.else28
  %cmp32 = icmp sgt i32 %n.addr.0, 33
  br i1 %cmp32, label %if.end128, label %if.else35

if.else35:                                        ; preds = %if.then31
  %mul36 = fmul float %call14, 5.000000e-01
  %cmp38227 = icmp slt i32 %n.addr.0, 2
  br i1 %cmp38227, label %for.end46, label %for.body40.preheader

for.body40.preheader:                             ; preds = %if.else35
  br label %for.body40

for.body40:                                       ; preds = %for.body40, %for.body40.preheader
  %i.1230 = phi i32 [ %inc45, %for.body40 ], [ 2, %for.body40.preheader ]
  %b.1229 = phi float [ %mul43, %for.body40 ], [ %mul36, %for.body40.preheader ]
  %a.1228 = phi float [ %mul42, %for.body40 ], [ 1.000000e+00, %for.body40.preheader ]
  %conv41 = sitofp i32 %i.1230 to float
  %mul42 = fmul float %a.1228, %conv41
  %mul43 = fmul float %mul36, %b.1229
  %inc45 = add nsw i32 %i.1230, 1
  %exitcond = icmp eq i32 %i.1230, %n.addr.0
  br i1 %exitcond, label %for.end46.loopexit, label %for.body40

for.end46.loopexit:                               ; preds = %for.body40
  %mul43.lcssa = phi float [ %mul43, %for.body40 ]
  %mul42.lcssa = phi float [ %mul42, %for.body40 ]
  br label %for.end46

for.end46:                                        ; preds = %for.end46.loopexit, %if.else35
  %b.1.lcssa = phi float [ %mul36, %if.else35 ], [ %mul43.lcssa, %for.end46.loopexit ]
  %a.1.lcssa = phi float [ 1.000000e+00, %if.else35 ], [ %mul42.lcssa, %for.end46.loopexit ]
  %div47 = fdiv float %b.1.lcssa, %a.1.lcssa
  br label %if.end128

if.else49:                                        ; preds = %if.else28
  %add52 = shl nsw i32 %n.addr.0, 1
  %conv53 = sitofp i32 %add52 to float
  %div54 = fdiv float %conv53, %call14
  %div55 = fdiv float 2.000000e+00, %call14
  %add56 = fadd float %div54, %div55
  %mul57 = fmul float %div54, %add56
  %sub58 = fadd float %mul57, -1.000000e+00
  %cmp59250 = fcmp olt float %sub58, 1.000000e+09
  br i1 %cmp59250, label %while.body.preheader, label %while.end

while.body.preheader:                             ; preds = %if.else49
  br label %while.body

while.body:                                       ; preds = %while.body, %while.body.preheader
  %k.0254 = phi i32 [ %add61, %while.body ], [ 1, %while.body.preheader ]
  %q1.0253 = phi float [ %sub64, %while.body ], [ %sub58, %while.body.preheader ]
  %q0.0252 = phi float [ %q1.0253, %while.body ], [ %div54, %while.body.preheader ]
  %z.0251 = phi float [ %add62, %while.body ], [ %add56, %while.body.preheader ]
  %add61 = add nsw i32 %k.0254, 1
  %add62 = fadd float %div55, %z.0251
  %mul63 = fmul float %add62, %q1.0253
  %sub64 = fsub float %mul63, %q0.0252
  %cmp59 = fcmp olt float %sub64, 1.000000e+09
  br i1 %cmp59, label %while.body, label %while.end.loopexit

while.end.loopexit:                               ; preds = %while.body
  %add61.lcssa = phi i32 [ %add61, %while.body ]
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.else49
  %k.0.lcssa = phi i32 [ 1, %if.else49 ], [ %add61.lcssa, %while.end.loopexit ]
  %add66 = add nsw i32 %k.0.lcssa, %n.addr.0
  %mul67 = shl nsw i32 %add66, 1
  %cmp69246 = icmp slt i32 %mul67, %add52
  br i1 %cmp69246, label %for.end78, label %for.body71.preheader

for.body71.preheader:                             ; preds = %while.end
  br label %for.body71

for.body71:                                       ; preds = %for.body71, %for.body71.preheader
  %t.0248 = phi float [ %div75, %for.body71 ], [ 0.000000e+00, %for.body71.preheader ]
  %i.2247 = phi i32 [ %sub77, %for.body71 ], [ %mul67, %for.body71.preheader ]
  %conv72 = sitofp i32 %i.2247 to float
  %div73 = fdiv float %conv72, %call14
  %sub74 = fsub float %div73, %t.0248
  %div75 = fdiv float 1.000000e+00, %sub74
  %sub77 = add nsw i32 %i.2247, -2
  %cmp69 = icmp slt i32 %sub77, %add52
  br i1 %cmp69, label %for.end78.loopexit, label %for.body71

for.end78.loopexit:                               ; preds = %for.body71
  %div75.lcssa = phi float [ %div75, %for.body71 ]
  br label %for.end78

for.end78:                                        ; preds = %for.end78.loopexit, %while.end
  %t.0.lcssa = phi float [ 0.000000e+00, %while.end ], [ %div75.lcssa, %for.end78.loopexit ]
  %mul81 = fmul float %conv, %div55
  %call82 = tail call float @fabsf(float %mul81) #8
  %call83 = tail call float @logf(float %call82) #8
  %mul84 = fmul float %conv, %call83
  %cmp85 = fcmp olt float %mul84, 0x40562E3000000000
  %sub88 = add nsw i32 %n.addr.0, -1
  %add89 = shl nsw i32 %sub88, 1
  %conv90 = sitofp i32 %add89 to float
  %cmp92232 = icmp sgt i32 %sub88, 0
  br i1 %cmp85, label %for.cond91.preheader, label %for.cond105.preheader

for.cond105.preheader:                            ; preds = %for.end78
  br i1 %cmp92232, label %for.body108.preheader, label %if.end122

for.body108.preheader:                            ; preds = %for.cond105.preheader
  br label %for.body108

for.cond91.preheader:                             ; preds = %for.end78
  br i1 %cmp92232, label %for.body94.preheader, label %if.end122

for.body94.preheader:                             ; preds = %for.cond91.preheader
  br label %for.body94

for.body94:                                       ; preds = %for.body94, %for.body94.preheader
  %i.3236 = phi i32 [ %dec, %for.body94 ], [ %sub88, %for.body94.preheader ]
  %di.0235 = phi float [ %sub98, %for.body94 ], [ %conv90, %for.body94.preheader ]
  %b.2234 = phi float [ %sub97, %for.body94 ], [ 1.000000e+00, %for.body94.preheader ]
  %a.2233 = phi float [ %b.2234, %for.body94 ], [ %t.0.lcssa, %for.body94.preheader ]
  %mul95 = fmul float %b.2234, %di.0235
  %div96 = fdiv float %mul95, %call14
  %sub97 = fsub float %div96, %a.2233
  %sub98 = fadd float %di.0235, -2.000000e+00
  %dec = add nsw i32 %i.3236, -1
  %cmp92 = icmp sgt i32 %dec, 0
  br i1 %cmp92, label %for.body94, label %if.end122.loopexit

for.body108:                                      ; preds = %for.inc119, %for.body108.preheader
  %t.1243 = phi float [ %t.2, %for.inc119 ], [ %t.0.lcssa, %for.body108.preheader ]
  %i.4242 = phi i32 [ %dec120, %for.inc119 ], [ %sub88, %for.body108.preheader ]
  %di.1241 = phi float [ %sub112, %for.inc119 ], [ %conv90, %for.body108.preheader ]
  %b.3240 = phi float [ %b.4, %for.inc119 ], [ 1.000000e+00, %for.body108.preheader ]
  %a.3239 = phi float [ %a.4, %for.inc119 ], [ %t.0.lcssa, %for.body108.preheader ]
  %mul109 = fmul float %b.3240, %di.1241
  %div110 = fdiv float %mul109, %call14
  %sub111 = fsub float %div110, %a.3239
  %sub112 = fadd float %di.1241, -2.000000e+00
  %cmp113 = fcmp ogt float %sub111, 1.000000e+10
  br i1 %cmp113, label %if.then115, label %for.inc119

if.then115:                                       ; preds = %for.body108
  %div116 = fdiv float %b.3240, %sub111
  %div117 = fdiv float %t.1243, %sub111
  br label %for.inc119

for.inc119:                                       ; preds = %if.then115, %for.body108
  %a.4 = phi float [ %div116, %if.then115 ], [ %b.3240, %for.body108 ]
  %b.4 = phi float [ 1.000000e+00, %if.then115 ], [ %sub111, %for.body108 ]
  %t.2 = phi float [ %div117, %if.then115 ], [ %t.1243, %for.body108 ]
  %dec120 = add nsw i32 %i.4242, -1
  %cmp106 = icmp sgt i32 %dec120, 0
  br i1 %cmp106, label %for.body108, label %if.end122.loopexit264

if.end122.loopexit:                               ; preds = %for.body94
  %sub97.lcssa = phi float [ %sub97, %for.body94 ]
  br label %if.end122

if.end122.loopexit264:                            ; preds = %for.inc119
  %t.2.lcssa = phi float [ %t.2, %for.inc119 ]
  %b.4.lcssa = phi float [ %b.4, %for.inc119 ]
  br label %if.end122

if.end122:                                        ; preds = %if.end122.loopexit264, %if.end122.loopexit, %for.cond91.preheader, %for.cond105.preheader
  %b.5 = phi float [ 1.000000e+00, %for.cond91.preheader ], [ 1.000000e+00, %for.cond105.preheader ], [ %sub97.lcssa, %if.end122.loopexit ], [ %b.4.lcssa, %if.end122.loopexit264 ]
  %t.3 = phi float [ %t.0.lcssa, %for.cond91.preheader ], [ %t.0.lcssa, %for.cond105.preheader ], [ %t.0.lcssa, %if.end122.loopexit ], [ %t.2.lcssa, %if.end122.loopexit264 ]
  %call123 = tail call float @__ieee754_j0f(float %call14) #8
  %mul124 = fmul float %t.3, %call123
  %div125 = fdiv float %mul124, %b.5
  br label %if.end128

if.end128.loopexit:                               ; preds = %for.body
  %sub27.lcssa = phi float [ %sub27, %for.body ]
  br label %if.end128

if.end128:                                        ; preds = %if.end128.loopexit, %if.end122, %for.end46, %if.then31, %if.then20, %if.end11, %if.end11, %if.end11, %if.end11
  %b.6 = phi float [ %div47, %for.end46 ], [ %div125, %if.end122 ], [ 0.000000e+00, %if.end11 ], [ 0.000000e+00, %if.end11 ], [ 0.000000e+00, %if.end11 ], [ 0.000000e+00, %if.end11 ], [ 0.000000e+00, %if.then31 ], [ %call22, %if.then20 ], [ %sub27.lcssa, %if.end128.loopexit ]
  %cmp129 = icmp eq i32 %and13, 1
  br i1 %cmp129, label %if.then131, label %return

if.then131:                                       ; preds = %if.end128
  %sub132 = fsub float -0.000000e+00, %b.6
  br label %return

return:                                           ; preds = %if.then131, %if.end128, %if.then9, %if.then6, %if.then
  %retval.0 = phi float [ %add, %if.then ], [ %call, %if.then6 ], [ %call10, %if.then9 ], [ %sub132, %if.then131 ], [ %b.6, %if.end128 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_ynf(i32 %n, float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ugt i32 %and, 2139095040
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %add = fadd float %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %return, label %if.end3

if.end3:                                          ; preds = %if.end
  %cmp4 = icmp slt i32 %0, 0
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %if.end3
  %cmp7 = icmp slt i32 %n, 0
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.end6
  %sub = sub nsw i32 0, %n
  %and9 = shl i32 %sub, 1
  %shl = and i32 %and9, 2
  %sub10 = sub nsw i32 1, %shl
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %if.end6
  %sign.0 = phi i32 [ %sub10, %if.then8 ], [ 1, %if.end6 ]
  %n.addr.0 = phi i32 [ %sub, %if.then8 ], [ %n, %if.end6 ]
  switch i32 %n.addr.0, label %if.end18 [
    i32 0, label %if.then13
    i32 1, label %if.then16
  ]

if.then13:                                        ; preds = %if.end11
  %call = tail call float @__ieee754_y0f(float %x) #8
  br label %return

if.then16:                                        ; preds = %if.end11
  %conv = sitofp i32 %sign.0 to float
  %call17 = tail call float @__ieee754_y1f(float %x) #8
  %mul = fmul float %conv, %call17
  br label %return

if.end18:                                         ; preds = %if.end11
  %cmp19 = icmp eq i32 %and, 2139095040
  br i1 %cmp19, label %return, label %if.end22

if.end22:                                         ; preds = %if.end18
  %call23 = tail call float @__ieee754_y0f(float %x) #8
  %call24 = tail call float @__ieee754_y1f(float %x) #8
  %ib.070 = bitcast float %call24 to i32
  %cmp3071 = icmp sgt i32 %n.addr.0, 1
  %cmp3272 = icmp ne i32 %ib.070, -8388608
  %or.cond73 = and i1 %cmp3071, %cmp3272
  br i1 %or.cond73, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %if.end22
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.076 = phi i32 [ %inc, %for.body ], [ 1, %for.body.preheader ]
  %b.075 = phi float [ %sub37, %for.body ], [ %call24, %for.body.preheader ]
  %a.074 = phi float [ %b.075, %for.body ], [ %call23, %for.body.preheader ]
  %add34 = shl nsw i32 %i.076, 1
  %conv35 = sitofp i32 %add34 to float
  %div = fdiv float %conv35, %x
  %mul36 = fmul float %b.075, %div
  %sub37 = fsub float %mul36, %a.074
  %inc = add nsw i32 %i.076, 1
  %ib.0 = bitcast float %sub37 to i32
  %cmp30 = icmp slt i32 %inc, %n.addr.0
  %cmp32 = icmp ne i32 %ib.0, -8388608
  %or.cond = and i1 %cmp30, %cmp32
  br i1 %or.cond, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  %sub37.lcssa = phi float [ %sub37, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.end22
  %b.0.lcssa = phi float [ %call24, %if.end22 ], [ %sub37.lcssa, %for.end.loopexit ]
  %cmp43 = icmp sgt i32 %sign.0, 0
  br i1 %cmp43, label %return, label %if.else

if.else:                                          ; preds = %for.end
  %sub46 = fsub float -0.000000e+00, %b.0.lcssa
  br label %return

return:                                           ; preds = %if.else, %for.end, %if.end18, %if.then16, %if.then13, %if.end3, %if.end, %if.then
  %retval.0 = phi float [ %add, %if.then ], [ %call, %if.then13 ], [ %mul, %if.then16 ], [ %sub46, %if.else ], [ 0xFFF0000000000000, %if.end ], [ 0x7FF8000000000000, %if.end3 ], [ 0.000000e+00, %if.end18 ], [ %b.0.lcssa, %for.end ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_log10f(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1 = icmp slt i32 %0, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %sub = fsub float %x, %x
  %div = fdiv float %sub, 0.000000e+00
  br label %return

if.end3:                                          ; preds = %if.end
  %cmp4 = icmp slt i32 %0, 2139095040
  br i1 %cmp4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end3
  %add = fadd float %x, %x
  br label %return

if.end6:                                          ; preds = %if.end3
  %cmp7 = icmp slt i32 %0, 8388608
  br i1 %cmp7, label %if.then8, label %if.end15

if.then8:                                         ; preds = %if.end6
  %mul = fmul float %x, 0x4180000000000000
  %1 = bitcast float %mul to i32
  br label %if.end15

if.end15:                                         ; preds = %if.then8, %if.end6
  %hx.0 = phi i32 [ %1, %if.then8 ], [ %0, %if.end6 ]
  %k.0 = phi i32 [ -25, %if.then8 ], [ 0, %if.end6 ]
  %shr = ashr i32 %hx.0, 23
  %sub16 = add nsw i32 %shr, -127
  %add17 = add nsw i32 %sub16, %k.0
  %shr19 = lshr i32 %add17, 31
  %2 = and i32 %hx.0, 8388607
  %3 = shl nuw nsw i32 %shr19, 23
  %and20 = or i32 %3, %2
  %or = xor i32 %and20, 1065353216
  %add22 = add nsw i32 %shr19, %add17
  %conv = sitofp i32 %add22 to float
  %4 = bitcast i32 %or to float
  %mul27 = fmul float %conv, 0x3EAA84FB60000000
  %call = tail call float @logf(float %4) #8
  %mul28 = fmul float %call, 0x3FDBCB7B20000000
  %add29 = fadd float %mul28, %mul27
  %mul30 = fmul float %conv, 0x3FD3441000000000
  %add31 = fadd float %mul30, %add29
  br label %return

return:                                           ; preds = %if.end15, %if.then5, %if.then2, %entry
  %retval.0 = phi float [ %div, %if.then2 ], [ %add31, %if.end15 ], [ %add, %if.then5 ], [ 0xFFF0000000000000, %entry ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define double @__ieee754_fmod(double %x, double %y) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %1 = bitcast double %y to i64
  %ew_u3.sroa.0.4.extract.shift = lshr i64 %1, 32
  %ew_u3.sroa.0.4.extract.trunc = trunc i64 %ew_u3.sroa.0.4.extract.shift to i32
  %ew_u3.sroa.0.0.extract.trunc = trunc i64 %1 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, -2147483648
  %xor = xor i32 %and, %ew_u.sroa.0.4.extract.trunc
  %and10 = and i32 %ew_u3.sroa.0.4.extract.trunc, 2147483647
  %or = or i32 %and10, %ew_u3.sroa.0.0.extract.trunc
  %cmp = icmp eq i32 %or, 0
  %cmp11 = icmp sgt i32 %xor, 2146435071
  %or.cond = or i1 %cmp, %cmp11
  br i1 %or.cond, label %if.then, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %entry
  %sub = sub i32 0, %ew_u3.sroa.0.0.extract.trunc
  %or13 = or i32 %ew_u3.sroa.0.0.extract.trunc, %sub
  %shr = lshr i32 %or13, 31
  %or14 = or i32 %and10, %shr
  %cmp15 = icmp ugt i32 %or14, 2146435072
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false12, %entry
  %mul = fmul double %x, %y
  %div = fdiv double %mul, %mul
  br label %return

if.end:                                           ; preds = %lor.lhs.false12
  %cmp17 = icmp sgt i32 %xor, %and10
  br i1 %cmp17, label %if.end28, label %if.then18

if.then18:                                        ; preds = %if.end
  %cmp19 = icmp slt i32 %xor, %and10
  %cmp21 = icmp ult i32 %ew_u.sroa.0.0.extract.trunc, %ew_u3.sroa.0.0.extract.trunc
  %or.cond335 = or i1 %cmp19, %cmp21
  br i1 %or.cond335, label %return, label %if.end23

if.end23:                                         ; preds = %if.then18
  %cmp24 = icmp eq i32 %ew_u.sroa.0.0.extract.trunc, %ew_u3.sroa.0.0.extract.trunc
  br i1 %cmp24, label %if.then25, label %if.end28

if.then25:                                        ; preds = %if.end23
  %shr26333 = lshr i64 %0, 63
  %shr26 = trunc i64 %shr26333 to i32
  %arrayidx = getelementptr inbounds [2 x double]* @Zero4, i32 0, i32 %shr26
  %2 = load double* %arrayidx, align 8, !tbaa !429
  br label %return

if.end28:                                         ; preds = %if.end23, %if.end
  %cmp29 = icmp slt i32 %xor, 1048576
  br i1 %cmp29, label %if.then30, label %if.else44

if.then30:                                        ; preds = %if.end28
  %cmp31 = icmp eq i32 %ew_u.sroa.0.4.extract.trunc, %and
  br i1 %cmp31, label %for.cond.preheader, label %if.else

for.cond.preheader:                               ; preds = %if.then30
  %cmp33372 = icmp sgt i32 %ew_u.sroa.0.0.extract.trunc, 0
  br i1 %cmp33372, label %for.body.preheader, label %if.end47

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.0374 = phi i32 [ %shl, %for.body ], [ %ew_u.sroa.0.0.extract.trunc, %for.body.preheader ]
  %ix.0373 = phi i32 [ %sub34, %for.body ], [ -1043, %for.body.preheader ]
  %sub34 = add nsw i32 %ix.0373, -1
  %shl = shl i32 %i.0374, 1
  %cmp33 = icmp sgt i32 %shl, 0
  br i1 %cmp33, label %for.body, label %if.end47.loopexit

if.else:                                          ; preds = %if.then30
  %shl35331 = shl nuw nsw i64 %ew_u.sroa.0.4.extract.shift, 11
  %shl35 = trunc i64 %shl35331 to i32
  %cmp37376 = icmp sgt i32 %shl35, 0
  br i1 %cmp37376, label %for.body38.preheader, label %if.end47

for.body38.preheader:                             ; preds = %if.else
  br label %for.body38

for.body38:                                       ; preds = %for.body38, %for.body38.preheader
  %i.1378 = phi i32 [ %shl41, %for.body38 ], [ %shl35, %for.body38.preheader ]
  %ix.1377 = phi i32 [ %sub39, %for.body38 ], [ -1022, %for.body38.preheader ]
  %sub39 = add nsw i32 %ix.1377, -1
  %shl41 = shl i32 %i.1378, 1
  %cmp37 = icmp sgt i32 %shl41, 0
  br i1 %cmp37, label %for.body38, label %if.end47.loopexit387

if.else44:                                        ; preds = %if.end28
  %shr45 = ashr i32 %xor, 20
  %sub46 = add nsw i32 %shr45, -1023
  br label %if.end47

if.end47.loopexit:                                ; preds = %for.body
  %sub34.lcssa = phi i32 [ %sub34, %for.body ]
  br label %if.end47

if.end47.loopexit387:                             ; preds = %for.body38
  %sub39.lcssa = phi i32 [ %sub39, %for.body38 ]
  br label %if.end47

if.end47:                                         ; preds = %if.end47.loopexit387, %if.end47.loopexit, %if.else44, %if.else, %for.cond.preheader
  %ix.2 = phi i32 [ %sub46, %if.else44 ], [ -1043, %for.cond.preheader ], [ -1022, %if.else ], [ %sub34.lcssa, %if.end47.loopexit ], [ %sub39.lcssa, %if.end47.loopexit387 ]
  %cmp48 = icmp ult i32 %and10, 1048576
  br i1 %cmp48, label %if.then49, label %if.else69

if.then49:                                        ; preds = %if.end47
  %cmp50 = icmp eq i32 %and10, 0
  br i1 %cmp50, label %for.cond52.preheader, label %if.else59

for.cond52.preheader:                             ; preds = %if.then49
  %cmp53364 = icmp sgt i32 %ew_u3.sroa.0.0.extract.trunc, 0
  br i1 %cmp53364, label %for.body54.preheader, label %if.end72

for.body54.preheader:                             ; preds = %for.cond52.preheader
  br label %for.body54

for.body54:                                       ; preds = %for.body54, %for.body54.preheader
  %i.2366 = phi i32 [ %shl57, %for.body54 ], [ %ew_u3.sroa.0.0.extract.trunc, %for.body54.preheader ]
  %iy.0365 = phi i32 [ %sub55, %for.body54 ], [ -1043, %for.body54.preheader ]
  %sub55 = add nsw i32 %iy.0365, -1
  %shl57 = shl i32 %i.2366, 1
  %cmp53 = icmp sgt i32 %shl57, 0
  br i1 %cmp53, label %for.body54, label %if.end72.loopexit

if.else59:                                        ; preds = %if.then49
  %shl60329 = shl nuw nsw i64 %ew_u3.sroa.0.4.extract.shift, 11
  %shl60 = trunc i64 %shl60329 to i32
  %cmp62368 = icmp sgt i32 %shl60, 0
  br i1 %cmp62368, label %for.body63.preheader, label %if.end72

for.body63.preheader:                             ; preds = %if.else59
  br label %for.body63

for.body63:                                       ; preds = %for.body63, %for.body63.preheader
  %i.3370 = phi i32 [ %shl66, %for.body63 ], [ %shl60, %for.body63.preheader ]
  %iy.1369 = phi i32 [ %sub64, %for.body63 ], [ -1022, %for.body63.preheader ]
  %sub64 = add nsw i32 %iy.1369, -1
  %shl66 = shl i32 %i.3370, 1
  %cmp62 = icmp sgt i32 %shl66, 0
  br i1 %cmp62, label %for.body63, label %if.end72.loopexit386

if.else69:                                        ; preds = %if.end47
  %shr70324 = lshr i32 %and10, 20
  %sub71 = add nsw i32 %shr70324, -1023
  br label %if.end72

if.end72.loopexit:                                ; preds = %for.body54
  %sub55.lcssa = phi i32 [ %sub55, %for.body54 ]
  br label %if.end72

if.end72.loopexit386:                             ; preds = %for.body63
  %sub64.lcssa = phi i32 [ %sub64, %for.body63 ]
  br label %if.end72

if.end72:                                         ; preds = %if.end72.loopexit386, %if.end72.loopexit, %if.else69, %if.else59, %for.cond52.preheader
  %iy.2 = phi i32 [ %sub71, %if.else69 ], [ -1043, %for.cond52.preheader ], [ -1022, %if.else59 ], [ %sub55.lcssa, %if.end72.loopexit ], [ %sub64.lcssa, %if.end72.loopexit386 ]
  %cmp73 = icmp sgt i32 %ix.2, -1023
  br i1 %cmp73, label %if.then74, label %if.else77

if.then74:                                        ; preds = %if.end72
  %and75 = and i32 %ew_u.sroa.0.4.extract.trunc, 1048575
  %or76 = or i32 %and75, 1048576
  br label %if.end90

if.else77:                                        ; preds = %if.end72
  %sub78 = sub nsw i32 -1022, %ix.2
  %cmp79 = icmp slt i32 %sub78, 32
  br i1 %cmp79, label %if.then80, label %if.else86

if.then80:                                        ; preds = %if.else77
  %shl81 = shl i32 %xor, %sub78
  %sub82 = sub nsw i32 32, %sub78
  %shr83 = lshr i32 %ew_u.sroa.0.0.extract.trunc, %sub82
  %or84 = or i32 %shr83, %shl81
  %shl85 = shl i32 %ew_u.sroa.0.0.extract.trunc, %sub78
  br label %if.end90

if.else86:                                        ; preds = %if.else77
  %sub87 = add nsw i32 %sub78, -32
  %shl88 = shl i32 %ew_u.sroa.0.0.extract.trunc, %sub87
  br label %if.end90

if.end90:                                         ; preds = %if.else86, %if.then80, %if.then74
  %hx.0 = phi i32 [ %or76, %if.then74 ], [ %or84, %if.then80 ], [ %shl88, %if.else86 ]
  %lx.0 = phi i32 [ %ew_u.sroa.0.0.extract.trunc, %if.then74 ], [ %shl85, %if.then80 ], [ 0, %if.else86 ]
  %cmp91 = icmp sgt i32 %iy.2, -1023
  br i1 %cmp91, label %if.then92, label %if.else95

if.then92:                                        ; preds = %if.end90
  %and93 = and i32 %ew_u3.sroa.0.4.extract.trunc, 1048575
  %or94 = or i32 %and93, 1048576
  br label %if.end108

if.else95:                                        ; preds = %if.end90
  %sub96 = sub nsw i32 -1022, %iy.2
  %cmp97 = icmp slt i32 %sub96, 32
  br i1 %cmp97, label %if.then98, label %if.else104

if.then98:                                        ; preds = %if.else95
  %shl99 = shl i32 %and10, %sub96
  %sub100 = sub nsw i32 32, %sub96
  %shr101 = lshr i32 %ew_u3.sroa.0.0.extract.trunc, %sub100
  %or102 = or i32 %shr101, %shl99
  %shl103 = shl i32 %ew_u3.sroa.0.0.extract.trunc, %sub96
  br label %if.end108

if.else104:                                       ; preds = %if.else95
  %sub105 = add nsw i32 %sub96, -32
  %shl106 = shl i32 %ew_u3.sroa.0.0.extract.trunc, %sub105
  br label %if.end108

if.end108:                                        ; preds = %if.else104, %if.then98, %if.then92
  %hy.0 = phi i32 [ %or94, %if.then92 ], [ %or102, %if.then98 ], [ %shl106, %if.else104 ]
  %ly.0 = phi i32 [ %ew_u3.sroa.0.0.extract.trunc, %if.then92 ], [ %shl103, %if.then98 ], [ 0, %if.else104 ]
  %tobool349 = icmp eq i32 %ix.2, %iy.2
  %sub110350 = sub nsw i32 %hx.0, %hy.0
  %sub111351 = sub i32 %lx.0, %ly.0
  %cmp112352 = icmp ult i32 %lx.0, %ly.0
  %sub137353 = sext i1 %cmp112352 to i32
  %sub137.sub110354 = add nsw i32 %sub137353, %sub110350
  br i1 %tobool349, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %if.end108
  %sub109 = sub nsw i32 %ix.2, %iy.2
  br label %while.body

while.body:                                       ; preds = %while.cond.backedge, %while.body.lr.ph
  %sub137.sub110359 = phi i32 [ %sub137.sub110354, %while.body.lr.ph ], [ %sub137.sub110, %while.cond.backedge ]
  %sub111358 = phi i32 [ %sub111351, %while.body.lr.ph ], [ %sub111, %while.cond.backedge ]
  %dec357.in = phi i32 [ %sub109, %while.body.lr.ph ], [ %dec357, %while.cond.backedge ]
  %lx.1356 = phi i32 [ %lx.0, %while.body.lr.ph ], [ %lx.1.be, %while.cond.backedge ]
  %hx.1355 = phi i32 [ %hx.0, %while.body.lr.ph ], [ %hx.1.be, %while.cond.backedge ]
  %dec357 = add nsw i32 %dec357.in, -1
  %cmp116 = icmp slt i32 %sub137.sub110359, 0
  br i1 %cmp116, label %if.then117, label %if.else121

if.then117:                                       ; preds = %while.body
  %add = shl nsw i32 %hx.1355, 1
  %shr118 = lshr i32 %lx.1356, 31
  %add119 = or i32 %shr118, %add
  br label %while.cond.backedge

if.else121:                                       ; preds = %while.body
  %or122 = or i32 %sub137.sub110359, %sub111358
  %cmp123 = icmp eq i32 %or122, 0
  br i1 %cmp123, label %if.then124, label %if.end127

if.then124:                                       ; preds = %if.else121
  %shr125327 = lshr i64 %0, 63
  %shr125 = trunc i64 %shr125327 to i32
  %arrayidx126 = getelementptr inbounds [2 x double]* @Zero4, i32 0, i32 %shr125
  %3 = load double* %arrayidx126, align 8, !tbaa !429
  br label %return

if.end127:                                        ; preds = %if.else121
  %add128 = shl nsw i32 %sub137.sub110359, 1
  %shr129 = lshr i32 %sub111358, 31
  %add130 = or i32 %add128, %shr129
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.end127, %if.then117
  %hx.1.be = phi i32 [ %add119, %if.then117 ], [ %add130, %if.end127 ]
  %lx.1.be.in = phi i32 [ %lx.1356, %if.then117 ], [ %sub111358, %if.end127 ]
  %lx.1.be = shl i32 %lx.1.be.in, 1
  %tobool = icmp eq i32 %dec357, 0
  %sub110 = sub nsw i32 %hx.1.be, %hy.0
  %sub111 = sub i32 %lx.1.be, %ly.0
  %cmp112 = icmp ult i32 %lx.1.be, %ly.0
  %sub137 = sext i1 %cmp112 to i32
  %sub137.sub110 = add nsw i32 %sub137, %sub110
  br i1 %tobool, label %while.end.loopexit, label %while.body

while.end.loopexit:                               ; preds = %while.cond.backedge
  %sub137.sub110.lcssa389 = phi i32 [ %sub137.sub110, %while.cond.backedge ]
  %sub111.lcssa388 = phi i32 [ %sub111, %while.cond.backedge ]
  %lx.1.be.lcssa = phi i32 [ %lx.1.be, %while.cond.backedge ]
  %hx.1.be.lcssa = phi i32 [ %hx.1.be, %while.cond.backedge ]
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.end108
  %sub137.sub110.lcssa = phi i32 [ %sub137.sub110354, %if.end108 ], [ %sub137.sub110.lcssa389, %while.end.loopexit ]
  %sub111.lcssa = phi i32 [ %sub111351, %if.end108 ], [ %sub111.lcssa388, %while.end.loopexit ]
  %lx.1.lcssa = phi i32 [ %lx.0, %if.end108 ], [ %lx.1.be.lcssa, %while.end.loopexit ]
  %hx.1.lcssa = phi i32 [ %hx.0, %if.end108 ], [ %hx.1.be.lcssa, %while.end.loopexit ]
  %cmp139 = icmp sgt i32 %sub137.sub110.lcssa, -1
  %hx.2 = select i1 %cmp139, i32 %sub137.sub110.lcssa, i32 %hx.1.lcssa
  %lx.2 = select i1 %cmp139, i32 %sub111.lcssa, i32 %lx.1.lcssa
  %or142 = or i32 %hx.2, %lx.2
  %cmp143 = icmp eq i32 %or142, 0
  br i1 %cmp143, label %if.then144, label %while.cond148.preheader

while.cond148.preheader:                          ; preds = %while.end
  %cmp149342 = icmp slt i32 %hx.2, 1048576
  br i1 %cmp149342, label %while.body150.preheader, label %while.end156

while.body150.preheader:                          ; preds = %while.cond148.preheader
  br label %while.body150

if.then144:                                       ; preds = %while.end
  %shr145325 = lshr i64 %0, 63
  %shr145 = trunc i64 %shr145325 to i32
  %arrayidx146 = getelementptr inbounds [2 x double]* @Zero4, i32 0, i32 %shr145
  %4 = load double* %arrayidx146, align 8, !tbaa !429
  br label %return

while.body150:                                    ; preds = %while.body150, %while.body150.preheader
  %lx.3345 = phi i32 [ %add154, %while.body150 ], [ %lx.2, %while.body150.preheader ]
  %hx.3344 = phi i32 [ %add153, %while.body150 ], [ %hx.2, %while.body150.preheader ]
  %iy.3343 = phi i32 [ %sub155, %while.body150 ], [ %iy.2, %while.body150.preheader ]
  %add151 = shl nsw i32 %hx.3344, 1
  %shr152 = lshr i32 %lx.3345, 31
  %add153 = or i32 %shr152, %add151
  %add154 = shl i32 %lx.3345, 1
  %sub155 = add nsw i32 %iy.3343, -1
  %cmp149 = icmp slt i32 %add153, 1048576
  br i1 %cmp149, label %while.body150, label %while.end156.loopexit

while.end156.loopexit:                            ; preds = %while.body150
  %sub155.lcssa = phi i32 [ %sub155, %while.body150 ]
  %add154.lcssa = phi i32 [ %add154, %while.body150 ]
  %add153.lcssa = phi i32 [ %add153, %while.body150 ]
  br label %while.end156

while.end156:                                     ; preds = %while.end156.loopexit, %while.cond148.preheader
  %lx.3.lcssa = phi i32 [ %lx.2, %while.cond148.preheader ], [ %add154.lcssa, %while.end156.loopexit ]
  %hx.3.lcssa = phi i32 [ %hx.2, %while.cond148.preheader ], [ %add153.lcssa, %while.end156.loopexit ]
  %iy.3.lcssa = phi i32 [ %iy.2, %while.cond148.preheader ], [ %sub155.lcssa, %while.end156.loopexit ]
  %cmp157 = icmp sgt i32 %iy.3.lcssa, -1023
  br i1 %cmp157, label %if.then158, label %if.else171

if.then158:                                       ; preds = %while.end156
  %sub159 = add nsw i32 %hx.3.lcssa, -1048576
  %add160 = shl i32 %iy.3.lcssa, 20
  %shl161 = add i32 %add160, 1072693248
  %or162 = or i32 %shl161, %and
  %or164 = or i32 %or162, %sub159
  %iw_u.sroa.0.4.insert.ext = zext i32 %or164 to i64
  %iw_u.sroa.0.4.insert.shift = shl nuw i64 %iw_u.sroa.0.4.insert.ext, 32
  %iw_u.sroa.0.0.insert.ext = zext i32 %lx.3.lcssa to i64
  %iw_u.sroa.0.0.insert.insert = or i64 %iw_u.sroa.0.4.insert.shift, %iw_u.sroa.0.0.insert.ext
  br label %if.end202

if.else171:                                       ; preds = %while.end156
  %sub172 = sub nsw i32 -1022, %iy.3.lcssa
  %cmp173 = icmp slt i32 %sub172, 21
  br i1 %cmp173, label %if.then174, label %if.else180

if.then174:                                       ; preds = %if.else171
  %shr175 = lshr i32 %lx.3.lcssa, %sub172
  %sub176 = sub nsw i32 32, %sub172
  %shl177 = shl i32 %hx.3.lcssa, %sub176
  %or178 = or i32 %shr175, %shl177
  %shr179 = ashr i32 %hx.3.lcssa, %sub172
  br label %do.body192

if.else180:                                       ; preds = %if.else171
  %cmp181 = icmp slt i32 %sub172, 32
  br i1 %cmp181, label %if.then182, label %if.else187

if.then182:                                       ; preds = %if.else180
  %sub183 = sub nsw i32 32, %sub172
  %shl184 = shl i32 %hx.3.lcssa, %sub183
  %shr185 = lshr i32 %lx.3.lcssa, %sub172
  %or186 = or i32 %shl184, %shr185
  br label %do.body192

if.else187:                                       ; preds = %if.else180
  %sub188 = add nsw i32 %sub172, -32
  %shr189 = ashr i32 %hx.3.lcssa, %sub188
  br label %do.body192

do.body192:                                       ; preds = %if.else187, %if.then182, %if.then174
  %hx.4 = phi i32 [ %shr179, %if.then174 ], [ %and, %if.then182 ], [ %and, %if.else187 ]
  %lx.4 = phi i32 [ %or178, %if.then174 ], [ %or186, %if.then182 ], [ %shr189, %if.else187 ]
  %or194 = or i32 %hx.4, %and
  %iw_u193.sroa.0.4.insert.ext = zext i32 %or194 to i64
  %iw_u193.sroa.0.4.insert.shift = shl nuw i64 %iw_u193.sroa.0.4.insert.ext, 32
  %iw_u193.sroa.0.0.insert.ext = zext i32 %lx.4 to i64
  %iw_u193.sroa.0.0.insert.insert = or i64 %iw_u193.sroa.0.4.insert.shift, %iw_u193.sroa.0.0.insert.ext
  br label %if.end202

if.end202:                                        ; preds = %do.body192, %if.then158
  %x.addr.0.in = phi i64 [ %iw_u.sroa.0.0.insert.insert, %if.then158 ], [ %iw_u193.sroa.0.0.insert.insert, %do.body192 ]
  %x.addr.0 = bitcast i64 %x.addr.0.in to double
  br label %return

return:                                           ; preds = %if.end202, %if.then144, %if.then124, %if.then25, %if.then18, %if.then
  %retval.0 = phi double [ %div, %if.then ], [ %2, %if.then25 ], [ %3, %if.then124 ], [ %4, %if.then144 ], [ %x.addr.0, %if.end202 ], [ %x, %if.then18 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_remainderf(float %x, float %p) #2 {
entry:
  %0 = bitcast float %x to i32
  %1 = bitcast float %p to i32
  %and = and i32 %0, -2147483648
  %and6 = and i32 %1, 2147483647
  %and7 = and i32 %0, 2147483647
  %notlhs = icmp eq i32 %and6, 0
  %notrhs = icmp ugt i32 %and7, 2139095039
  %or.cond.not = or i1 %notrhs, %notlhs
  %cmp10 = icmp ugt i32 %and6, 2139095040
  %or.cond52 = or i1 %or.cond.not, %cmp10
  br i1 %or.cond52, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mul = fmul float %x, %p
  %div = fdiv float %mul, %mul
  br label %return

if.end:                                           ; preds = %entry
  %cmp12 = icmp ult i32 %and6, 2130706432
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end
  %add = fadd float %p, %p
  %call = tail call float @__ieee754_fmodf(float %x, float %add) #8
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end
  %x.addr.0 = phi float [ %call, %if.then13 ], [ %x, %if.end ]
  %cmp15 = icmp eq i32 %and7, %and6
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end14
  %mul17 = fmul float %x.addr.0, 0.000000e+00
  br label %return

if.end18:                                         ; preds = %if.end14
  %call19 = tail call float @fabsf(float %x.addr.0) #8
  %call20 = tail call float @fabsf(float %p) #8
  %cmp21 = icmp ult i32 %and6, 16777216
  br i1 %cmp21, label %if.then22, label %if.else

if.then22:                                        ; preds = %if.end18
  %add23 = fadd float %call19, %call19
  %cmp24 = fcmp ogt float %add23, %call20
  br i1 %cmp24, label %if.then25, label %do.body43

if.then25:                                        ; preds = %if.then22
  %sub26 = fsub float %call19, %call20
  %add27 = fadd float %sub26, %sub26
  %cmp28 = fcmp ult float %add27, %call20
  br i1 %cmp28, label %do.body43, label %if.then29

if.then29:                                        ; preds = %if.then25
  %sub30 = fsub float %sub26, %call20
  br label %do.body43

if.else:                                          ; preds = %if.end18
  %mul33 = fmul float %call20, 5.000000e-01
  %cmp34 = fcmp ogt float %call19, %mul33
  br i1 %cmp34, label %if.then35, label %do.body43

if.then35:                                        ; preds = %if.else
  %sub36 = fsub float %call19, %call20
  %cmp37 = fcmp ult float %sub36, %mul33
  br i1 %cmp37, label %do.body43, label %if.then38

if.then38:                                        ; preds = %if.then35
  %sub39 = fsub float %sub36, %call20
  br label %do.body43

do.body43:                                        ; preds = %if.then38, %if.then35, %if.else, %if.then29, %if.then25, %if.then22
  %x.addr.1 = phi float [ %sub30, %if.then29 ], [ %sub26, %if.then25 ], [ %call19, %if.then22 ], [ %sub39, %if.then38 ], [ %sub36, %if.then35 ], [ %call19, %if.else ]
  %2 = bitcast float %x.addr.1 to i32
  %xor = xor i32 %2, %and
  %3 = bitcast i32 %xor to float
  br label %return

return:                                           ; preds = %do.body43, %if.then16, %if.then
  %retval.0 = phi float [ %div, %if.then ], [ %mul17, %if.then16 ], [ %3, %do.body43 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define i32 @__ieee754_rem_pio2f(float %x, float* %y) #2 {
entry:
  %tx = alloca [3 x float], align 4
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 1061752793
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store float %x, float* %y, align 4, !tbaa !435
  %arrayidx1 = getelementptr inbounds float* %y, i32 1
  store float 0.000000e+00, float* %arrayidx1, align 4, !tbaa !435
  br label %return

if.end:                                           ; preds = %entry
  %cmp2 = icmp ult i32 %and, 1075235812
  br i1 %cmp2, label %if.then3, label %if.end42

if.then3:                                         ; preds = %if.end
  %cmp4 = icmp sgt i32 %0, 0
  br i1 %cmp4, label %if.then5, label %if.else23

if.then5:                                         ; preds = %if.then3
  %sub = fadd float %x, 0xBFF921F000000000
  %and6 = and i32 %0, 2147483632
  %cmp7 = icmp eq i32 %and6, 1070141392
  br i1 %cmp7, label %if.else, label %if.then8

if.then8:                                         ; preds = %if.then5
  %sub9 = fadd float %sub, 0xBEE6A88860000000
  store float %sub9, float* %y, align 4, !tbaa !435
  %sub12 = fsub float %sub, %sub9
  %sub13 = fadd float %sub12, 0xBEE6A88860000000
  %arrayidx14 = getelementptr inbounds float* %y, i32 1
  store float %sub13, float* %arrayidx14, align 4, !tbaa !435
  br label %return

if.else:                                          ; preds = %if.then5
  %sub15 = fadd float %sub, 0xBEE6A88000000000
  %sub16 = fadd float %sub15, 0xBDD0B46100000000
  store float %sub16, float* %y, align 4, !tbaa !435
  %sub19 = fsub float %sub15, %sub16
  %sub20 = fadd float %sub19, 0xBDD0B46100000000
  %arrayidx21 = getelementptr inbounds float* %y, i32 1
  store float %sub20, float* %arrayidx21, align 4, !tbaa !435
  br label %return

if.else23:                                        ; preds = %if.then3
  %add = fadd float %x, 0x3FF921F000000000
  %and24 = and i32 %0, 2147483632
  %cmp25 = icmp eq i32 %and24, 1070141392
  br i1 %cmp25, label %if.else33, label %if.then26

if.then26:                                        ; preds = %if.else23
  %add27 = fadd float %add, 0x3EE6A88860000000
  store float %add27, float* %y, align 4, !tbaa !435
  %sub30 = fsub float %add, %add27
  %add31 = fadd float %sub30, 0x3EE6A88860000000
  %arrayidx32 = getelementptr inbounds float* %y, i32 1
  store float %add31, float* %arrayidx32, align 4, !tbaa !435
  br label %return

if.else33:                                        ; preds = %if.else23
  %add34 = fadd float %add, 0x3EE6A88000000000
  %add35 = fadd float %add34, 0x3DD0B46100000000
  store float %add35, float* %y, align 4, !tbaa !435
  %sub38 = fsub float %add34, %add35
  %add39 = fadd float %sub38, 0x3DD0B46100000000
  %arrayidx40 = getelementptr inbounds float* %y, i32 1
  store float %add39, float* %arrayidx40, align 4, !tbaa !435
  br label %return

if.end42:                                         ; preds = %if.end
  %cmp43 = icmp ult i32 %and, 1128861569
  br i1 %cmp43, label %if.then44, label %if.end121

if.then44:                                        ; preds = %if.end42
  %call = tail call float @fabsf(float %x) #8
  %mul = fmul float %call, 0x3FE45F3080000000
  %add45 = fadd float %mul, 5.000000e-01
  %conv = fptosi float %add45 to i32
  %conv46 = sitofp i32 %conv to float
  %mul47 = fmul float %conv46, 0x3FF921F000000000
  %sub48 = fsub float %call, %mul47
  %mul49 = fmul float %conv46, 0x3EE6A88860000000
  %cmp50 = icmp slt i32 %conv, 32
  br i1 %cmp50, label %land.lhs.true, label %if.else60

land.lhs.true:                                    ; preds = %if.then44
  %and52 = and i32 %0, 2147483392
  %sub53 = add nsw i32 %conv, -1
  %arrayidx54 = getelementptr inbounds [32 x i32]* @npio2_hw, i32 0, i32 %sub53
  %1 = load i32* %arrayidx54, align 4, !tbaa !433
  %cmp55 = icmp eq i32 %and52, %1
  br i1 %cmp55, label %if.else60, label %if.then57

if.then57:                                        ; preds = %land.lhs.true
  %sub58 = fsub float %sub48, %mul49
  store float %sub58, float* %y, align 4, !tbaa !435
  br label %if.end105

if.else60:                                        ; preds = %land.lhs.true, %if.then44
  %shr262 = lshr i32 %and, 23
  %sub61 = fsub float %sub48, %mul49
  store float %sub61, float* %y, align 4, !tbaa !435
  %2 = bitcast float %sub61 to i32
  %shr69 = lshr i32 %2, 23
  %and70 = and i32 %shr69, 255
  %sub71 = sub i32 %shr262, %and70
  %cmp72 = icmp sgt i32 %sub71, 8
  br i1 %cmp72, label %if.then74, label %if.end105

if.then74:                                        ; preds = %if.else60
  %mul75 = fmul float %conv46, 0x3EE6A88000000000
  %sub76 = fsub float %sub48, %mul75
  %mul77 = fmul float %conv46, 0x3DD0B46100000000
  %sub78 = fsub float %sub48, %sub76
  %sub79 = fsub float %sub78, %mul75
  %sub80 = fsub float %mul77, %sub79
  %sub81 = fsub float %sub76, %sub80
  store float %sub81, float* %y, align 4, !tbaa !435
  %3 = bitcast float %sub81 to i32
  %shr89 = lshr i32 %3, 23
  %and90 = and i32 %shr89, 255
  %sub91 = sub i32 %shr262, %and90
  %cmp92 = icmp sgt i32 %sub91, 25
  br i1 %cmp92, label %if.then94, label %if.end105

if.then94:                                        ; preds = %if.then74
  %mul95 = fmul float %conv46, 0x3DD0B46000000000
  %sub96 = fsub float %sub76, %mul95
  %mul97 = fmul float %conv46, 0x3C91A62640000000
  %sub98 = fsub float %sub76, %sub96
  %sub99 = fsub float %sub98, %mul95
  %sub100 = fsub float %mul97, %sub99
  %sub101 = fsub float %sub96, %sub100
  store float %sub101, float* %y, align 4, !tbaa !435
  br label %if.end105

if.end105:                                        ; preds = %if.then94, %if.then74, %if.else60, %if.then57
  %4 = phi float [ %sub58, %if.then57 ], [ %sub101, %if.then94 ], [ %sub81, %if.then74 ], [ %sub61, %if.else60 ]
  %r.0 = phi float [ %sub48, %if.then57 ], [ %sub96, %if.then94 ], [ %sub76, %if.then74 ], [ %sub48, %if.else60 ]
  %w.0 = phi float [ %mul49, %if.then57 ], [ %sub100, %if.then94 ], [ %sub80, %if.then74 ], [ %mul49, %if.else60 ]
  %sub107 = fsub float %r.0, %4
  %sub108 = fsub float %sub107, %w.0
  %arrayidx109 = getelementptr inbounds float* %y, i32 1
  store float %sub108, float* %arrayidx109, align 4, !tbaa !435
  %cmp110 = icmp slt i32 %0, 0
  br i1 %cmp110, label %if.then112, label %return

if.then112:                                       ; preds = %if.end105
  %sub114 = fsub float -0.000000e+00, %4
  store float %sub114, float* %y, align 4, !tbaa !435
  %sub117 = fsub float -0.000000e+00, %sub108
  store float %sub117, float* %arrayidx109, align 4, !tbaa !435
  %sub119 = sub nsw i32 0, %conv
  br label %return

if.end121:                                        ; preds = %if.end42
  %cmp122 = icmp ult i32 %and, 2139095040
  br i1 %cmp122, label %if.end128, label %if.then124

if.then124:                                       ; preds = %if.end121
  %sub125 = fsub float %x, %x
  %arrayidx126 = getelementptr inbounds float* %y, i32 1
  store float %sub125, float* %arrayidx126, align 4, !tbaa !435
  store float %sub125, float* %y, align 4, !tbaa !435
  br label %return

if.end128:                                        ; preds = %if.end121
  %shr129261 = lshr i32 %and, 23
  %sub130 = add nsw i32 %shr129261, -134
  %shl = shl i32 %sub130, 23
  %sub132 = sub nsw i32 %and, %shl
  %5 = bitcast i32 %sub132 to float
  %conv138 = fptosi float %5 to i32
  %conv139 = sitofp i32 %conv138 to float
  %arrayidx140 = getelementptr inbounds [3 x float]* %tx, i32 0, i32 0
  store float %conv139, float* %arrayidx140, align 4, !tbaa !435
  %sub142 = fsub float %5, %conv139
  %mul143 = fmul float %sub142, 2.560000e+02
  %conv138.1 = fptosi float %mul143 to i32
  %conv139.1 = sitofp i32 %conv138.1 to float
  %arrayidx140.1 = getelementptr inbounds [3 x float]* %tx, i32 0, i32 1
  store float %conv139.1, float* %arrayidx140.1, align 4, !tbaa !435
  %sub142.1 = fsub float %mul143, %conv139.1
  %mul143.1 = fmul float %sub142.1, 2.560000e+02
  %arrayidx144 = getelementptr inbounds [3 x float]* %tx, i32 0, i32 2
  store float %mul143.1, float* %arrayidx144, align 4, !tbaa !435
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %if.end128
  %nx.0 = phi i32 [ 3, %if.end128 ], [ %sub145, %while.cond ]
  %sub145 = add nsw i32 %nx.0, -1
  %arrayidx146 = getelementptr inbounds [3 x float]* %tx, i32 0, i32 %sub145
  %6 = load float* %arrayidx146, align 4, !tbaa !435
  %cmp147 = fcmp oeq float %6, 0.000000e+00
  br i1 %cmp147, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond
  %nx.0.lcssa = phi i32 [ %nx.0, %while.cond ]
  %call149 = call i32 @__kernel_rem_pio2f(float* %arrayidx140, float* %y, i32 %sub130, i32 %nx.0.lcssa, i32 2, i32* getelementptr inbounds ([198 x i32]* @two_over_pi, i32 0, i32 0)) #8
  %cmp150 = icmp slt i32 %0, 0
  br i1 %cmp150, label %if.then152, label %return

if.then152:                                       ; preds = %while.end
  %7 = load float* %y, align 4, !tbaa !435
  %sub154 = fsub float -0.000000e+00, %7
  store float %sub154, float* %y, align 4, !tbaa !435
  %arrayidx156 = getelementptr inbounds float* %y, i32 1
  %8 = load float* %arrayidx156, align 4, !tbaa !435
  %sub157 = fsub float -0.000000e+00, %8
  store float %sub157, float* %arrayidx156, align 4, !tbaa !435
  %sub159 = sub nsw i32 0, %call149
  br label %return

return:                                           ; preds = %if.then152, %while.end, %if.then124, %if.then112, %if.end105, %if.else33, %if.then26, %if.else, %if.then8, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ %sub119, %if.then112 ], [ %sub159, %if.then152 ], [ 0, %if.then124 ], [ 1, %if.else ], [ 1, %if.then8 ], [ -1, %if.else33 ], [ -1, %if.then26 ], [ %conv, %if.end105 ], [ %call149, %while.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_scalbf(float %x, float %fn) #2 {
entry:
  %call = tail call i32 @__fpclassifyf(float %x) #8
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %call1 = tail call i32 @__fpclassifyf(float %fn) #8
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %mul = fmul float %x, %fn
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %call3 = tail call i32 @finitef(float %fn) #8
  %tobool = icmp eq i32 %call3, 0
  br i1 %tobool, label %if.then4, label %if.end8

if.then4:                                         ; preds = %if.end
  %cmp5 = fcmp ogt float %fn, 0.000000e+00
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then4
  %mul7 = fmul float %x, %fn
  br label %return

if.else:                                          ; preds = %if.then4
  %sub = fsub float -0.000000e+00, %fn
  %div = fdiv float %x, %sub
  br label %return

if.end8:                                          ; preds = %if.end
  %call9 = tail call float @rintf(float %fn) #8
  %cmp10 = fcmp une float %call9, %fn
  br i1 %cmp10, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end8
  %sub12 = fsub float %fn, %fn
  %div14 = fdiv float %sub12, %sub12
  br label %return

if.end15:                                         ; preds = %if.end8
  %cmp16 = fcmp ogt float %fn, 6.500000e+04
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end15
  %call18 = tail call float @scalbnf(float %x, i32 65000) #8
  br label %return

if.end19:                                         ; preds = %if.end15
  %cmp21 = fcmp olt float %fn, -6.500000e+04
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %call23 = tail call float @scalbnf(float %x, i32 -65000) #8
  br label %return

if.end24:                                         ; preds = %if.end19
  %conv = fptosi float %fn to i32
  %call25 = tail call float @scalbnf(float %x, i32 %conv) #8
  br label %return

return:                                           ; preds = %if.end24, %if.then22, %if.then17, %if.then11, %if.else, %if.then6, %if.then
  %retval.0 = phi float [ %mul, %if.then ], [ %div14, %if.then11 ], [ %call18, %if.then17 ], [ %call23, %if.then22 ], [ %call25, %if.end24 ], [ %mul7, %if.then6 ], [ %div, %if.else ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_sinhf(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %add = fadd float %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp slt i32 %0, 0
  %. = select i1 %cmp1, float -5.000000e-01, float 5.000000e-01
  %cmp4 = icmp ult i32 %and, 1102053376
  br i1 %cmp4, label %if.then5, label %if.end25

if.then5:                                         ; preds = %if.end
  %cmp6 = icmp ult i32 %and, 830472192
  %add8 = fadd float %x, 0x479E17B840000000
  %cmp9 = fcmp ogt float %add8, 1.000000e+00
  %or.cond = and i1 %cmp6, %cmp9
  br i1 %or.cond, label %return, label %if.end12

if.end12:                                         ; preds = %if.then5
  %call = tail call float @fabsf(float %x) #8
  %call13 = tail call float @expm1f(float %call) #8
  %cmp14 = icmp ult i32 %and, 1065353216
  br i1 %cmp14, label %if.then15, label %if.end20

if.then15:                                        ; preds = %if.end12
  %mul = fmul float %call13, 2.000000e+00
  %mul16 = fmul float %call13, %call13
  %add17 = fadd float %call13, 1.000000e+00
  %div = fdiv float %mul16, %add17
  %sub18 = fsub float %mul, %div
  %mul19 = fmul float %., %sub18
  br label %return

if.end20:                                         ; preds = %if.end12
  %add21 = fadd float %call13, 1.000000e+00
  %div22 = fdiv float %call13, %add21
  %add23 = fadd float %call13, %div22
  %mul24 = fmul float %., %add23
  br label %return

if.end25:                                         ; preds = %if.end
  %cmp26 = icmp ult i32 %and, 1118925336
  br i1 %cmp26, label %if.then27, label %if.end31

if.then27:                                        ; preds = %if.end25
  %call28 = tail call float @fabsf(float %x) #8
  %call29 = tail call float @expf(float %call28) #8
  %mul30 = fmul float %., %call29
  br label %return

if.end31:                                         ; preds = %if.end25
  %cmp32 = icmp ult i32 %and, 1119016189
  br i1 %cmp32, label %if.then33, label %if.end39

if.then33:                                        ; preds = %if.end31
  %call34 = tail call float @fabsf(float %x) #8
  %mul35 = fmul float %call34, 5.000000e-01
  %call36 = tail call float @expf(float %mul35) #8
  %mul37 = fmul float %., %call36
  %mul38 = fmul float %call36, %mul37
  br label %return

if.end39:                                         ; preds = %if.end31
  %mul40 = fmul float %x, 0x479E17B840000000
  br label %return

return:                                           ; preds = %if.end39, %if.then33, %if.then27, %if.end20, %if.then15, %if.then5, %if.then
  %retval.0 = phi float [ %mul19, %if.then15 ], [ %mul24, %if.end20 ], [ %mul30, %if.then27 ], [ %mul38, %if.then33 ], [ %mul40, %if.end39 ], [ %add, %if.then ], [ %x, %if.then5 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define float @__ieee754_sqrtf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %mul = fmul float %x, %x
  %add = fadd float %mul, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %return, label %if.end3

if.end3:                                          ; preds = %if.end
  %cmp4 = icmp slt i32 %0, 0
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end3
  %sub = fsub float %x, %x
  %div = fdiv float %sub, %sub
  br label %return

if.end7:                                          ; preds = %if.end3
  %shr = ashr i32 %0, 23
  %cmp8 = icmp ult i32 %and, 8388608
  br i1 %cmp8, label %for.cond.preheader, label %if.end14

for.cond.preheader:                               ; preds = %if.end7
  %and10101 = and i32 %0, 8388608
  %cmp11102 = icmp eq i32 %and10101, 0
  br i1 %cmp11102, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.0104 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %ix.0103 = phi i32 [ %shl, %for.body ], [ %0, %for.body.preheader ]
  %shl = shl i32 %ix.0103, 1
  %inc = add nsw i32 %i.0104, 1
  %and10 = and i32 %shl, 8388608
  %cmp11 = icmp eq i32 %and10, 0
  br i1 %cmp11, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  %inc.lcssa = phi i32 [ %inc, %for.body ]
  %shl.lcssa = phi i32 [ %shl, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %i.0.lcssa = phi i32 [ 0, %for.cond.preheader ], [ %inc.lcssa, %for.end.loopexit ]
  %ix.0.lcssa = phi i32 [ %0, %for.cond.preheader ], [ %shl.lcssa, %for.end.loopexit ]
  %sub12.neg = add nsw i32 %shr, 1
  %sub13 = sub i32 %sub12.neg, %i.0.lcssa
  br label %if.end14

if.end14:                                         ; preds = %for.end, %if.end7
  %ix.1 = phi i32 [ %ix.0.lcssa, %for.end ], [ %0, %if.end7 ]
  %m.0 = phi i32 [ %sub13, %for.end ], [ %shr, %if.end7 ]
  %sub15 = add nsw i32 %m.0, -127
  %and16 = and i32 %ix.1, 8388607
  %or = or i32 %and16, 8388608
  %and17 = and i32 %sub15, 1
  %or.add19 = shl nuw nsw i32 %or, %and17
  br label %while.body

while.body:                                       ; preds = %if.end30, %if.end14
  %ix.3100.in = phi i32 [ %or.add19, %if.end14 ], [ %ix.4, %if.end30 ]
  %r.099 = phi i32 [ 16777216, %if.end14 ], [ %shr32, %if.end30 ]
  %q.098 = phi i32 [ 0, %if.end14 ], [ %q.1, %if.end30 ]
  %s.097 = phi i32 [ 0, %if.end14 ], [ %s.1, %if.end30 ]
  %ix.3100 = shl nsw i32 %ix.3100.in, 1
  %add24 = add i32 %r.099, %s.097
  %cmp25 = icmp slt i32 %ix.3100, %add24
  br i1 %cmp25, label %if.end30, label %if.then26

if.then26:                                        ; preds = %while.body
  %add27 = add i32 %add24, %r.099
  %sub28 = sub nsw i32 %ix.3100, %add24
  %add29 = add i32 %r.099, %q.098
  br label %if.end30

if.end30:                                         ; preds = %if.then26, %while.body
  %ix.4 = phi i32 [ %sub28, %if.then26 ], [ %ix.3100, %while.body ]
  %s.1 = phi i32 [ %add27, %if.then26 ], [ %s.097, %while.body ]
  %q.1 = phi i32 [ %add29, %if.then26 ], [ %q.098, %while.body ]
  %shr32 = lshr i32 %r.099, 1
  %cmp23 = icmp eq i32 %shr32, 0
  br i1 %cmp23, label %while.end, label %while.body

while.end:                                        ; preds = %if.end30
  %q.1.lcssa = phi i32 [ %q.1, %if.end30 ]
  %ix.4.lcssa = phi i32 [ %ix.4, %if.end30 ]
  %shr2195 = lshr i32 %sub15, 1
  %cmp33 = icmp eq i32 %ix.4.lcssa, 0
  br i1 %cmp33, label %if.end44, label %if.else

if.else:                                          ; preds = %while.end
  %and40 = and i32 %q.1.lcssa, 1
  %add41 = add nsw i32 %and40, %q.1.lcssa
  br label %if.end44

if.end44:                                         ; preds = %if.else, %while.end
  %q.2 = phi i32 [ %add41, %if.else ], [ %q.1.lcssa, %while.end ]
  %shr45 = ashr i32 %q.2, 1
  %shl47 = shl i32 %shr2195, 23
  %add46 = add i32 %shl47, 1056964608
  %add48 = add i32 %add46, %shr45
  %1 = bitcast i32 %add48 to float
  br label %return

return:                                           ; preds = %if.end44, %if.then5, %if.end, %if.then
  %retval.0 = phi float [ %div, %if.then5 ], [ %1, %if.end44 ], [ %add, %if.then ], [ %x, %if.end ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_tgammaf(float %x) #2 {
entry:
  %signgam_local = alloca i32, align 4
  %call = call float @__ieee754_lgammaf_r(float %x, i32* %signgam_local) #8
  %call1 = call float @expf(float %call) #8
  %0 = load i32* %signgam_local, align 4, !tbaa !433
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sub = fsub float -0.000000e+00, %call1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %y.0 = phi float [ %sub, %if.then ], [ %call1, %entry ]
  ret float %y.0
}

; Function Attrs: nounwind
define double @__ieee754_hypot(double %x, double %y) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %1 = bitcast double %y to i64
  %gh_u2.sroa.0.4.extract.shift = lshr i64 %1, 32
  %gh_u2.sroa.0.4.extract.trunc = trunc i64 %gh_u2.sroa.0.4.extract.shift to i32
  %and7 = and i32 %gh_u2.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and7, %and
  %and.and7 = select i1 %cmp, i32 %and, i32 %and7
  %and7.and = select i1 %cmp, i32 %and7, i32 %and
  %x.y = select i1 %cmp, double %x, double %y
  %y.x = select i1 %cmp, double %y, double %x
  %2 = bitcast double %y.x to i64
  %sh_u.sroa.0.4.insert.ext = zext i32 %and7.and to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw nsw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %2, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.mask, %sh_u.sroa.0.4.insert.shift
  %3 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  %4 = bitcast double %x.y to i64
  %sh_u15.sroa.0.4.insert.ext = zext i32 %and.and7 to i64
  %sh_u15.sroa.0.4.insert.shift = shl nuw nsw i64 %sh_u15.sroa.0.4.insert.ext, 32
  %sh_u15.sroa.0.4.insert.mask = and i64 %4, 4294967295
  %sh_u15.sroa.0.4.insert.insert = or i64 %sh_u15.sroa.0.4.insert.mask, %sh_u15.sroa.0.4.insert.shift
  %5 = bitcast i64 %sh_u15.sroa.0.4.insert.insert to double
  %sub = sub nsw i32 %and7.and, %and.and7
  %cmp21 = icmp sgt i32 %sub, 62914560
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %entry
  %add = fadd double %3, %5
  br label %return

if.end23:                                         ; preds = %entry
  %cmp24 = icmp ugt i32 %and7.and, 1596981248
  br i1 %cmp24, label %if.then25, label %if.end65

if.then25:                                        ; preds = %if.end23
  %cmp26 = icmp ugt i32 %and7.and, 2146435071
  br i1 %cmp26, label %if.then27, label %if.end47

if.then27:                                        ; preds = %if.then25
  %add28 = fadd double %3, %5
  %gl_u.sroa.0.0.extract.trunc = trunc i64 %2 to i32
  %and33 = and i32 %and7.and, 1048575
  %or = or i32 %gl_u.sroa.0.0.extract.trunc, %and33
  %cmp34 = icmp eq i32 %or, 0
  %.add28 = select i1 %cmp34, double %3, double %add28
  %gl_u38.sroa.0.0.extract.trunc = trunc i64 %4 to i32
  %xor = xor i32 %and.and7, 2146435072
  %or43 = or i32 %gl_u38.sroa.0.0.extract.trunc, %xor
  %cmp44 = icmp eq i32 %or43, 0
  %w.1 = select i1 %cmp44, double %5, double %.add28
  br label %return

if.end47:                                         ; preds = %if.then25
  %sub48 = add nsw i32 %and7.and, -629145600
  %sub49 = add nsw i32 %and.and7, -629145600
  %sh_u52.sroa.0.4.insert.ext = zext i32 %sub48 to i64
  %sh_u52.sroa.0.4.insert.shift = shl nuw i64 %sh_u52.sroa.0.4.insert.ext, 32
  %sh_u52.sroa.0.4.insert.insert = or i64 %sh_u52.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %6 = bitcast i64 %sh_u52.sroa.0.4.insert.insert to double
  %sh_u59.sroa.0.4.insert.ext = zext i32 %sub49 to i64
  %sh_u59.sroa.0.4.insert.shift = shl nuw i64 %sh_u59.sroa.0.4.insert.ext, 32
  %sh_u59.sroa.0.4.insert.insert = or i64 %sh_u59.sroa.0.4.insert.shift, %sh_u15.sroa.0.4.insert.mask
  %7 = bitcast i64 %sh_u59.sroa.0.4.insert.insert to double
  br label %if.end65

if.end65:                                         ; preds = %if.end47, %if.end23
  %hb.1 = phi i32 [ %sub49, %if.end47 ], [ %and.and7, %if.end23 ]
  %ha.1 = phi i32 [ %sub48, %if.end47 ], [ %and7.and, %if.end23 ]
  %k.0 = phi i32 [ 600, %if.end47 ], [ 0, %if.end23 ]
  %b.1 = phi double [ %7, %if.end47 ], [ %5, %if.end23 ]
  %a.1 = phi double [ %6, %if.end47 ], [ %3, %if.end23 ]
  %cmp66 = icmp slt i32 %hb.1, 548405248
  br i1 %cmp66, label %if.then67, label %if.end109

if.then67:                                        ; preds = %if.end65
  %cmp68 = icmp slt i32 %hb.1, 1048576
  br i1 %cmp68, label %do.body71, label %if.else90

do.body71:                                        ; preds = %if.then67
  %8 = bitcast double %b.1 to i64
  %gl_u72.sroa.0.0.extract.trunc = trunc i64 %8 to i32
  %or77 = or i32 %gl_u72.sroa.0.0.extract.trunc, %hb.1
  %cmp78 = icmp eq i32 %or77, 0
  br i1 %cmp78, label %return, label %if.end80

if.end80:                                         ; preds = %do.body71
  %mul = fmul double %b.1, 0x7FD0000000000000
  %mul88 = fmul double %a.1, 0x7FD0000000000000
  %sub89262 = or i32 %k.0, -1022
  br label %if.end109

if.else90:                                        ; preds = %if.then67
  %add91 = add nsw i32 %ha.1, 629145600
  %add92 = add nsw i32 %hb.1, 629145600
  %sub93 = add nsw i32 %k.0, -600
  %9 = bitcast double %a.1 to i64
  %sh_u95.sroa.0.4.insert.ext = zext i32 %add91 to i64
  %sh_u95.sroa.0.4.insert.shift = shl nuw i64 %sh_u95.sroa.0.4.insert.ext, 32
  %sh_u95.sroa.0.4.insert.mask = and i64 %9, 4294967295
  %sh_u95.sroa.0.4.insert.insert = or i64 %sh_u95.sroa.0.4.insert.mask, %sh_u95.sroa.0.4.insert.shift
  %10 = bitcast i64 %sh_u95.sroa.0.4.insert.insert to double
  %11 = bitcast double %b.1 to i64
  %sh_u102.sroa.0.4.insert.ext = zext i32 %add92 to i64
  %sh_u102.sroa.0.4.insert.shift = shl nuw i64 %sh_u102.sroa.0.4.insert.ext, 32
  %sh_u102.sroa.0.4.insert.mask = and i64 %11, 4294967295
  %sh_u102.sroa.0.4.insert.insert = or i64 %sh_u102.sroa.0.4.insert.mask, %sh_u102.sroa.0.4.insert.shift
  %12 = bitcast i64 %sh_u102.sroa.0.4.insert.insert to double
  br label %if.end109

if.end109:                                        ; preds = %if.else90, %if.end80, %if.end65
  %hb.2 = phi i32 [ %hb.1, %if.end80 ], [ %add92, %if.else90 ], [ %hb.1, %if.end65 ]
  %ha.2 = phi i32 [ %ha.1, %if.end80 ], [ %add91, %if.else90 ], [ %ha.1, %if.end65 ]
  %k.1 = phi i32 [ %sub89262, %if.end80 ], [ %sub93, %if.else90 ], [ %k.0, %if.end65 ]
  %b.2 = phi double [ %mul, %if.end80 ], [ %12, %if.else90 ], [ %b.1, %if.end65 ]
  %a.2 = phi double [ %mul88, %if.end80 ], [ %10, %if.else90 ], [ %a.1, %if.end65 ]
  %sub110 = fsub double %a.2, %b.2
  %cmp111 = fcmp ogt double %sub110, %b.2
  br i1 %cmp111, label %if.then112, label %if.else128

if.then112:                                       ; preds = %if.end109
  %sh_u114.sroa.0.4.insert.ext = zext i32 %ha.2 to i64
  %sh_u114.sroa.0.4.insert.shift = shl nuw i64 %sh_u114.sroa.0.4.insert.ext, 32
  %13 = bitcast i64 %sh_u114.sroa.0.4.insert.shift to double
  %sub120 = fsub double %a.2, %13
  %mul121 = fmul double %13, %13
  %14 = fmul double %b.2, %b.2
  %mul123 = fsub double -0.000000e+00, %14
  %add124 = fadd double %a.2, %13
  %mul125 = fmul double %sub120, %add124
  %sub126 = fsub double %mul123, %mul125
  %sub127 = fsub double %mul121, %sub126
  %call = tail call double @__ieee754_sqrt(double %sub127) #8
  br label %if.end156

if.else128:                                       ; preds = %if.end109
  %add129 = fadd double %a.2, %a.2
  %sh_u131.sroa.0.4.insert.ext = zext i32 %hb.2 to i64
  %sh_u131.sroa.0.4.insert.shift = shl nuw i64 %sh_u131.sroa.0.4.insert.ext, 32
  %15 = bitcast i64 %sh_u131.sroa.0.4.insert.shift to double
  %sub137 = fsub double %b.2, %15
  %add141 = add nsw i32 %ha.2, 1048576
  %sh_u139.sroa.0.4.insert.ext = zext i32 %add141 to i64
  %sh_u139.sroa.0.4.insert.shift = shl nuw i64 %sh_u139.sroa.0.4.insert.ext, 32
  %16 = bitcast i64 %sh_u139.sroa.0.4.insert.shift to double
  %sub146 = fsub double %add129, %16
  %mul147 = fmul double %15, %16
  %17 = fmul double %sub110, %sub110
  %mul149 = fsub double -0.000000e+00, %17
  %mul150 = fmul double %sub137, %16
  %mul151 = fmul double %b.2, %sub146
  %add152 = fadd double %mul150, %mul151
  %sub153 = fsub double %mul149, %add152
  %sub154 = fsub double %mul147, %sub153
  %call155 = tail call double @__ieee754_sqrt(double %sub154) #8
  br label %if.end156

if.end156:                                        ; preds = %if.else128, %if.then112
  %w.2 = phi double [ %call, %if.then112 ], [ %call155, %if.else128 ]
  %cmp157 = icmp eq i32 %k.1, 0
  br i1 %cmp157, label %return, label %if.then158

if.then158:                                       ; preds = %if.end156
  %shl = shl nsw i32 %k.1, 20
  %add168 = add i32 %shl, 1072693248
  %sh_u166.sroa.0.4.insert.ext = zext i32 %add168 to i64
  %sh_u166.sroa.0.4.insert.shift = shl nuw i64 %sh_u166.sroa.0.4.insert.ext, 32
  %18 = bitcast i64 %sh_u166.sroa.0.4.insert.shift to double
  %mul173 = fmul double %18, %w.2
  br label %return

return:                                           ; preds = %if.then158, %if.end156, %do.body71, %if.then27, %if.then22
  %retval.0 = phi double [ %add, %if.then22 ], [ %mul173, %if.then158 ], [ %w.1, %if.then27 ], [ %a.1, %do.body71 ], [ %w.2, %if.end156 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_j0(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mul = fmul double %x, %x
  %div = fdiv double 1.000000e+00, %mul
  br label %return

if.end:                                           ; preds = %entry
  %call = tail call double @fabs(double %x) #8
  %cmp1 = icmp ugt i32 %and, 1073741823
  br i1 %cmp1, label %if.then2, label %if.end32

if.then2:                                         ; preds = %if.end
  %call3 = tail call double @sin(double %call) #8
  %call4 = tail call double @cos(double %call) #8
  %sub = fsub double %call3, %call4
  %add = fadd double %call3, %call4
  %cmp5 = icmp ult i32 %and, 2145386496
  br i1 %cmp5, label %if.then6, label %if.then18

if.then6:                                         ; preds = %if.then2
  %add7 = fadd double %call, %call
  %call8 = tail call double @cos(double %add7) #8
  %sub9 = fsub double -0.000000e+00, %call8
  %mul10 = fmul double %call3, %call4
  %cmp11 = fcmp olt double %mul10, 0.000000e+00
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.then6
  %div13 = fdiv double %sub9, %sub
  br label %if.end16

if.else:                                          ; preds = %if.then6
  %div14 = fdiv double %sub9, %add
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then12
  %cc.0 = phi double [ %div13, %if.then12 ], [ %add, %if.else ]
  %ss.0 = phi double [ %sub, %if.then12 ], [ %div14, %if.else ]
  %cmp17 = icmp ugt i32 %and, 1207959552
  br i1 %cmp17, label %if.then18, label %if.else22

if.then18:                                        ; preds = %if.end16, %if.then2
  %cc.0156 = phi double [ %cc.0, %if.end16 ], [ %add, %if.then2 ]
  %mul19 = fmul double %cc.0156, 0x3FE20DD750429B6D
  %call20 = tail call double @__ieee754_sqrt(double %call) #8
  %div21 = fdiv double %mul19, %call20
  br label %return

if.else22:                                        ; preds = %if.end16
  %1 = bitcast double %call to i64
  %gh_u.sroa.0.4.extract.shift.i = lshr i64 %1, 32
  %gh_u.sroa.0.4.extract.trunc.i = trunc i64 %gh_u.sroa.0.4.extract.shift.i to i32
  %and.i = and i32 %gh_u.sroa.0.4.extract.trunc.i, 2147483647
  %cmp.i = icmp ugt i32 %and.i, 1102053375
  br i1 %cmp.i, label %qzero.exit, label %if.else.i

if.else.i:                                        ; preds = %if.else22
  %cmp1.i = icmp ugt i32 %and.i, 1075838975
  br i1 %cmp1.i, label %if.else.i126, label %if.else3.i

if.else3.i:                                       ; preds = %if.else.i
  %cmp4.i = icmp ugt i32 %and.i, 1074933386
  br i1 %cmp4.i, label %if.else.i126, label %if.else6.i

if.else6.i:                                       ; preds = %if.else3.i
  %cmp7.i = icmp ugt i32 %and.i, 1074191212
  %..i = select i1 %cmp7.i, double* getelementptr inbounds ([5 x double]* @pS320, i32 0, i32 0), double* getelementptr inbounds ([5 x double]* @pS222, i32 0, i32 0)
  %.68.i = select i1 %cmp7.i, double* getelementptr inbounds ([6 x double]* @pR319, i32 0, i32 0), double* getelementptr inbounds ([6 x double]* @pR221, i32 0, i32 0)
  br label %if.else.i126

if.else.i126:                                     ; preds = %if.else6.i, %if.else3.i, %if.else.i
  %q.0.i = phi double* [ getelementptr inbounds ([5 x double]* @pS816, i32 0, i32 0), %if.else.i ], [ getelementptr inbounds ([5 x double]* @pS518, i32 0, i32 0), %if.else3.i ], [ %..i, %if.else6.i ]
  %p.0.i = phi double* [ getelementptr inbounds ([6 x double]* @pR815, i32 0, i32 0), %if.else.i ], [ getelementptr inbounds ([6 x double]* @pR517, i32 0, i32 0), %if.else3.i ], [ %.68.i, %if.else6.i ]
  %mul.i = fmul double %call, %call
  %div.i = fdiv double 1.000000e+00, %mul.i
  %2 = load double* %p.0.i, align 8, !tbaa !429
  %arrayidx13.i = getelementptr inbounds double* %p.0.i, i32 1
  %3 = load double* %arrayidx13.i, align 8, !tbaa !429
  %arrayidx14.i = getelementptr inbounds double* %p.0.i, i32 2
  %4 = load double* %arrayidx14.i, align 8, !tbaa !429
  %arrayidx15.i = getelementptr inbounds double* %p.0.i, i32 3
  %5 = load double* %arrayidx15.i, align 8, !tbaa !429
  %arrayidx16.i = getelementptr inbounds double* %p.0.i, i32 4
  %6 = load double* %arrayidx16.i, align 8, !tbaa !429
  %arrayidx17.i = getelementptr inbounds double* %p.0.i, i32 5
  %7 = load double* %arrayidx17.i, align 8, !tbaa !429
  %mul18.i = fmul double %div.i, %7
  %add.i = fadd double %6, %mul18.i
  %mul19.i = fmul double %div.i, %add.i
  %add20.i = fadd double %5, %mul19.i
  %mul21.i = fmul double %div.i, %add20.i
  %add22.i = fadd double %4, %mul21.i
  %mul23.i = fmul double %div.i, %add22.i
  %add24.i = fadd double %3, %mul23.i
  %mul25.i = fmul double %div.i, %add24.i
  %add26.i = fadd double %2, %mul25.i
  %8 = load double* %q.0.i, align 8, !tbaa !429
  %arrayidx28.i = getelementptr inbounds double* %q.0.i, i32 1
  %9 = load double* %arrayidx28.i, align 8, !tbaa !429
  %arrayidx29.i = getelementptr inbounds double* %q.0.i, i32 2
  %10 = load double* %arrayidx29.i, align 8, !tbaa !429
  %arrayidx30.i = getelementptr inbounds double* %q.0.i, i32 3
  %11 = load double* %arrayidx30.i, align 8, !tbaa !429
  %arrayidx31.i = getelementptr inbounds double* %q.0.i, i32 4
  %12 = load double* %arrayidx31.i, align 8, !tbaa !429
  %mul32.i = fmul double %div.i, %12
  %add33.i = fadd double %11, %mul32.i
  %mul34.i = fmul double %div.i, %add33.i
  %add35.i = fadd double %10, %mul34.i
  %mul36.i = fmul double %div.i, %add35.i
  %add37.i = fadd double %9, %mul36.i
  %mul38.i = fmul double %div.i, %add37.i
  %add39.i = fadd double %8, %mul38.i
  %mul40.i = fmul double %div.i, %add39.i
  %add41.i = fadd double %mul40.i, 1.000000e+00
  %div42.i = fdiv double %add26.i, %add41.i
  %add43.i = fadd double %div42.i, 1.000000e+00
  br i1 %cmp1.i, label %if.end12.i153, label %if.else3.i128

if.else3.i128:                                    ; preds = %if.else.i126
  %cmp4.i127 = icmp ugt i32 %and.i, 1074933386
  br i1 %cmp4.i127, label %if.end12.i153, label %if.else6.i131

if.else6.i131:                                    ; preds = %if.else3.i128
  %cmp7.i129 = icmp ugt i32 %and.i, 1074191212
  %..i130 = select i1 %cmp7.i129, double* getelementptr inbounds ([6 x double]* @qS312, i32 0, i32 0), double* getelementptr inbounds ([6 x double]* @qS214, i32 0, i32 0)
  %.77.i = select i1 %cmp7.i129, double* getelementptr inbounds ([6 x double]* @qR311, i32 0, i32 0), double* getelementptr inbounds ([6 x double]* @qR213, i32 0, i32 0)
  br label %if.end12.i153

if.end12.i153:                                    ; preds = %if.else6.i131, %if.else3.i128, %if.else.i126
  %q.0.i132 = phi double* [ getelementptr inbounds ([6 x double]* @qS88, i32 0, i32 0), %if.else.i126 ], [ getelementptr inbounds ([6 x double]* @qS510, i32 0, i32 0), %if.else3.i128 ], [ %..i130, %if.else6.i131 ]
  %p.0.i133 = phi double* [ getelementptr inbounds ([6 x double]* @qR87, i32 0, i32 0), %if.else.i126 ], [ getelementptr inbounds ([6 x double]* @qR59, i32 0, i32 0), %if.else3.i128 ], [ %.77.i, %if.else6.i131 ]
  %13 = load double* %p.0.i133, align 8, !tbaa !429
  %arrayidx14.i135 = getelementptr inbounds double* %p.0.i133, i32 1
  %14 = load double* %arrayidx14.i135, align 8, !tbaa !429
  %arrayidx15.i136 = getelementptr inbounds double* %p.0.i133, i32 2
  %15 = load double* %arrayidx15.i136, align 8, !tbaa !429
  %arrayidx16.i137 = getelementptr inbounds double* %p.0.i133, i32 3
  %16 = load double* %arrayidx16.i137, align 8, !tbaa !429
  %arrayidx17.i138 = getelementptr inbounds double* %p.0.i133, i32 4
  %17 = load double* %arrayidx17.i138, align 8, !tbaa !429
  %arrayidx18.i = getelementptr inbounds double* %p.0.i133, i32 5
  %18 = load double* %arrayidx18.i, align 8, !tbaa !429
  %mul19.i139 = fmul double %div.i, %18
  %add.i140 = fadd double %17, %mul19.i139
  %mul20.i = fmul double %div.i, %add.i140
  %add21.i = fadd double %16, %mul20.i
  %mul22.i = fmul double %div.i, %add21.i
  %add23.i = fadd double %15, %mul22.i
  %mul24.i = fmul double %div.i, %add23.i
  %add25.i = fadd double %14, %mul24.i
  %mul26.i = fmul double %div.i, %add25.i
  %add27.i = fadd double %13, %mul26.i
  %19 = load double* %q.0.i132, align 8, !tbaa !429
  %arrayidx29.i141 = getelementptr inbounds double* %q.0.i132, i32 1
  %20 = load double* %arrayidx29.i141, align 8, !tbaa !429
  %arrayidx30.i142 = getelementptr inbounds double* %q.0.i132, i32 2
  %21 = load double* %arrayidx30.i142, align 8, !tbaa !429
  %arrayidx31.i143 = getelementptr inbounds double* %q.0.i132, i32 3
  %22 = load double* %arrayidx31.i143, align 8, !tbaa !429
  %arrayidx32.i = getelementptr inbounds double* %q.0.i132, i32 4
  %23 = load double* %arrayidx32.i, align 8, !tbaa !429
  %arrayidx33.i = getelementptr inbounds double* %q.0.i132, i32 5
  %24 = load double* %arrayidx33.i, align 8, !tbaa !429
  %mul34.i144 = fmul double %div.i, %24
  %add35.i145 = fadd double %23, %mul34.i144
  %mul36.i146 = fmul double %div.i, %add35.i145
  %add37.i147 = fadd double %22, %mul36.i146
  %mul38.i148 = fmul double %div.i, %add37.i147
  %add39.i149 = fadd double %21, %mul38.i148
  %mul40.i150 = fmul double %div.i, %add39.i149
  %add41.i151 = fadd double %20, %mul40.i150
  %mul42.i = fmul double %div.i, %add41.i151
  %add43.i152 = fadd double %19, %mul42.i
  %mul44.i = fmul double %div.i, %add43.i152
  %add45.i = fadd double %mul44.i, 1.000000e+00
  %div46.i = fdiv double %add27.i, %add45.i
  %add47.i = fadd double %div46.i, -1.250000e-01
  br label %qzero.exit

qzero.exit:                                       ; preds = %if.end12.i153, %if.else22
  %retval.0.i157 = phi double [ %add43.i, %if.end12.i153 ], [ 1.000000e+00, %if.else22 ]
  %.pn.i = phi double [ %add47.i, %if.end12.i153 ], [ -1.250000e-01, %if.else22 ]
  %retval.0.i154 = fdiv double %.pn.i, %call
  %mul25 = fmul double %cc.0, %retval.0.i157
  %mul26 = fmul double %ss.0, %retval.0.i154
  %sub27 = fsub double %mul25, %mul26
  %mul28 = fmul double %sub27, 0x3FE20DD750429B6D
  %call29 = tail call double @__ieee754_sqrt(double %call) #8
  %div30 = fdiv double %mul28, %call29
  br label %return

if.end32:                                         ; preds = %if.end
  %cmp33 = icmp ult i32 %and, 1059061760
  %add35 = fadd double %call, 1.000000e+300
  %cmp36 = fcmp ogt double %add35, 1.000000e+00
  %or.cond = and i1 %cmp33, %cmp36
  br i1 %or.cond, label %if.then37, label %if.end45

if.then37:                                        ; preds = %if.end32
  %cmp38 = icmp ult i32 %and, 1044381696
  br i1 %cmp38, label %return, label %if.else40

if.else40:                                        ; preds = %if.then37
  %mul41 = fmul double %call, 2.500000e-01
  %mul42 = fmul double %call, %mul41
  %sub43 = fsub double 1.000000e+00, %mul42
  br label %return

if.end45:                                         ; preds = %if.end32
  %mul46 = fmul double %call, %call
  %mul47 = fmul double %mul46, 0xBE33D5E773D63FCE
  %add48 = fadd double %mul47, 0x3EBEB1D10C503919
  %mul49 = fmul double %mul46, %add48
  %add50 = fadd double %mul49, 0xBF28E6A5B61AC6E9
  %mul51 = fmul double %mul46, %add50
  %add52 = fadd double %mul51, 0x3F8FFFFFFFFFFFFD
  %mul53 = fmul double %mul46, %add52
  %mul54 = fmul double %mul46, 0x3E1408BCF4745D8F
  %add55 = fadd double %mul54, 0x3EA13B54CE84D5A9
  %mul56 = fmul double %mul46, %add55
  %add57 = fadd double %mul56, 0x3F1EA6D2DD57DBF4
  %mul58 = fmul double %mul46, %add57
  %add59 = fadd double %mul58, 0x3F8FFCE882C8C2A4
  %mul60 = fmul double %mul46, %add59
  %add61 = fadd double %mul60, 1.000000e+00
  %cmp62 = icmp ult i32 %and, 1072693248
  br i1 %cmp62, label %if.then63, label %if.else68

if.then63:                                        ; preds = %if.end45
  %div64 = fdiv double %mul53, %add61
  %add65 = fadd double %div64, -2.500000e-01
  %mul66 = fmul double %mul46, %add65
  %add67 = fadd double %mul66, 1.000000e+00
  br label %return

if.else68:                                        ; preds = %if.end45
  %mul69 = fmul double %call, 5.000000e-01
  %add70 = fadd double %mul69, 1.000000e+00
  %sub71 = fsub double 1.000000e+00, %mul69
  %mul72 = fmul double %add70, %sub71
  %div73 = fdiv double %mul53, %add61
  %mul74 = fmul double %mul46, %div73
  %add75 = fadd double %mul72, %mul74
  br label %return

return:                                           ; preds = %if.else68, %if.then63, %if.else40, %if.then37, %qzero.exit, %if.then18, %if.then
  %retval.0 = phi double [ %div, %if.then ], [ %sub43, %if.else40 ], [ %add67, %if.then63 ], [ %add75, %if.else68 ], [ %div21, %if.then18 ], [ %div30, %qzero.exit ], [ 1.000000e+00, %if.then37 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_y0(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mul = fmul double %x, %x
  %add = fadd double %mul, %x
  %div = fdiv double 1.000000e+00, %add
  br label %return

if.end:                                           ; preds = %entry
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %or = or i32 %and, %ew_u.sroa.0.0.extract.trunc
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %cmp5 = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp5, label %return, label %if.end7

if.end7:                                          ; preds = %if.end4
  %cmp8 = icmp ugt i32 %and, 1073741823
  br i1 %cmp8, label %if.then9, label %if.end39

if.then9:                                         ; preds = %if.end7
  %call = tail call double @sin(double %x) #8
  %call10 = tail call double @cos(double %x) #8
  %sub = fsub double %call, %call10
  %add11 = fadd double %call, %call10
  %cmp12 = icmp ult i32 %and, 2145386496
  br i1 %cmp12, label %if.then13, label %if.then25

if.then13:                                        ; preds = %if.then9
  %add14 = fadd double %x, %x
  %call15 = tail call double @cos(double %add14) #8
  %sub16 = fsub double -0.000000e+00, %call15
  %mul17 = fmul double %call, %call10
  %cmp18 = fcmp olt double %mul17, 0.000000e+00
  br i1 %cmp18, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.then13
  %div20 = fdiv double %sub16, %sub
  br label %if.end23

if.else:                                          ; preds = %if.then13
  %div21 = fdiv double %sub16, %add11
  br label %if.end23

if.end23:                                         ; preds = %if.else, %if.then19
  %cc.0 = phi double [ %div20, %if.then19 ], [ %add11, %if.else ]
  %ss.0 = phi double [ %sub, %if.then19 ], [ %div21, %if.else ]
  %cmp24 = icmp ugt i32 %and, 1207959552
  br i1 %cmp24, label %if.then25, label %if.else29

if.then25:                                        ; preds = %if.end23, %if.then9
  %ss.0149 = phi double [ %ss.0, %if.end23 ], [ %sub, %if.then9 ]
  %mul26 = fmul double %ss.0149, 0x3FE20DD750429B6D
  %call27 = tail call double @__ieee754_sqrt(double %x) #8
  %div28 = fdiv double %mul26, %call27
  br label %return

if.else29:                                        ; preds = %if.end23
  %cmp.i = icmp ugt i32 %and, 1102053375
  br i1 %cmp.i, label %qzero.exit, label %if.else.i

if.else.i:                                        ; preds = %if.else29
  %cmp1.i = icmp ugt i32 %and, 1075838975
  br i1 %cmp1.i, label %if.else.i119, label %if.else3.i

if.else3.i:                                       ; preds = %if.else.i
  %cmp4.i = icmp ugt i32 %and, 1074933386
  br i1 %cmp4.i, label %if.else.i119, label %if.else6.i

if.else6.i:                                       ; preds = %if.else3.i
  %cmp7.i = icmp ugt i32 %and, 1074191212
  %..i = select i1 %cmp7.i, double* getelementptr inbounds ([5 x double]* @pS320, i32 0, i32 0), double* getelementptr inbounds ([5 x double]* @pS222, i32 0, i32 0)
  %.68.i = select i1 %cmp7.i, double* getelementptr inbounds ([6 x double]* @pR319, i32 0, i32 0), double* getelementptr inbounds ([6 x double]* @pR221, i32 0, i32 0)
  br label %if.else.i119

if.else.i119:                                     ; preds = %if.else6.i, %if.else3.i, %if.else.i
  %q.0.i = phi double* [ getelementptr inbounds ([5 x double]* @pS816, i32 0, i32 0), %if.else.i ], [ getelementptr inbounds ([5 x double]* @pS518, i32 0, i32 0), %if.else3.i ], [ %..i, %if.else6.i ]
  %p.0.i = phi double* [ getelementptr inbounds ([6 x double]* @pR815, i32 0, i32 0), %if.else.i ], [ getelementptr inbounds ([6 x double]* @pR517, i32 0, i32 0), %if.else3.i ], [ %.68.i, %if.else6.i ]
  %mul.i = fmul double %x, %x
  %div.i = fdiv double 1.000000e+00, %mul.i
  %1 = load double* %p.0.i, align 8, !tbaa !429
  %arrayidx13.i = getelementptr inbounds double* %p.0.i, i32 1
  %2 = load double* %arrayidx13.i, align 8, !tbaa !429
  %arrayidx14.i = getelementptr inbounds double* %p.0.i, i32 2
  %3 = load double* %arrayidx14.i, align 8, !tbaa !429
  %arrayidx15.i = getelementptr inbounds double* %p.0.i, i32 3
  %4 = load double* %arrayidx15.i, align 8, !tbaa !429
  %arrayidx16.i = getelementptr inbounds double* %p.0.i, i32 4
  %5 = load double* %arrayidx16.i, align 8, !tbaa !429
  %arrayidx17.i = getelementptr inbounds double* %p.0.i, i32 5
  %6 = load double* %arrayidx17.i, align 8, !tbaa !429
  %mul18.i = fmul double %div.i, %6
  %add.i = fadd double %5, %mul18.i
  %mul19.i = fmul double %div.i, %add.i
  %add20.i = fadd double %4, %mul19.i
  %mul21.i = fmul double %div.i, %add20.i
  %add22.i = fadd double %3, %mul21.i
  %mul23.i = fmul double %div.i, %add22.i
  %add24.i = fadd double %2, %mul23.i
  %mul25.i = fmul double %div.i, %add24.i
  %add26.i = fadd double %1, %mul25.i
  %7 = load double* %q.0.i, align 8, !tbaa !429
  %arrayidx28.i = getelementptr inbounds double* %q.0.i, i32 1
  %8 = load double* %arrayidx28.i, align 8, !tbaa !429
  %arrayidx29.i = getelementptr inbounds double* %q.0.i, i32 2
  %9 = load double* %arrayidx29.i, align 8, !tbaa !429
  %arrayidx30.i = getelementptr inbounds double* %q.0.i, i32 3
  %10 = load double* %arrayidx30.i, align 8, !tbaa !429
  %arrayidx31.i = getelementptr inbounds double* %q.0.i, i32 4
  %11 = load double* %arrayidx31.i, align 8, !tbaa !429
  %mul32.i = fmul double %div.i, %11
  %add33.i = fadd double %10, %mul32.i
  %mul34.i = fmul double %div.i, %add33.i
  %add35.i = fadd double %9, %mul34.i
  %mul36.i = fmul double %div.i, %add35.i
  %add37.i = fadd double %8, %mul36.i
  %mul38.i = fmul double %div.i, %add37.i
  %add39.i = fadd double %7, %mul38.i
  %mul40.i = fmul double %div.i, %add39.i
  %add41.i = fadd double %mul40.i, 1.000000e+00
  %div42.i = fdiv double %add26.i, %add41.i
  %add43.i = fadd double %div42.i, 1.000000e+00
  br i1 %cmp1.i, label %if.end12.i146, label %if.else3.i121

if.else3.i121:                                    ; preds = %if.else.i119
  %cmp4.i120 = icmp ugt i32 %and, 1074933386
  br i1 %cmp4.i120, label %if.end12.i146, label %if.else6.i124

if.else6.i124:                                    ; preds = %if.else3.i121
  %cmp7.i122 = icmp ugt i32 %and, 1074191212
  %..i123 = select i1 %cmp7.i122, double* getelementptr inbounds ([6 x double]* @qS312, i32 0, i32 0), double* getelementptr inbounds ([6 x double]* @qS214, i32 0, i32 0)
  %.77.i = select i1 %cmp7.i122, double* getelementptr inbounds ([6 x double]* @qR311, i32 0, i32 0), double* getelementptr inbounds ([6 x double]* @qR213, i32 0, i32 0)
  br label %if.end12.i146

if.end12.i146:                                    ; preds = %if.else6.i124, %if.else3.i121, %if.else.i119
  %q.0.i125 = phi double* [ getelementptr inbounds ([6 x double]* @qS88, i32 0, i32 0), %if.else.i119 ], [ getelementptr inbounds ([6 x double]* @qS510, i32 0, i32 0), %if.else3.i121 ], [ %..i123, %if.else6.i124 ]
  %p.0.i126 = phi double* [ getelementptr inbounds ([6 x double]* @qR87, i32 0, i32 0), %if.else.i119 ], [ getelementptr inbounds ([6 x double]* @qR59, i32 0, i32 0), %if.else3.i121 ], [ %.77.i, %if.else6.i124 ]
  %12 = load double* %p.0.i126, align 8, !tbaa !429
  %arrayidx14.i128 = getelementptr inbounds double* %p.0.i126, i32 1
  %13 = load double* %arrayidx14.i128, align 8, !tbaa !429
  %arrayidx15.i129 = getelementptr inbounds double* %p.0.i126, i32 2
  %14 = load double* %arrayidx15.i129, align 8, !tbaa !429
  %arrayidx16.i130 = getelementptr inbounds double* %p.0.i126, i32 3
  %15 = load double* %arrayidx16.i130, align 8, !tbaa !429
  %arrayidx17.i131 = getelementptr inbounds double* %p.0.i126, i32 4
  %16 = load double* %arrayidx17.i131, align 8, !tbaa !429
  %arrayidx18.i = getelementptr inbounds double* %p.0.i126, i32 5
  %17 = load double* %arrayidx18.i, align 8, !tbaa !429
  %mul19.i132 = fmul double %div.i, %17
  %add.i133 = fadd double %16, %mul19.i132
  %mul20.i = fmul double %div.i, %add.i133
  %add21.i = fadd double %15, %mul20.i
  %mul22.i = fmul double %div.i, %add21.i
  %add23.i = fadd double %14, %mul22.i
  %mul24.i = fmul double %div.i, %add23.i
  %add25.i = fadd double %13, %mul24.i
  %mul26.i = fmul double %div.i, %add25.i
  %add27.i = fadd double %12, %mul26.i
  %18 = load double* %q.0.i125, align 8, !tbaa !429
  %arrayidx29.i134 = getelementptr inbounds double* %q.0.i125, i32 1
  %19 = load double* %arrayidx29.i134, align 8, !tbaa !429
  %arrayidx30.i135 = getelementptr inbounds double* %q.0.i125, i32 2
  %20 = load double* %arrayidx30.i135, align 8, !tbaa !429
  %arrayidx31.i136 = getelementptr inbounds double* %q.0.i125, i32 3
  %21 = load double* %arrayidx31.i136, align 8, !tbaa !429
  %arrayidx32.i = getelementptr inbounds double* %q.0.i125, i32 4
  %22 = load double* %arrayidx32.i, align 8, !tbaa !429
  %arrayidx33.i = getelementptr inbounds double* %q.0.i125, i32 5
  %23 = load double* %arrayidx33.i, align 8, !tbaa !429
  %mul34.i137 = fmul double %div.i, %23
  %add35.i138 = fadd double %22, %mul34.i137
  %mul36.i139 = fmul double %div.i, %add35.i138
  %add37.i140 = fadd double %21, %mul36.i139
  %mul38.i141 = fmul double %div.i, %add37.i140
  %add39.i142 = fadd double %20, %mul38.i141
  %mul40.i143 = fmul double %div.i, %add39.i142
  %add41.i144 = fadd double %19, %mul40.i143
  %mul42.i = fmul double %div.i, %add41.i144
  %add43.i145 = fadd double %18, %mul42.i
  %mul44.i = fmul double %div.i, %add43.i145
  %add45.i = fadd double %mul44.i, 1.000000e+00
  %div46.i = fdiv double %add27.i, %add45.i
  %add47.i = fadd double %div46.i, -1.250000e-01
  br label %qzero.exit

qzero.exit:                                       ; preds = %if.end12.i146, %if.else29
  %retval.0.i150 = phi double [ %add43.i, %if.end12.i146 ], [ 1.000000e+00, %if.else29 ]
  %.pn.i = phi double [ %add47.i, %if.end12.i146 ], [ -1.250000e-01, %if.else29 ]
  %retval.0.i147 = fdiv double %.pn.i, %x
  %mul32 = fmul double %ss.0, %retval.0.i150
  %mul33 = fmul double %cc.0, %retval.0.i147
  %add34 = fadd double %mul32, %mul33
  %mul35 = fmul double %add34, 0x3FE20DD750429B6D
  %call36 = tail call double @__ieee754_sqrt(double %x) #8
  %div37 = fdiv double %mul35, %call36
  br label %return

if.end39:                                         ; preds = %if.end7
  %cmp40 = icmp ult i32 %and, 1044381697
  br i1 %cmp40, label %if.then41, label %if.end45

if.then41:                                        ; preds = %if.end39
  %call42 = tail call double @log(double %x) #8
  %mul43 = fmul double %call42, 0x3FE45F306DC9C883
  %add44 = fadd double %mul43, 0xBFB2E4D699CBD01F
  br label %return

if.end45:                                         ; preds = %if.end39
  %mul46 = fmul double %x, %x
  %mul47 = fmul double %mul46, 0xBDC5E43D693FB3C8
  %add48 = fadd double %mul47, 0x3E5500573B4EABD4
  %mul49 = fmul double %mul46, %add48
  %add50 = fadd double %mul49, 0xBECFFEA773D25CAD
  %mul51 = fmul double %mul46, %add50
  %add52 = fadd double %mul51, 0x3F36C54D20B29B6B
  %mul53 = fmul double %mul46, %add52
  %add54 = fadd double %mul53, 0xBF8C4CE8B16CFA97
  %mul55 = fmul double %mul46, %add54
  %add56 = fadd double %mul55, 0x3FC69D019DE9E3FC
  %mul57 = fmul double %mul46, %add56
  %add58 = fadd double %mul57, 0xBFB2E4D699CBD01F
  %mul59 = fmul double %mul46, 0x3DFE50183BD6D9EF
  %add60 = fadd double %mul59, 0x3E91642D7FF202FD
  %mul61 = fmul double %mul46, %add60
  %add62 = fadd double %mul61, 0x3F13ECBBF578C6C1
  %mul63 = fmul double %mul46, %add62
  %add64 = fadd double %mul63, 0x3F8A127091C9C71A
  %mul65 = fmul double %mul46, %add64
  %add66 = fadd double %mul65, 1.000000e+00
  %div67 = fdiv double %add58, %add66
  %call68 = tail call double @__ieee754_j0(double %x) #9
  %call69 = tail call double @log(double %x) #8
  %mul70 = fmul double %call68, %call69
  %mul71 = fmul double %mul70, 0x3FE45F306DC9C883
  %add72 = fadd double %div67, %mul71
  br label %return

return:                                           ; preds = %if.end45, %if.then41, %qzero.exit, %if.then25, %if.end4, %if.end, %if.then
  %retval.0 = phi double [ %div, %if.then ], [ %add44, %if.then41 ], [ %add72, %if.end45 ], [ 0xFFF0000000000000, %if.end ], [ 0x7FF8000000000000, %if.end4 ], [ %div28, %if.then25 ], [ %div37, %qzero.exit ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_j1(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %div = fdiv double 1.000000e+00, %x
  br label %return

if.end:                                           ; preds = %entry
  %call = tail call double @fabs(double %x) #8
  %cmp1 = icmp ugt i32 %and, 1073741823
  br i1 %cmp1, label %if.then2, label %if.end35

if.then2:                                         ; preds = %if.end
  %call3 = tail call double @sin(double %call) #8
  %call4 = tail call double @cos(double %call) #8
  %sub = fsub double -0.000000e+00, %call3
  %sub5 = fsub double %sub, %call4
  %sub6 = fsub double %call3, %call4
  %cmp7 = icmp ult i32 %and, 2145386496
  br i1 %cmp7, label %if.then8, label %if.then17

if.then8:                                         ; preds = %if.then2
  %add = fadd double %call, %call
  %call9 = tail call double @cos(double %add) #8
  %mul = fmul double %call3, %call4
  %cmp10 = fcmp ogt double %mul, 0.000000e+00
  br i1 %cmp10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.then8
  %div12 = fdiv double %call9, %sub5
  br label %if.end15

if.else:                                          ; preds = %if.then8
  %div13 = fdiv double %call9, %sub6
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then11
  %cc.0 = phi double [ %div12, %if.then11 ], [ %sub6, %if.else ]
  %ss.0 = phi double [ %sub5, %if.then11 ], [ %div13, %if.else ]
  %cmp16 = icmp ugt i32 %and, 1207959552
  br i1 %cmp16, label %if.then17, label %if.else21

if.then17:                                        ; preds = %if.end15, %if.then2
  %cc.0139 = phi double [ %cc.0, %if.end15 ], [ %sub6, %if.then2 ]
  %mul18 = fmul double %cc.0139, 0x3FE20DD750429B6D
  %call19 = tail call double @__ieee754_sqrt(double %call) #8
  %div20 = fdiv double %mul18, %call19
  br label %if.end30

if.else21:                                        ; preds = %if.end15
  %1 = bitcast double %call to i64
  %gh_u.sroa.0.4.extract.shift.i = lshr i64 %1, 32
  %gh_u.sroa.0.4.extract.trunc.i = trunc i64 %gh_u.sroa.0.4.extract.shift.i to i32
  %and.i = and i32 %gh_u.sroa.0.4.extract.trunc.i, 2147483647
  %cmp.i = icmp ugt i32 %and.i, 1102053375
  br i1 %cmp.i, label %qone.exit, label %if.else.i

if.else.i:                                        ; preds = %if.else21
  %cmp1.i = icmp ugt i32 %and.i, 1075838975
  br i1 %cmp1.i, label %if.else.i109, label %if.else3.i

if.else3.i:                                       ; preds = %if.else.i
  %cmp4.i = icmp ugt i32 %and.i, 1074933386
  br i1 %cmp4.i, label %if.else.i109, label %if.else6.i

if.else6.i:                                       ; preds = %if.else3.i
  %cmp7.i = icmp ugt i32 %and.i, 1074191212
  %..i = select i1 %cmp7.i, double* getelementptr inbounds ([5 x double]* @ps332, i32 0, i32 0), double* getelementptr inbounds ([5 x double]* @ps234, i32 0, i32 0)
  %.68.i = select i1 %cmp7.i, double* getelementptr inbounds ([6 x double]* @pr331, i32 0, i32 0), double* getelementptr inbounds ([6 x double]* @pr233, i32 0, i32 0)
  br label %if.else.i109

if.else.i109:                                     ; preds = %if.else6.i, %if.else3.i, %if.else.i
  %q.0.i = phi double* [ getelementptr inbounds ([5 x double]* @ps828, i32 0, i32 0), %if.else.i ], [ getelementptr inbounds ([5 x double]* @ps530, i32 0, i32 0), %if.else3.i ], [ %..i, %if.else6.i ]
  %p.0.i = phi double* [ getelementptr inbounds ([6 x double]* @pr827, i32 0, i32 0), %if.else.i ], [ getelementptr inbounds ([6 x double]* @pr529, i32 0, i32 0), %if.else3.i ], [ %.68.i, %if.else6.i ]
  %mul.i = fmul double %call, %call
  %div.i = fdiv double 1.000000e+00, %mul.i
  %2 = load double* %p.0.i, align 8, !tbaa !429
  %arrayidx13.i = getelementptr inbounds double* %p.0.i, i32 1
  %3 = load double* %arrayidx13.i, align 8, !tbaa !429
  %arrayidx14.i = getelementptr inbounds double* %p.0.i, i32 2
  %4 = load double* %arrayidx14.i, align 8, !tbaa !429
  %arrayidx15.i = getelementptr inbounds double* %p.0.i, i32 3
  %5 = load double* %arrayidx15.i, align 8, !tbaa !429
  %arrayidx16.i = getelementptr inbounds double* %p.0.i, i32 4
  %6 = load double* %arrayidx16.i, align 8, !tbaa !429
  %arrayidx17.i = getelementptr inbounds double* %p.0.i, i32 5
  %7 = load double* %arrayidx17.i, align 8, !tbaa !429
  %mul18.i = fmul double %div.i, %7
  %add.i = fadd double %6, %mul18.i
  %mul19.i = fmul double %div.i, %add.i
  %add20.i = fadd double %5, %mul19.i
  %mul21.i = fmul double %div.i, %add20.i
  %add22.i = fadd double %4, %mul21.i
  %mul23.i = fmul double %div.i, %add22.i
  %add24.i = fadd double %3, %mul23.i
  %mul25.i = fmul double %div.i, %add24.i
  %add26.i = fadd double %2, %mul25.i
  %8 = load double* %q.0.i, align 8, !tbaa !429
  %arrayidx28.i = getelementptr inbounds double* %q.0.i, i32 1
  %9 = load double* %arrayidx28.i, align 8, !tbaa !429
  %arrayidx29.i = getelementptr inbounds double* %q.0.i, i32 2
  %10 = load double* %arrayidx29.i, align 8, !tbaa !429
  %arrayidx30.i = getelementptr inbounds double* %q.0.i, i32 3
  %11 = load double* %arrayidx30.i, align 8, !tbaa !429
  %arrayidx31.i = getelementptr inbounds double* %q.0.i, i32 4
  %12 = load double* %arrayidx31.i, align 8, !tbaa !429
  %mul32.i = fmul double %div.i, %12
  %add33.i = fadd double %11, %mul32.i
  %mul34.i = fmul double %div.i, %add33.i
  %add35.i = fadd double %10, %mul34.i
  %mul36.i = fmul double %div.i, %add35.i
  %add37.i = fadd double %9, %mul36.i
  %mul38.i = fmul double %div.i, %add37.i
  %add39.i = fadd double %8, %mul38.i
  %mul40.i = fmul double %div.i, %add39.i
  %add41.i = fadd double %mul40.i, 1.000000e+00
  %div42.i = fdiv double %add26.i, %add41.i
  %add43.i = fadd double %div42.i, 1.000000e+00
  br i1 %cmp1.i, label %if.end12.i136, label %if.else3.i111

if.else3.i111:                                    ; preds = %if.else.i109
  %cmp4.i110 = icmp ugt i32 %and.i, 1074933386
  br i1 %cmp4.i110, label %if.end12.i136, label %if.else6.i114

if.else6.i114:                                    ; preds = %if.else3.i111
  %cmp7.i112 = icmp ugt i32 %and.i, 1074191212
  %..i113 = select i1 %cmp7.i112, double* getelementptr inbounds ([6 x double]* @qs3, i32 0, i32 0), double* getelementptr inbounds ([6 x double]* @qs226, i32 0, i32 0)
  %.77.i = select i1 %cmp7.i112, double* getelementptr inbounds ([6 x double]* @qr3, i32 0, i32 0), double* getelementptr inbounds ([6 x double]* @qr225, i32 0, i32 0)
  br label %if.end12.i136

if.end12.i136:                                    ; preds = %if.else6.i114, %if.else3.i111, %if.else.i109
  %q.0.i115 = phi double* [ getelementptr inbounds ([6 x double]* @qs824, i32 0, i32 0), %if.else.i109 ], [ getelementptr inbounds ([6 x double]* @qs5, i32 0, i32 0), %if.else3.i111 ], [ %..i113, %if.else6.i114 ]
  %p.0.i116 = phi double* [ getelementptr inbounds ([6 x double]* @qr823, i32 0, i32 0), %if.else.i109 ], [ getelementptr inbounds ([6 x double]* @qr5, i32 0, i32 0), %if.else3.i111 ], [ %.77.i, %if.else6.i114 ]
  %13 = load double* %p.0.i116, align 8, !tbaa !429
  %arrayidx14.i118 = getelementptr inbounds double* %p.0.i116, i32 1
  %14 = load double* %arrayidx14.i118, align 8, !tbaa !429
  %arrayidx15.i119 = getelementptr inbounds double* %p.0.i116, i32 2
  %15 = load double* %arrayidx15.i119, align 8, !tbaa !429
  %arrayidx16.i120 = getelementptr inbounds double* %p.0.i116, i32 3
  %16 = load double* %arrayidx16.i120, align 8, !tbaa !429
  %arrayidx17.i121 = getelementptr inbounds double* %p.0.i116, i32 4
  %17 = load double* %arrayidx17.i121, align 8, !tbaa !429
  %arrayidx18.i = getelementptr inbounds double* %p.0.i116, i32 5
  %18 = load double* %arrayidx18.i, align 8, !tbaa !429
  %mul19.i122 = fmul double %div.i, %18
  %add.i123 = fadd double %17, %mul19.i122
  %mul20.i = fmul double %div.i, %add.i123
  %add21.i = fadd double %16, %mul20.i
  %mul22.i = fmul double %div.i, %add21.i
  %add23.i = fadd double %15, %mul22.i
  %mul24.i = fmul double %div.i, %add23.i
  %add25.i = fadd double %14, %mul24.i
  %mul26.i = fmul double %div.i, %add25.i
  %add27.i = fadd double %13, %mul26.i
  %19 = load double* %q.0.i115, align 8, !tbaa !429
  %arrayidx29.i124 = getelementptr inbounds double* %q.0.i115, i32 1
  %20 = load double* %arrayidx29.i124, align 8, !tbaa !429
  %arrayidx30.i125 = getelementptr inbounds double* %q.0.i115, i32 2
  %21 = load double* %arrayidx30.i125, align 8, !tbaa !429
  %arrayidx31.i126 = getelementptr inbounds double* %q.0.i115, i32 3
  %22 = load double* %arrayidx31.i126, align 8, !tbaa !429
  %arrayidx32.i = getelementptr inbounds double* %q.0.i115, i32 4
  %23 = load double* %arrayidx32.i, align 8, !tbaa !429
  %arrayidx33.i = getelementptr inbounds double* %q.0.i115, i32 5
  %24 = load double* %arrayidx33.i, align 8, !tbaa !429
  %mul34.i127 = fmul double %div.i, %24
  %add35.i128 = fadd double %23, %mul34.i127
  %mul36.i129 = fmul double %div.i, %add35.i128
  %add37.i130 = fadd double %22, %mul36.i129
  %mul38.i131 = fmul double %div.i, %add37.i130
  %add39.i132 = fadd double %21, %mul38.i131
  %mul40.i133 = fmul double %div.i, %add39.i132
  %add41.i134 = fadd double %20, %mul40.i133
  %mul42.i = fmul double %div.i, %add41.i134
  %add43.i135 = fadd double %19, %mul42.i
  %mul44.i = fmul double %div.i, %add43.i135
  %add45.i = fadd double %mul44.i, 1.000000e+00
  %div46.i = fdiv double %add27.i, %add45.i
  %add47.i = fadd double %div46.i, 3.750000e-01
  br label %qone.exit

qone.exit:                                        ; preds = %if.end12.i136, %if.else21
  %retval.0.i140 = phi double [ %add43.i, %if.end12.i136 ], [ 1.000000e+00, %if.else21 ]
  %.pn.i = phi double [ %add47.i, %if.end12.i136 ], [ 3.750000e-01, %if.else21 ]
  %retval.0.i137 = fdiv double %.pn.i, %call
  %mul24 = fmul double %cc.0, %retval.0.i140
  %mul25 = fmul double %ss.0, %retval.0.i137
  %sub26 = fsub double %mul24, %mul25
  %mul27 = fmul double %sub26, 0x3FE20DD750429B6D
  %call28 = tail call double @__ieee754_sqrt(double %call) #8
  %div29 = fdiv double %mul27, %call28
  br label %if.end30

if.end30:                                         ; preds = %qone.exit, %if.then17
  %z.0 = phi double [ %div20, %if.then17 ], [ %div29, %qone.exit ]
  %cmp31 = icmp slt i32 %gh_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp31, label %if.then32, label %return

if.then32:                                        ; preds = %if.end30
  %sub33 = fsub double -0.000000e+00, %z.0
  br label %return

if.end35:                                         ; preds = %if.end
  %cmp36 = icmp ult i32 %and, 1044381696
  %add38 = fadd double %x, 1.000000e+300
  %cmp39 = fcmp ogt double %add38, 1.000000e+00
  %or.cond = and i1 %cmp36, %cmp39
  br i1 %or.cond, label %if.then40, label %if.end43

if.then40:                                        ; preds = %if.end35
  %mul41 = fmul double %x, 5.000000e-01
  br label %return

if.end43:                                         ; preds = %if.end35
  %mul44 = fmul double %x, %x
  %mul45 = fmul double %mul44, 0x3E6AAAFA46CA0BD9
  %add46 = fadd double %mul45, 0xBEF0C5C6BA169668
  %mul47 = fmul double %mul44, %add46
  %add48 = fadd double %mul47, 0x3F570D9F98472C61
  %mul49 = fmul double %mul44, %add48
  %add50 = fadd double %mul49, -6.250000e-02
  %mul51 = fmul double %mul44, %add50
  %mul52 = fmul double %mul44, 0x3DAB2ACFCFB97ED8
  %add53 = fadd double %mul52, 0x3E35AC88C97DFF2C
  %mul54 = fmul double %mul44, %add53
  %add55 = fadd double %mul54, 0x3EB3BFF8333F8498
  %mul56 = fmul double %mul44, %add55
  %add57 = fadd double %mul56, 0x3F285F56B9CDF664
  %mul58 = fmul double %mul44, %add57
  %add59 = fadd double %mul58, 0x3F939D0B12637E53
  %mul60 = fmul double %mul44, %add59
  %add61 = fadd double %mul60, 1.000000e+00
  %mul62 = fmul double %mul51, %x
  %mul63 = fmul double %x, 5.000000e-01
  %div64 = fdiv double %mul62, %add61
  %add65 = fadd double %mul63, %div64
  br label %return

return:                                           ; preds = %if.end43, %if.then40, %if.then32, %if.end30, %if.then
  %retval.0 = phi double [ %div, %if.then ], [ %sub33, %if.then32 ], [ %mul41, %if.then40 ], [ %add65, %if.end43 ], [ %z.0, %if.end30 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_y1(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mul = fmul double %x, %x
  %add = fadd double %mul, %x
  %div = fdiv double 1.000000e+00, %add
  br label %return

if.end:                                           ; preds = %entry
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %or = or i32 %and, %ew_u.sroa.0.0.extract.trunc
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %cmp5 = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp5, label %return, label %if.end7

if.end7:                                          ; preds = %if.end4
  %cmp8 = icmp ugt i32 %and, 1073741823
  br i1 %cmp8, label %if.then9, label %if.end39

if.then9:                                         ; preds = %if.end7
  %call = tail call double @sin(double %x) #8
  %call10 = tail call double @cos(double %x) #8
  %sub = fsub double -0.000000e+00, %call
  %sub11 = fsub double %sub, %call10
  %sub12 = fsub double %call, %call10
  %cmp13 = icmp ult i32 %and, 2145386496
  br i1 %cmp13, label %if.then14, label %if.then25

if.then14:                                        ; preds = %if.then9
  %add15 = fadd double %x, %x
  %call16 = tail call double @cos(double %add15) #8
  %mul17 = fmul double %call, %call10
  %cmp18 = fcmp ogt double %mul17, 0.000000e+00
  br i1 %cmp18, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.then14
  %div20 = fdiv double %call16, %sub11
  br label %if.end23

if.else:                                          ; preds = %if.then14
  %div21 = fdiv double %call16, %sub12
  br label %if.end23

if.end23:                                         ; preds = %if.else, %if.then19
  %cc.0 = phi double [ %div20, %if.then19 ], [ %sub12, %if.else ]
  %ss.0 = phi double [ %sub11, %if.then19 ], [ %div21, %if.else ]
  %cmp24 = icmp ugt i32 %and, 1207959552
  br i1 %cmp24, label %if.then25, label %if.else29

if.then25:                                        ; preds = %if.end23, %if.then9
  %ss.0149 = phi double [ %ss.0, %if.end23 ], [ %sub11, %if.then9 ]
  %mul26 = fmul double %ss.0149, 0x3FE20DD750429B6D
  %call27 = tail call double @__ieee754_sqrt(double %x) #8
  %div28 = fdiv double %mul26, %call27
  br label %return

if.else29:                                        ; preds = %if.end23
  %cmp.i = icmp ugt i32 %and, 1102053375
  br i1 %cmp.i, label %qone.exit, label %if.else.i

if.else.i:                                        ; preds = %if.else29
  %cmp1.i = icmp ugt i32 %and, 1075838975
  br i1 %cmp1.i, label %if.else.i119, label %if.else3.i

if.else3.i:                                       ; preds = %if.else.i
  %cmp4.i = icmp ugt i32 %and, 1074933386
  br i1 %cmp4.i, label %if.else.i119, label %if.else6.i

if.else6.i:                                       ; preds = %if.else3.i
  %cmp7.i = icmp ugt i32 %and, 1074191212
  %..i = select i1 %cmp7.i, double* getelementptr inbounds ([5 x double]* @ps332, i32 0, i32 0), double* getelementptr inbounds ([5 x double]* @ps234, i32 0, i32 0)
  %.68.i = select i1 %cmp7.i, double* getelementptr inbounds ([6 x double]* @pr331, i32 0, i32 0), double* getelementptr inbounds ([6 x double]* @pr233, i32 0, i32 0)
  br label %if.else.i119

if.else.i119:                                     ; preds = %if.else6.i, %if.else3.i, %if.else.i
  %q.0.i = phi double* [ getelementptr inbounds ([5 x double]* @ps828, i32 0, i32 0), %if.else.i ], [ getelementptr inbounds ([5 x double]* @ps530, i32 0, i32 0), %if.else3.i ], [ %..i, %if.else6.i ]
  %p.0.i = phi double* [ getelementptr inbounds ([6 x double]* @pr827, i32 0, i32 0), %if.else.i ], [ getelementptr inbounds ([6 x double]* @pr529, i32 0, i32 0), %if.else3.i ], [ %.68.i, %if.else6.i ]
  %mul.i = fmul double %x, %x
  %div.i = fdiv double 1.000000e+00, %mul.i
  %1 = load double* %p.0.i, align 8, !tbaa !429
  %arrayidx13.i = getelementptr inbounds double* %p.0.i, i32 1
  %2 = load double* %arrayidx13.i, align 8, !tbaa !429
  %arrayidx14.i = getelementptr inbounds double* %p.0.i, i32 2
  %3 = load double* %arrayidx14.i, align 8, !tbaa !429
  %arrayidx15.i = getelementptr inbounds double* %p.0.i, i32 3
  %4 = load double* %arrayidx15.i, align 8, !tbaa !429
  %arrayidx16.i = getelementptr inbounds double* %p.0.i, i32 4
  %5 = load double* %arrayidx16.i, align 8, !tbaa !429
  %arrayidx17.i = getelementptr inbounds double* %p.0.i, i32 5
  %6 = load double* %arrayidx17.i, align 8, !tbaa !429
  %mul18.i = fmul double %div.i, %6
  %add.i = fadd double %5, %mul18.i
  %mul19.i = fmul double %div.i, %add.i
  %add20.i = fadd double %4, %mul19.i
  %mul21.i = fmul double %div.i, %add20.i
  %add22.i = fadd double %3, %mul21.i
  %mul23.i = fmul double %div.i, %add22.i
  %add24.i = fadd double %2, %mul23.i
  %mul25.i = fmul double %div.i, %add24.i
  %add26.i = fadd double %1, %mul25.i
  %7 = load double* %q.0.i, align 8, !tbaa !429
  %arrayidx28.i = getelementptr inbounds double* %q.0.i, i32 1
  %8 = load double* %arrayidx28.i, align 8, !tbaa !429
  %arrayidx29.i = getelementptr inbounds double* %q.0.i, i32 2
  %9 = load double* %arrayidx29.i, align 8, !tbaa !429
  %arrayidx30.i = getelementptr inbounds double* %q.0.i, i32 3
  %10 = load double* %arrayidx30.i, align 8, !tbaa !429
  %arrayidx31.i = getelementptr inbounds double* %q.0.i, i32 4
  %11 = load double* %arrayidx31.i, align 8, !tbaa !429
  %mul32.i = fmul double %div.i, %11
  %add33.i = fadd double %10, %mul32.i
  %mul34.i = fmul double %div.i, %add33.i
  %add35.i = fadd double %9, %mul34.i
  %mul36.i = fmul double %div.i, %add35.i
  %add37.i = fadd double %8, %mul36.i
  %mul38.i = fmul double %div.i, %add37.i
  %add39.i = fadd double %7, %mul38.i
  %mul40.i = fmul double %div.i, %add39.i
  %add41.i = fadd double %mul40.i, 1.000000e+00
  %div42.i = fdiv double %add26.i, %add41.i
  %add43.i = fadd double %div42.i, 1.000000e+00
  br i1 %cmp1.i, label %if.end12.i146, label %if.else3.i121

if.else3.i121:                                    ; preds = %if.else.i119
  %cmp4.i120 = icmp ugt i32 %and, 1074933386
  br i1 %cmp4.i120, label %if.end12.i146, label %if.else6.i124

if.else6.i124:                                    ; preds = %if.else3.i121
  %cmp7.i122 = icmp ugt i32 %and, 1074191212
  %..i123 = select i1 %cmp7.i122, double* getelementptr inbounds ([6 x double]* @qs3, i32 0, i32 0), double* getelementptr inbounds ([6 x double]* @qs226, i32 0, i32 0)
  %.77.i = select i1 %cmp7.i122, double* getelementptr inbounds ([6 x double]* @qr3, i32 0, i32 0), double* getelementptr inbounds ([6 x double]* @qr225, i32 0, i32 0)
  br label %if.end12.i146

if.end12.i146:                                    ; preds = %if.else6.i124, %if.else3.i121, %if.else.i119
  %q.0.i125 = phi double* [ getelementptr inbounds ([6 x double]* @qs824, i32 0, i32 0), %if.else.i119 ], [ getelementptr inbounds ([6 x double]* @qs5, i32 0, i32 0), %if.else3.i121 ], [ %..i123, %if.else6.i124 ]
  %p.0.i126 = phi double* [ getelementptr inbounds ([6 x double]* @qr823, i32 0, i32 0), %if.else.i119 ], [ getelementptr inbounds ([6 x double]* @qr5, i32 0, i32 0), %if.else3.i121 ], [ %.77.i, %if.else6.i124 ]
  %12 = load double* %p.0.i126, align 8, !tbaa !429
  %arrayidx14.i128 = getelementptr inbounds double* %p.0.i126, i32 1
  %13 = load double* %arrayidx14.i128, align 8, !tbaa !429
  %arrayidx15.i129 = getelementptr inbounds double* %p.0.i126, i32 2
  %14 = load double* %arrayidx15.i129, align 8, !tbaa !429
  %arrayidx16.i130 = getelementptr inbounds double* %p.0.i126, i32 3
  %15 = load double* %arrayidx16.i130, align 8, !tbaa !429
  %arrayidx17.i131 = getelementptr inbounds double* %p.0.i126, i32 4
  %16 = load double* %arrayidx17.i131, align 8, !tbaa !429
  %arrayidx18.i = getelementptr inbounds double* %p.0.i126, i32 5
  %17 = load double* %arrayidx18.i, align 8, !tbaa !429
  %mul19.i132 = fmul double %div.i, %17
  %add.i133 = fadd double %16, %mul19.i132
  %mul20.i = fmul double %div.i, %add.i133
  %add21.i = fadd double %15, %mul20.i
  %mul22.i = fmul double %div.i, %add21.i
  %add23.i = fadd double %14, %mul22.i
  %mul24.i = fmul double %div.i, %add23.i
  %add25.i = fadd double %13, %mul24.i
  %mul26.i = fmul double %div.i, %add25.i
  %add27.i = fadd double %12, %mul26.i
  %18 = load double* %q.0.i125, align 8, !tbaa !429
  %arrayidx29.i134 = getelementptr inbounds double* %q.0.i125, i32 1
  %19 = load double* %arrayidx29.i134, align 8, !tbaa !429
  %arrayidx30.i135 = getelementptr inbounds double* %q.0.i125, i32 2
  %20 = load double* %arrayidx30.i135, align 8, !tbaa !429
  %arrayidx31.i136 = getelementptr inbounds double* %q.0.i125, i32 3
  %21 = load double* %arrayidx31.i136, align 8, !tbaa !429
  %arrayidx32.i = getelementptr inbounds double* %q.0.i125, i32 4
  %22 = load double* %arrayidx32.i, align 8, !tbaa !429
  %arrayidx33.i = getelementptr inbounds double* %q.0.i125, i32 5
  %23 = load double* %arrayidx33.i, align 8, !tbaa !429
  %mul34.i137 = fmul double %div.i, %23
  %add35.i138 = fadd double %22, %mul34.i137
  %mul36.i139 = fmul double %div.i, %add35.i138
  %add37.i140 = fadd double %21, %mul36.i139
  %mul38.i141 = fmul double %div.i, %add37.i140
  %add39.i142 = fadd double %20, %mul38.i141
  %mul40.i143 = fmul double %div.i, %add39.i142
  %add41.i144 = fadd double %19, %mul40.i143
  %mul42.i = fmul double %div.i, %add41.i144
  %add43.i145 = fadd double %18, %mul42.i
  %mul44.i = fmul double %div.i, %add43.i145
  %add45.i = fadd double %mul44.i, 1.000000e+00
  %div46.i = fdiv double %add27.i, %add45.i
  %add47.i = fadd double %div46.i, 3.750000e-01
  br label %qone.exit

qone.exit:                                        ; preds = %if.end12.i146, %if.else29
  %retval.0.i150 = phi double [ %add43.i, %if.end12.i146 ], [ 1.000000e+00, %if.else29 ]
  %.pn.i = phi double [ %add47.i, %if.end12.i146 ], [ 3.750000e-01, %if.else29 ]
  %retval.0.i147 = fdiv double %.pn.i, %x
  %mul32 = fmul double %ss.0, %retval.0.i150
  %mul33 = fmul double %cc.0, %retval.0.i147
  %add34 = fadd double %mul32, %mul33
  %mul35 = fmul double %add34, 0x3FE20DD750429B6D
  %call36 = tail call double @__ieee754_sqrt(double %x) #8
  %div37 = fdiv double %mul35, %call36
  br label %return

if.end39:                                         ; preds = %if.end7
  %cmp40 = icmp ult i32 %and, 1016070145
  br i1 %cmp40, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.end39
  %div42 = fdiv double 0xBFE45F306DC9C883, %x
  br label %return

if.end43:                                         ; preds = %if.end39
  %mul44 = fmul double %x, %x
  %mul45 = fmul double %mul44, 0xBE78AC00569105B8
  %add46 = fadd double %mul45, 0x3EF8AB038FA6B88E
  %mul47 = fmul double %mul44, %add46
  %add48 = fadd double %mul47, 0xBF5F55E54844F50F
  %mul49 = fmul double %mul44, %add48
  %add50 = fadd double %mul49, 0x3FA9D3C776292CD1
  %mul51 = fmul double %mul44, %add50
  %add52 = fadd double %mul51, 0xBFC91866143CBC8A
  %mul53 = fmul double %mul44, 0x3DB25039DACA772A
  %add54 = fadd double %mul53, 0x3E3ABF1D5BA69A86
  %mul55 = fmul double %mul44, %add54
  %add56 = fadd double %mul55, 0x3EB6C05A894E8CA6
  %mul57 = fmul double %mul44, %add56
  %add58 = fadd double %mul57, 0x3F2A8C896C257764
  %mul59 = fmul double %mul44, %add58
  %add60 = fadd double %mul59, 0x3F94650D3F4DA9F0
  %mul61 = fmul double %mul44, %add60
  %add62 = fadd double %mul61, 1.000000e+00
  %div63 = fdiv double %add52, %add62
  %mul64 = fmul double %div63, %x
  %call65 = tail call double @__ieee754_j1(double %x) #9
  %call66 = tail call double @log(double %x) #8
  %mul67 = fmul double %call65, %call66
  %div68 = fdiv double 1.000000e+00, %x
  %sub69 = fsub double %mul67, %div68
  %mul70 = fmul double %sub69, 0x3FE45F306DC9C883
  %add71 = fadd double %mul64, %mul70
  br label %return

return:                                           ; preds = %if.end43, %if.then41, %qone.exit, %if.then25, %if.end4, %if.end, %if.then
  %retval.0 = phi double [ %div, %if.then ], [ %div42, %if.then41 ], [ %add71, %if.end43 ], [ 0xFFF0000000000000, %if.end ], [ 0x7FF8000000000000, %if.end4 ], [ %div28, %if.then25 ], [ %div37, %qone.exit ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_jn(i32 %n, double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %sub = sub nsw i32 0, %ew_u.sroa.0.0.extract.trunc
  %or = or i32 %ew_u.sroa.0.0.extract.trunc, %sub
  %shr = lshr i32 %or, 31
  %or2 = or i32 %and, %shr
  %cmp = icmp ugt i32 %or2, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %add = fadd double %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp3 = icmp slt i32 %n, 0
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %if.end
  %sub5 = sub nsw i32 0, %n
  %sub6 = fsub double -0.000000e+00, %x
  %xor = xor i32 %ew_u.sroa.0.4.extract.trunc, -2147483648
  br label %if.end7

if.end7:                                          ; preds = %if.then4, %if.end
  %hx.0 = phi i32 [ %xor, %if.then4 ], [ %ew_u.sroa.0.4.extract.trunc, %if.end ]
  %x.addr.0 = phi double [ %sub6, %if.then4 ], [ %x, %if.end ]
  %n.addr.0 = phi i32 [ %sub5, %if.then4 ], [ %n, %if.end ]
  switch i32 %n.addr.0, label %if.end14 [
    i32 0, label %if.then9
    i32 1, label %if.then12
  ]

if.then9:                                         ; preds = %if.end7
  %call = tail call double @__ieee754_j0(double %x.addr.0) #8
  br label %return

if.then12:                                        ; preds = %if.end7
  %call13 = tail call double @__ieee754_j1(double %x.addr.0) #8
  br label %return

if.end14:                                         ; preds = %if.end7
  %shr16305 = lshr i32 %hx.0, 31
  %and17 = and i32 %shr16305, %n.addr.0
  %call18 = tail call double @fabs(double %x.addr.0) #8
  %or19 = or i32 %and, %ew_u.sroa.0.0.extract.trunc
  %cmp20 = icmp eq i32 %or19, 0
  %cmp21 = icmp ugt i32 %and, 2146435071
  %or.cond = or i1 %cmp20, %cmp21
  br i1 %or.cond, label %if.end159, label %if.else

if.else:                                          ; preds = %if.end14
  %conv = sitofp i32 %n.addr.0 to double
  %cmp23 = fcmp ugt double %conv, %call18
  br i1 %cmp23, label %if.else59, label %if.then25

if.then25:                                        ; preds = %if.else
  %cmp26 = icmp ugt i32 %and, 1389363199
  br i1 %cmp26, label %if.then28, label %if.else48

if.then28:                                        ; preds = %if.then25
  %and29 = and i32 %n.addr.0, 3
  switch i32 %and29, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb33
    i32 2, label %sw.bb38
    i32 3, label %sw.bb43
  ]

sw.bb:                                            ; preds = %if.then28
  %call30 = tail call double @cos(double %call18) #8
  %call31 = tail call double @sin(double %call18) #8
  %add32 = fadd double %call30, %call31
  br label %sw.epilog

sw.bb33:                                          ; preds = %if.then28
  %call34 = tail call double @cos(double %call18) #8
  %call36 = tail call double @sin(double %call18) #8
  %add37 = fsub double %call36, %call34
  br label %sw.epilog

sw.bb38:                                          ; preds = %if.then28
  %call39 = tail call double @cos(double %call18) #8
  %sub40 = fsub double -0.000000e+00, %call39
  %call41 = tail call double @sin(double %call18) #8
  %sub42 = fsub double %sub40, %call41
  br label %sw.epilog

sw.bb43:                                          ; preds = %if.then28
  %call44 = tail call double @cos(double %call18) #8
  %call45 = tail call double @sin(double %call18) #8
  %sub46 = fsub double %call44, %call45
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb43, %sw.bb38, %sw.bb33, %sw.bb, %if.then28
  %temp.0 = phi double [ undef, %if.then28 ], [ %sub46, %sw.bb43 ], [ %sub42, %sw.bb38 ], [ %add37, %sw.bb33 ], [ %add32, %sw.bb ]
  %mul = fmul double %temp.0, 0x3FE20DD750429B6D
  %call47 = tail call double @__ieee754_sqrt(double %call18) #8
  %div = fdiv double %mul, %call47
  br label %if.end159

if.else48:                                        ; preds = %if.then25
  %call49 = tail call double @__ieee754_j0(double %call18) #8
  %call50 = tail call double @__ieee754_j1(double %call18) #8
  %cmp51300 = icmp sgt i32 %n.addr.0, 1
  br i1 %cmp51300, label %for.body.preheader, label %if.end159

for.body.preheader:                               ; preds = %if.else48
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.0303 = phi i32 [ %inc, %for.body ], [ 1, %for.body.preheader ]
  %b.0302 = phi double [ %sub57, %for.body ], [ %call50, %for.body.preheader ]
  %a.0301 = phi double [ %b.0302, %for.body ], [ %call49, %for.body.preheader ]
  %add53 = shl nsw i32 %i.0303, 1
  %conv54 = sitofp i32 %add53 to double
  %div55 = fdiv double %conv54, %call18
  %mul56 = fmul double %b.0302, %div55
  %sub57 = fsub double %mul56, %a.0301
  %inc = add nsw i32 %i.0303, 1
  %exitcond306 = icmp eq i32 %inc, %n.addr.0
  br i1 %exitcond306, label %if.end159.loopexit, label %for.body

if.else59:                                        ; preds = %if.else
  %cmp60 = icmp ult i32 %and, 1041235968
  br i1 %cmp60, label %if.then62, label %if.else80

if.then62:                                        ; preds = %if.else59
  %cmp63 = icmp sgt i32 %n.addr.0, 33
  br i1 %cmp63, label %if.end159, label %if.else66

if.else66:                                        ; preds = %if.then62
  %mul67 = fmul double %call18, 5.000000e-01
  %cmp69271 = icmp slt i32 %n.addr.0, 2
  br i1 %cmp69271, label %for.end77, label %for.body71.preheader

for.body71.preheader:                             ; preds = %if.else66
  br label %for.body71

for.body71:                                       ; preds = %for.body71, %for.body71.preheader
  %i.1274 = phi i32 [ %inc76, %for.body71 ], [ 2, %for.body71.preheader ]
  %b.1273 = phi double [ %mul74, %for.body71 ], [ %mul67, %for.body71.preheader ]
  %a.1272 = phi double [ %mul73, %for.body71 ], [ 1.000000e+00, %for.body71.preheader ]
  %conv72 = sitofp i32 %i.1274 to double
  %mul73 = fmul double %a.1272, %conv72
  %mul74 = fmul double %mul67, %b.1273
  %inc76 = add nsw i32 %i.1274, 1
  %exitcond = icmp eq i32 %i.1274, %n.addr.0
  br i1 %exitcond, label %for.end77.loopexit, label %for.body71

for.end77.loopexit:                               ; preds = %for.body71
  %mul74.lcssa = phi double [ %mul74, %for.body71 ]
  %mul73.lcssa = phi double [ %mul73, %for.body71 ]
  br label %for.end77

for.end77:                                        ; preds = %for.end77.loopexit, %if.else66
  %b.1.lcssa = phi double [ %mul67, %if.else66 ], [ %mul74.lcssa, %for.end77.loopexit ]
  %a.1.lcssa = phi double [ 1.000000e+00, %if.else66 ], [ %mul73.lcssa, %for.end77.loopexit ]
  %div78 = fdiv double %b.1.lcssa, %a.1.lcssa
  br label %if.end159

if.else80:                                        ; preds = %if.else59
  %add83 = shl nsw i32 %n.addr.0, 1
  %conv84 = sitofp i32 %add83 to double
  %div85 = fdiv double %conv84, %call18
  %div86 = fdiv double 2.000000e+00, %call18
  %add87 = fadd double %div85, %div86
  %mul88 = fmul double %div85, %add87
  %sub89 = fadd double %mul88, -1.000000e+00
  %cmp90294 = fcmp olt double %sub89, 1.000000e+09
  br i1 %cmp90294, label %while.body.preheader, label %while.end

while.body.preheader:                             ; preds = %if.else80
  br label %while.body

while.body:                                       ; preds = %while.body, %while.body.preheader
  %k.0298 = phi i32 [ %add92, %while.body ], [ 1, %while.body.preheader ]
  %q1.0297 = phi double [ %sub95, %while.body ], [ %sub89, %while.body.preheader ]
  %q0.0296 = phi double [ %q1.0297, %while.body ], [ %div85, %while.body.preheader ]
  %z.0295 = phi double [ %add93, %while.body ], [ %add87, %while.body.preheader ]
  %add92 = add nsw i32 %k.0298, 1
  %add93 = fadd double %div86, %z.0295
  %mul94 = fmul double %add93, %q1.0297
  %sub95 = fsub double %mul94, %q0.0296
  %cmp90 = fcmp olt double %sub95, 1.000000e+09
  br i1 %cmp90, label %while.body, label %while.end.loopexit

while.end.loopexit:                               ; preds = %while.body
  %add92.lcssa = phi i32 [ %add92, %while.body ]
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.else80
  %k.0.lcssa = phi i32 [ 1, %if.else80 ], [ %add92.lcssa, %while.end.loopexit ]
  %add97 = add nsw i32 %k.0.lcssa, %n.addr.0
  %mul98 = shl nsw i32 %add97, 1
  %cmp100290 = icmp slt i32 %mul98, %add83
  br i1 %cmp100290, label %for.end109, label %for.body102.preheader

for.body102.preheader:                            ; preds = %while.end
  br label %for.body102

for.body102:                                      ; preds = %for.body102, %for.body102.preheader
  %t.0292 = phi double [ %div106, %for.body102 ], [ 0.000000e+00, %for.body102.preheader ]
  %i.2291 = phi i32 [ %sub108, %for.body102 ], [ %mul98, %for.body102.preheader ]
  %conv103 = sitofp i32 %i.2291 to double
  %div104 = fdiv double %conv103, %call18
  %sub105 = fsub double %div104, %t.0292
  %div106 = fdiv double 1.000000e+00, %sub105
  %sub108 = add nsw i32 %i.2291, -2
  %cmp100 = icmp slt i32 %sub108, %add83
  br i1 %cmp100, label %for.end109.loopexit, label %for.body102

for.end109.loopexit:                              ; preds = %for.body102
  %div106.lcssa = phi double [ %div106, %for.body102 ]
  br label %for.end109

for.end109:                                       ; preds = %for.end109.loopexit, %while.end
  %t.0.lcssa = phi double [ 0.000000e+00, %while.end ], [ %div106.lcssa, %for.end109.loopexit ]
  %mul112 = fmul double %conv, %div86
  %call113 = tail call double @fabs(double %mul112) #8
  %call114 = tail call double @log(double %call113) #8
  %mul115 = fmul double %conv, %call114
  %cmp116 = fcmp olt double %mul115, 0x40862E42FEFA39EF
  %sub119 = add nsw i32 %n.addr.0, -1
  %add120 = shl nsw i32 %sub119, 1
  %conv121 = sitofp i32 %add120 to double
  %cmp123276 = icmp sgt i32 %sub119, 0
  br i1 %cmp116, label %for.cond122.preheader, label %for.cond136.preheader

for.cond136.preheader:                            ; preds = %for.end109
  br i1 %cmp123276, label %for.body139.preheader, label %if.end153

for.body139.preheader:                            ; preds = %for.cond136.preheader
  br label %for.body139

for.cond122.preheader:                            ; preds = %for.end109
  br i1 %cmp123276, label %for.body125.preheader, label %if.end153

for.body125.preheader:                            ; preds = %for.cond122.preheader
  br label %for.body125

for.body125:                                      ; preds = %for.body125, %for.body125.preheader
  %i.3280 = phi i32 [ %dec, %for.body125 ], [ %sub119, %for.body125.preheader ]
  %di.0279 = phi double [ %sub129, %for.body125 ], [ %conv121, %for.body125.preheader ]
  %b.2278 = phi double [ %sub128, %for.body125 ], [ 1.000000e+00, %for.body125.preheader ]
  %a.2277 = phi double [ %b.2278, %for.body125 ], [ %t.0.lcssa, %for.body125.preheader ]
  %mul126 = fmul double %b.2278, %di.0279
  %div127 = fdiv double %mul126, %call18
  %sub128 = fsub double %div127, %a.2277
  %sub129 = fadd double %di.0279, -2.000000e+00
  %dec = add nsw i32 %i.3280, -1
  %cmp123 = icmp sgt i32 %dec, 0
  br i1 %cmp123, label %for.body125, label %if.end153.loopexit

for.body139:                                      ; preds = %for.inc150, %for.body139.preheader
  %t.1287 = phi double [ %t.2, %for.inc150 ], [ %t.0.lcssa, %for.body139.preheader ]
  %i.4286 = phi i32 [ %dec151, %for.inc150 ], [ %sub119, %for.body139.preheader ]
  %di.1285 = phi double [ %sub143, %for.inc150 ], [ %conv121, %for.body139.preheader ]
  %b.3284 = phi double [ %b.4, %for.inc150 ], [ 1.000000e+00, %for.body139.preheader ]
  %a.3283 = phi double [ %a.4, %for.inc150 ], [ %t.0.lcssa, %for.body139.preheader ]
  %mul140 = fmul double %b.3284, %di.1285
  %div141 = fdiv double %mul140, %call18
  %sub142 = fsub double %div141, %a.3283
  %sub143 = fadd double %di.1285, -2.000000e+00
  %cmp144 = fcmp ogt double %sub142, 1.000000e+100
  br i1 %cmp144, label %if.then146, label %for.inc150

if.then146:                                       ; preds = %for.body139
  %div147 = fdiv double %b.3284, %sub142
  %div148 = fdiv double %t.1287, %sub142
  br label %for.inc150

for.inc150:                                       ; preds = %if.then146, %for.body139
  %a.4 = phi double [ %div147, %if.then146 ], [ %b.3284, %for.body139 ]
  %b.4 = phi double [ 1.000000e+00, %if.then146 ], [ %sub142, %for.body139 ]
  %t.2 = phi double [ %div148, %if.then146 ], [ %t.1287, %for.body139 ]
  %dec151 = add nsw i32 %i.4286, -1
  %cmp137 = icmp sgt i32 %dec151, 0
  br i1 %cmp137, label %for.body139, label %if.end153.loopexit308

if.end153.loopexit:                               ; preds = %for.body125
  %sub128.lcssa = phi double [ %sub128, %for.body125 ]
  br label %if.end153

if.end153.loopexit308:                            ; preds = %for.inc150
  %t.2.lcssa = phi double [ %t.2, %for.inc150 ]
  %b.4.lcssa = phi double [ %b.4, %for.inc150 ]
  br label %if.end153

if.end153:                                        ; preds = %if.end153.loopexit308, %if.end153.loopexit, %for.cond122.preheader, %for.cond136.preheader
  %b.5 = phi double [ 1.000000e+00, %for.cond122.preheader ], [ 1.000000e+00, %for.cond136.preheader ], [ %sub128.lcssa, %if.end153.loopexit ], [ %b.4.lcssa, %if.end153.loopexit308 ]
  %t.3 = phi double [ %t.0.lcssa, %for.cond122.preheader ], [ %t.0.lcssa, %for.cond136.preheader ], [ %t.0.lcssa, %if.end153.loopexit ], [ %t.2.lcssa, %if.end153.loopexit308 ]
  %call154 = tail call double @__ieee754_j0(double %call18) #8
  %mul155 = fmul double %t.3, %call154
  %div156 = fdiv double %mul155, %b.5
  br label %if.end159

if.end159.loopexit:                               ; preds = %for.body
  %sub57.lcssa = phi double [ %sub57, %for.body ]
  br label %if.end159

if.end159:                                        ; preds = %if.end159.loopexit, %if.end153, %for.end77, %if.then62, %if.else48, %sw.epilog, %if.end14
  %b.6 = phi double [ %div, %sw.epilog ], [ %div78, %for.end77 ], [ %div156, %if.end153 ], [ 0.000000e+00, %if.end14 ], [ 0.000000e+00, %if.then62 ], [ %call50, %if.else48 ], [ %sub57.lcssa, %if.end159.loopexit ]
  %cmp160 = icmp eq i32 %and17, 1
  br i1 %cmp160, label %if.then162, label %return

if.then162:                                       ; preds = %if.end159
  %sub163 = fsub double -0.000000e+00, %b.6
  br label %return

return:                                           ; preds = %if.then162, %if.end159, %if.then12, %if.then9, %if.then
  %retval.0 = phi double [ %add, %if.then ], [ %call, %if.then9 ], [ %call13, %if.then12 ], [ %sub163, %if.then162 ], [ %b.6, %if.end159 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_yn(i32 %n, double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %sub = sub nsw i32 0, %ew_u.sroa.0.0.extract.trunc
  %or = or i32 %ew_u.sroa.0.0.extract.trunc, %sub
  %shr = lshr i32 %or, 31
  %or2 = or i32 %and, %shr
  %cmp = icmp ugt i32 %or2, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %add = fadd double %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %or3 = or i32 %and, %ew_u.sroa.0.0.extract.trunc
  %cmp4 = icmp eq i32 %or3, 0
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %if.end
  %cmp7 = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp7, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %cmp10 = icmp slt i32 %n, 0
  br i1 %cmp10, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end9
  %sub12 = sub nsw i32 0, %n
  %and13 = shl i32 %sub12, 1
  %shl = and i32 %and13, 2
  %sub14 = sub nsw i32 1, %shl
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end9
  %sign.0 = phi i32 [ %sub14, %if.then11 ], [ 1, %if.end9 ]
  %n.addr.0 = phi i32 [ %sub12, %if.then11 ], [ %n, %if.end9 ]
  switch i32 %n.addr.0, label %if.end22 [
    i32 0, label %if.then17
    i32 1, label %if.then20
  ]

if.then17:                                        ; preds = %if.end15
  %call = tail call double @__ieee754_y0(double %x) #8
  br label %return

if.then20:                                        ; preds = %if.end15
  %conv = sitofp i32 %sign.0 to double
  %call21 = tail call double @__ieee754_y1(double %x) #8
  %mul = fmul double %conv, %call21
  br label %return

if.end22:                                         ; preds = %if.end15
  %cmp23 = icmp eq i32 %and, 2146435072
  br i1 %cmp23, label %return, label %if.end26

if.end26:                                         ; preds = %if.end22
  %cmp27 = icmp ugt i32 %and, 1389363199
  br i1 %cmp27, label %if.then29, label %if.else

if.then29:                                        ; preds = %if.end26
  %and30 = and i32 %n.addr.0, 3
  switch i32 %and30, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb34
    i32 2, label %sw.bb39
    i32 3, label %sw.bb44
  ]

sw.bb:                                            ; preds = %if.then29
  %call31 = tail call double @sin(double %x) #8
  %call32 = tail call double @cos(double %x) #8
  %sub33 = fsub double %call31, %call32
  br label %sw.epilog

sw.bb34:                                          ; preds = %if.then29
  %call35 = tail call double @sin(double %x) #8
  %sub36 = fsub double -0.000000e+00, %call35
  %call37 = tail call double @cos(double %x) #8
  %sub38 = fsub double %sub36, %call37
  br label %sw.epilog

sw.bb39:                                          ; preds = %if.then29
  %call40 = tail call double @sin(double %x) #8
  %call42 = tail call double @cos(double %x) #8
  %add43 = fsub double %call42, %call40
  br label %sw.epilog

sw.bb44:                                          ; preds = %if.then29
  %call45 = tail call double @sin(double %x) #8
  %call46 = tail call double @cos(double %x) #8
  %add47 = fadd double %call45, %call46
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb44, %sw.bb39, %sw.bb34, %sw.bb, %if.then29
  %temp.0 = phi double [ undef, %if.then29 ], [ %add47, %sw.bb44 ], [ %add43, %sw.bb39 ], [ %sub38, %sw.bb34 ], [ %sub33, %sw.bb ]
  %mul48 = fmul double %temp.0, 0x3FE20DD750429B6D
  %call49 = tail call double @__ieee754_sqrt(double %x) #8
  %div = fdiv double %mul48, %call49
  br label %if.end72

if.else:                                          ; preds = %if.end26
  %call50 = tail call double @__ieee754_y0(double %x) #8
  %call51 = tail call double @__ieee754_y1(double %x) #8
  %1 = bitcast double %call51 to i64
  %cmp57115 = icmp sgt i32 %n.addr.0, 1
  %gh_u.sroa.0.4.extract.shift.mask = and i64 %1, -4294967296
  %cmp59116 = icmp ne i64 %gh_u.sroa.0.4.extract.shift.mask, -4503599627370496
  %or.cond117 = and i1 %cmp57115, %cmp59116
  br i1 %or.cond117, label %for.body.preheader, label %if.end72

for.body.preheader:                               ; preds = %if.else
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.0120 = phi i32 [ %inc, %for.body ], [ 1, %for.body.preheader ]
  %b.0119 = phi double [ %sub65, %for.body ], [ %call51, %for.body.preheader ]
  %a.0118 = phi double [ %b.0119, %for.body ], [ %call50, %for.body.preheader ]
  %add61 = shl nsw i32 %i.0120, 1
  %conv62 = sitofp i32 %add61 to double
  %div63 = fdiv double %conv62, %x
  %mul64 = fmul double %b.0119, %div63
  %sub65 = fsub double %mul64, %a.0118
  %2 = bitcast double %sub65 to i64
  %inc = add nsw i32 %i.0120, 1
  %cmp57 = icmp slt i32 %inc, %n.addr.0
  %gh_u67.sroa.0.4.extract.shift.mask = and i64 %2, -4294967296
  %cmp59 = icmp ne i64 %gh_u67.sroa.0.4.extract.shift.mask, -4503599627370496
  %or.cond = and i1 %cmp57, %cmp59
  br i1 %or.cond, label %for.body, label %if.end72.loopexit

if.end72.loopexit:                                ; preds = %for.body
  %sub65.lcssa = phi double [ %sub65, %for.body ]
  br label %if.end72

if.end72:                                         ; preds = %if.end72.loopexit, %if.else, %sw.epilog
  %b.1 = phi double [ %div, %sw.epilog ], [ %call51, %if.else ], [ %sub65.lcssa, %if.end72.loopexit ]
  %cmp73 = icmp sgt i32 %sign.0, 0
  br i1 %cmp73, label %return, label %if.else76

if.else76:                                        ; preds = %if.end72
  %sub77 = fsub double -0.000000e+00, %b.1
  br label %return

return:                                           ; preds = %if.else76, %if.end72, %if.end22, %if.then20, %if.then17, %if.end6, %if.end, %if.then
  %retval.0 = phi double [ %add, %if.then ], [ %call, %if.then17 ], [ %mul, %if.then20 ], [ %sub77, %if.else76 ], [ 0xFFF0000000000000, %if.end ], [ 0x7FF8000000000000, %if.end6 ], [ 0.000000e+00, %if.end22 ], [ %b.1, %if.end72 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define x86_fp80 @__ieee754_hypotl(x86_fp80 %x, x86_fp80 %y) #2 {
entry:
  %mul = fmul x86_fp80 %x, %x
  %mul1 = fmul x86_fp80 %y, %y
  %add = fadd x86_fp80 %mul, %mul1
  %call = tail call x86_fp80 @sqrtl(x86_fp80 %add) #8
  ret x86_fp80 %call
}

; Function Attrs: nounwind
define double @__ieee754_log10(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %cmp = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 1048576
  br i1 %cmp, label %if.then, label %if.end13

if.then:                                          ; preds = %entry
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %or = or i32 %and, %ew_u.sroa.0.0.extract.trunc
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %return, label %if.end

if.end:                                           ; preds = %if.then
  %cmp4 = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %sub = fsub double %x, %x
  %div = fdiv double %sub, 0.000000e+00
  br label %return

if.end6:                                          ; preds = %if.end
  %mul = fmul double %x, 0x4350000000000000
  %1 = bitcast double %mul to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %1, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  br label %if.end13

if.end13:                                         ; preds = %if.end6, %entry
  %hx.0 = phi i32 [ %gh_u.sroa.0.4.extract.trunc, %if.end6 ], [ %ew_u.sroa.0.4.extract.trunc, %entry ]
  %k.0 = phi i32 [ -54, %if.end6 ], [ 0, %entry ]
  %x.addr.0 = phi double [ %mul, %if.end6 ], [ %x, %entry ]
  %cmp14 = icmp sgt i32 %hx.0, 2146435071
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end13
  %add = fadd double %x.addr.0, %x.addr.0
  br label %return

if.end16:                                         ; preds = %if.end13
  %shr = ashr i32 %hx.0, 20
  %sub17 = add nsw i32 %shr, -1023
  %add18 = add nsw i32 %sub17, %k.0
  %shr20 = lshr i32 %add18, 31
  %2 = and i32 %hx.0, 1048575
  %3 = shl nuw nsw i32 %shr20, 20
  %and21 = or i32 %3, %2
  %or23 = xor i32 %and21, 1072693248
  %add24 = add nsw i32 %shr20, %add18
  %conv = sitofp i32 %add24 to double
  %4 = bitcast double %x.addr.0 to i64
  %sh_u.sroa.0.4.insert.ext = zext i32 %or23 to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw nsw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %4, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %5 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  %mul31 = fmul double %conv, 0x3D59FEF311F12B36
  %call = tail call double @log(double %5) #8
  %mul32 = fmul double %call, 0x3FDBCB7B1526E50E
  %add33 = fadd double %mul31, %mul32
  %mul34 = fmul double %conv, 0x3FD34413509F6000
  %add35 = fadd double %mul34, %add33
  br label %return

return:                                           ; preds = %if.end16, %if.then15, %if.then5, %if.then
  %retval.0 = phi double [ %div, %if.then5 ], [ %add, %if.then15 ], [ %add35, %if.end16 ], [ 0xFFF0000000000000, %if.then ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_remainder(double %x, double %p) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %1 = bitcast double %p to i64
  %ew_u3.sroa.0.4.extract.shift = lshr i64 %1, 32
  %ew_u3.sroa.0.4.extract.trunc = trunc i64 %ew_u3.sroa.0.4.extract.shift to i32
  %ew_u3.sroa.0.0.extract.trunc = trunc i64 %1 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, -2147483648
  %and10 = and i32 %ew_u3.sroa.0.4.extract.trunc, 2147483647
  %and11 = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %or = or i32 %and10, %ew_u3.sroa.0.0.extract.trunc
  %cmp = icmp eq i32 %or, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mul = fmul double %x, %p
  %div = fdiv double %mul, %mul
  br label %return

if.end:                                           ; preds = %entry
  %cmp13 = icmp ugt i32 %and11, 2146435071
  br i1 %cmp13, label %if.then17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %cmp14 = icmp ugt i32 %and10, 2146435071
  br i1 %cmp14, label %land.lhs.true, label %if.end21

land.lhs.true:                                    ; preds = %lor.lhs.false
  %sub = add nsw i32 %and10, -2146435072
  %or15 = or i32 %sub, %ew_u3.sroa.0.0.extract.trunc
  %cmp16 = icmp eq i32 %or15, 0
  br i1 %cmp16, label %if.end21, label %if.then17

if.then17:                                        ; preds = %land.lhs.true, %if.end
  %mul18 = fmul double %x, %p
  %div20 = fdiv double %mul18, %mul18
  br label %return

if.end21:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %cmp22 = icmp ult i32 %and10, 2145386496
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  %add = fadd double %p, %p
  %call = tail call double @__ieee754_fmod(double %x, double %add) #8
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %x.addr.0 = phi double [ %call, %if.then23 ], [ %x, %if.end21 ]
  %sub25 = sub nsw i32 %and11, %and10
  %sub26 = sub i32 %ew_u.sroa.0.0.extract.trunc, %ew_u3.sroa.0.0.extract.trunc
  %or27 = or i32 %sub25, %sub26
  %cmp28 = icmp eq i32 %or27, 0
  br i1 %cmp28, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.end24
  %mul30 = fmul double %x.addr.0, 0.000000e+00
  br label %return

if.end31:                                         ; preds = %if.end24
  %call32 = tail call double @fabs(double %x.addr.0) #8
  %call33 = tail call double @fabs(double %p) #8
  %cmp34 = icmp ult i32 %and10, 2097152
  br i1 %cmp34, label %if.then35, label %if.else

if.then35:                                        ; preds = %if.end31
  %add36 = fadd double %call32, %call32
  %cmp37 = fcmp ogt double %add36, %call33
  br i1 %cmp37, label %if.then38, label %do.body56

if.then38:                                        ; preds = %if.then35
  %sub39 = fsub double %call32, %call33
  %add40 = fadd double %sub39, %sub39
  %cmp41 = fcmp ult double %add40, %call33
  br i1 %cmp41, label %do.body56, label %if.then42

if.then42:                                        ; preds = %if.then38
  %sub43 = fsub double %sub39, %call33
  br label %do.body56

if.else:                                          ; preds = %if.end31
  %mul46 = fmul double %call33, 5.000000e-01
  %cmp47 = fcmp ogt double %call32, %mul46
  br i1 %cmp47, label %if.then48, label %do.body56

if.then48:                                        ; preds = %if.else
  %sub49 = fsub double %call32, %call33
  %cmp50 = fcmp ult double %sub49, %mul46
  br i1 %cmp50, label %do.body56, label %if.then51

if.then51:                                        ; preds = %if.then48
  %sub52 = fsub double %sub49, %call33
  br label %do.body56

do.body56:                                        ; preds = %if.then51, %if.then48, %if.else, %if.then42, %if.then38, %if.then35
  %x.addr.1 = phi double [ %sub43, %if.then42 ], [ %sub39, %if.then38 ], [ %call32, %if.then35 ], [ %sub52, %if.then51 ], [ %sub49, %if.then48 ], [ %call32, %if.else ]
  %2 = bitcast double %x.addr.1 to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %2, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %xor = xor i32 %gh_u.sroa.0.4.extract.trunc, %and
  %sh_u.sroa.0.4.insert.ext = zext i32 %xor to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %2, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %3 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  br label %return

return:                                           ; preds = %do.body56, %if.then29, %if.then17, %if.then
  %retval.0 = phi double [ %div, %if.then ], [ %div20, %if.then17 ], [ %mul30, %if.then29 ], [ %3, %do.body56 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define i32 @__ieee754_rem_pio2(double %x, double* %y) #2 {
entry:
  %tx = alloca [3 x double], align 8
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ult i32 %and, 1072243196
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double %x, double* %y, align 4, !tbaa !429
  %arrayidx1 = getelementptr inbounds double* %y, i32 1
  store double 0.000000e+00, double* %arrayidx1, align 4, !tbaa !429
  br label %return

if.end:                                           ; preds = %entry
  %cmp2 = icmp ult i32 %and, 1073928572
  br i1 %cmp2, label %if.then3, label %if.end40

if.then3:                                         ; preds = %if.end
  %cmp4 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp4, label %if.then5, label %if.else22

if.then5:                                         ; preds = %if.then3
  %sub = fadd double %x, 0xBFF921FB54400000
  %cmp6 = icmp eq i32 %and, 1073291771
  br i1 %cmp6, label %if.else, label %if.then7

if.then7:                                         ; preds = %if.then5
  %sub8 = fadd double %sub, 0xBDD0B4611A626331
  store double %sub8, double* %y, align 4, !tbaa !429
  %sub11 = fsub double %sub, %sub8
  %sub12 = fadd double %sub11, 0xBDD0B4611A626331
  %arrayidx13 = getelementptr inbounds double* %y, i32 1
  store double %sub12, double* %arrayidx13, align 4, !tbaa !429
  br label %return

if.else:                                          ; preds = %if.then5
  %sub14 = fadd double %sub, 0xBDD0B4611A600000
  %sub15 = fadd double %sub14, 0xBBA3198A2E037073
  store double %sub15, double* %y, align 4, !tbaa !429
  %sub18 = fsub double %sub14, %sub15
  %sub19 = fadd double %sub18, 0xBBA3198A2E037073
  %arrayidx20 = getelementptr inbounds double* %y, i32 1
  store double %sub19, double* %arrayidx20, align 4, !tbaa !429
  br label %return

if.else22:                                        ; preds = %if.then3
  %add = fadd double %x, 0x3FF921FB54400000
  %cmp23 = icmp eq i32 %and, 1073291771
  br i1 %cmp23, label %if.else31, label %if.then24

if.then24:                                        ; preds = %if.else22
  %add25 = fadd double %add, 0x3DD0B4611A626331
  store double %add25, double* %y, align 4, !tbaa !429
  %sub28 = fsub double %add, %add25
  %add29 = fadd double %sub28, 0x3DD0B4611A626331
  %arrayidx30 = getelementptr inbounds double* %y, i32 1
  store double %add29, double* %arrayidx30, align 4, !tbaa !429
  br label %return

if.else31:                                        ; preds = %if.else22
  %add32 = fadd double %add, 0x3DD0B4611A600000
  %add33 = fadd double %add32, 0x3BA3198A2E037073
  store double %add33, double* %y, align 4, !tbaa !429
  %sub36 = fsub double %add32, %add33
  %add37 = fadd double %sub36, 0x3BA3198A2E037073
  %arrayidx38 = getelementptr inbounds double* %y, i32 1
  store double %add37, double* %arrayidx38, align 4, !tbaa !429
  br label %return

if.end40:                                         ; preds = %if.end
  %cmp41 = icmp ult i32 %and, 1094263292
  br i1 %cmp41, label %if.then42, label %if.end120

if.then42:                                        ; preds = %if.end40
  %call = tail call double @fabs(double %x) #8
  %mul = fmul double %call, 0x3FE45F306DC9C883
  %add43 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add43 to i32
  %conv44 = sitofp i32 %conv to double
  %mul45 = fmul double %conv44, 0x3FF921FB54400000
  %sub46 = fsub double %call, %mul45
  %mul47 = fmul double %conv44, 0x3DD0B4611A626331
  %cmp48 = icmp slt i32 %conv, 32
  br i1 %cmp48, label %land.lhs.true, label %if.else57

land.lhs.true:                                    ; preds = %if.then42
  %sub50 = add nsw i32 %conv, -1
  %arrayidx51 = getelementptr inbounds [32 x i32]* @npio2_hw35, i32 0, i32 %sub50
  %1 = load i32* %arrayidx51, align 4, !tbaa !433
  %cmp52 = icmp eq i32 %and, %1
  br i1 %cmp52, label %if.else57, label %if.then54

if.then54:                                        ; preds = %land.lhs.true
  %sub55 = fsub double %sub46, %mul47
  store double %sub55, double* %y, align 4, !tbaa !429
  br label %if.end104

if.else57:                                        ; preds = %land.lhs.true, %if.then42
  %shr275 = lshr i32 %and, 20
  %sub58 = fsub double %sub46, %mul47
  store double %sub58, double* %y, align 4, !tbaa !429
  %2 = bitcast double %sub58 to i64
  %gh_u61.sroa.0.4.extract.shift = lshr i64 %2, 52
  %shr67 = trunc i64 %gh_u61.sroa.0.4.extract.shift to i32
  %and68 = and i32 %shr67, 2047
  %sub69 = sub i32 %shr275, %and68
  %cmp70 = icmp sgt i32 %sub69, 16
  br i1 %cmp70, label %if.then72, label %if.end104

if.then72:                                        ; preds = %if.else57
  %mul73 = fmul double %conv44, 0x3DD0B4611A600000
  %sub74 = fsub double %sub46, %mul73
  %mul75 = fmul double %conv44, 0x3BA3198A2E037073
  %sub76 = fsub double %sub46, %sub74
  %sub77 = fsub double %sub76, %mul73
  %sub78 = fsub double %mul75, %sub77
  %sub79 = fsub double %sub74, %sub78
  store double %sub79, double* %y, align 4, !tbaa !429
  %3 = bitcast double %sub79 to i64
  %gh_u82.sroa.0.4.extract.shift = lshr i64 %3, 52
  %shr88 = trunc i64 %gh_u82.sroa.0.4.extract.shift to i32
  %and89 = and i32 %shr88, 2047
  %sub90 = sub i32 %shr275, %and89
  %cmp91 = icmp sgt i32 %sub90, 49
  br i1 %cmp91, label %if.then93, label %if.end104

if.then93:                                        ; preds = %if.then72
  %mul94 = fmul double %conv44, 0x3BA3198A2E000000
  %sub95 = fsub double %sub74, %mul94
  %mul96 = fmul double %conv44, 0x397B839A252049C1
  %sub97 = fsub double %sub74, %sub95
  %sub98 = fsub double %sub97, %mul94
  %sub99 = fsub double %mul96, %sub98
  %sub100 = fsub double %sub95, %sub99
  store double %sub100, double* %y, align 4, !tbaa !429
  br label %if.end104

if.end104:                                        ; preds = %if.then93, %if.then72, %if.else57, %if.then54
  %4 = phi double [ %sub55, %if.then54 ], [ %sub100, %if.then93 ], [ %sub79, %if.then72 ], [ %sub58, %if.else57 ]
  %r.0 = phi double [ %sub46, %if.then54 ], [ %sub95, %if.then93 ], [ %sub74, %if.then72 ], [ %sub46, %if.else57 ]
  %w.0 = phi double [ %mul47, %if.then54 ], [ %sub99, %if.then93 ], [ %sub78, %if.then72 ], [ %mul47, %if.else57 ]
  %sub106 = fsub double %r.0, %4
  %sub107 = fsub double %sub106, %w.0
  %arrayidx108 = getelementptr inbounds double* %y, i32 1
  store double %sub107, double* %arrayidx108, align 4, !tbaa !429
  %cmp109 = icmp slt i32 %gh_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp109, label %if.then111, label %return

if.then111:                                       ; preds = %if.end104
  %sub113 = fsub double -0.000000e+00, %4
  store double %sub113, double* %y, align 4, !tbaa !429
  %sub116 = fsub double -0.000000e+00, %sub107
  store double %sub116, double* %arrayidx108, align 4, !tbaa !429
  %sub118 = sub nsw i32 0, %conv
  br label %return

if.end120:                                        ; preds = %if.end40
  %cmp121 = icmp ugt i32 %and, 2146435071
  br i1 %cmp121, label %if.then123, label %do.body128

if.then123:                                       ; preds = %if.end120
  %sub124 = fsub double %x, %x
  %arrayidx125 = getelementptr inbounds double* %y, i32 1
  store double %sub124, double* %arrayidx125, align 4, !tbaa !429
  store double %sub124, double* %y, align 4, !tbaa !429
  br label %return

do.body128:                                       ; preds = %if.end120
  %shr138274 = lshr i32 %and, 20
  %sub139 = add nsw i32 %shr138274, -1046
  %shl = shl i32 %sub139, 20
  %sub142 = sub nsw i32 %and, %shl
  %sh_u.sroa.0.4.insert.ext = zext i32 %sub142 to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %0, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %5 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  %conv149 = fptosi double %5 to i32
  %conv150 = sitofp i32 %conv149 to double
  %arrayidx151 = getelementptr inbounds [3 x double]* %tx, i32 0, i32 0
  store double %conv150, double* %arrayidx151, align 8, !tbaa !429
  %sub153 = fsub double %5, %conv150
  %mul154 = fmul double %sub153, 0x4170000000000000
  %conv149.1 = fptosi double %mul154 to i32
  %conv150.1 = sitofp i32 %conv149.1 to double
  %arrayidx151.1 = getelementptr inbounds [3 x double]* %tx, i32 0, i32 1
  store double %conv150.1, double* %arrayidx151.1, align 8, !tbaa !429
  %sub153.1 = fsub double %mul154, %conv150.1
  %mul154.1 = fmul double %sub153.1, 0x4170000000000000
  %arrayidx155 = getelementptr inbounds [3 x double]* %tx, i32 0, i32 2
  store double %mul154.1, double* %arrayidx155, align 8, !tbaa !429
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %do.body128
  %nx.0 = phi i32 [ 3, %do.body128 ], [ %sub156, %while.cond ]
  %sub156 = add nsw i32 %nx.0, -1
  %arrayidx157 = getelementptr inbounds [3 x double]* %tx, i32 0, i32 %sub156
  %6 = load double* %arrayidx157, align 8, !tbaa !429
  %cmp158 = fcmp oeq double %6, 0.000000e+00
  br i1 %cmp158, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond
  %nx.0.lcssa = phi i32 [ %nx.0, %while.cond ]
  %call160 = call i32 @__kernel_rem_pio2(double* %arrayidx151, double* %y, i32 %sub139, i32 %nx.0.lcssa, i32 2, i32* getelementptr inbounds ([66 x i32]* @two_over_pi36, i32 0, i32 0)) #8
  %cmp161 = icmp slt i32 %gh_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp161, label %if.then163, label %return

if.then163:                                       ; preds = %while.end
  %7 = load double* %y, align 4, !tbaa !429
  %sub165 = fsub double -0.000000e+00, %7
  store double %sub165, double* %y, align 4, !tbaa !429
  %arrayidx167 = getelementptr inbounds double* %y, i32 1
  %8 = load double* %arrayidx167, align 4, !tbaa !429
  %sub168 = fsub double -0.000000e+00, %8
  store double %sub168, double* %arrayidx167, align 4, !tbaa !429
  %sub170 = sub nsw i32 0, %call160
  br label %return

return:                                           ; preds = %if.then163, %while.end, %if.then123, %if.then111, %if.end104, %if.else31, %if.then24, %if.else, %if.then7, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ %sub118, %if.then111 ], [ 0, %if.then123 ], [ %sub170, %if.then163 ], [ 1, %if.else ], [ 1, %if.then7 ], [ -1, %if.else31 ], [ -1, %if.then24 ], [ %conv, %if.end104 ], [ %call160, %while.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define float @__ieee754_lgammaf_r(float %x, i32* nocapture %signgamp) #2 {
entry:
  %0 = bitcast float %x to i32
  store i32 1, i32* %signgamp, align 4, !tbaa !433
  %and = and i32 %0, 2147483647
  %cmp = icmp ugt i32 %and, 2139095039
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mul = fmul float %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %return, label %if.end3

if.end3:                                          ; preds = %if.end
  %cmp4 = icmp ult i32 %and, 478150656
  %cmp6 = icmp slt i32 %0, 0
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %if.end3
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then5
  store i32 -1, i32* %signgamp, align 4, !tbaa !433
  %sub = fsub float -0.000000e+00, %x
  %call = tail call float @logf(float %sub) #8
  %sub8 = fsub float -0.000000e+00, %call
  br label %return

if.else:                                          ; preds = %if.then5
  %call9 = tail call float @logf(float %x) #8
  %sub10 = fsub float -0.000000e+00, %call9
  br label %return

if.end11:                                         ; preds = %if.end3
  br i1 %cmp6, label %if.then13, label %if.end28

if.then13:                                        ; preds = %if.end11
  %cmp14 = icmp ugt i32 %and, 1258291199
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.then13
  %cmp.i = icmp ult i32 %and, 1048576000
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.end16
  %mul.i = fmul float %x, 0x400921FB60000000
  %call.i = tail call float @__kernel_sinf(float %mul.i, float 0.000000e+00, i32 0) #8, !parents_inline !437
  br label %sin_pif.exit

if.end.i:                                         ; preds = %if.end16
  %sub.i = fsub float -0.000000e+00, %x
  %call1.i = tail call float @floorf(float %sub.i) #8, !parents_inline !437
  %cmp2.i = fcmp une float %call1.i, %sub.i
  br i1 %cmp2.i, label %if.then3.i, label %if.else.i

if.then3.i:                                       ; preds = %if.end.i
  %mul4.i = fmul float %x, -5.000000e-01
  %call5.i = tail call float @floorf(float %mul4.i) #8, !parents_inline !437
  %sub6.i = fsub float %mul4.i, %call5.i
  %mul7.i = fmul float %sub6.i, 2.000000e+00
  %mul8.i = fmul float %mul7.i, 4.000000e+00
  %conv.i = fptosi float %mul8.i to i32
  br label %if.end25.i

if.else.i:                                        ; preds = %if.end.i
  %cmp9.i = icmp ugt i32 %and, 1266679807
  br i1 %cmp9.i, label %sw.bb.i, label %if.else12.i

if.else12.i:                                      ; preds = %if.else.i
  %cmp13.i = icmp ult i32 %and, 1258291200
  br i1 %cmp13.i, label %if.then15.i, label %do.body17.i

if.then15.i:                                      ; preds = %if.else12.i
  %add.i = fsub float 8.388608e+06, %x
  br label %do.body17.i

do.body17.i:                                      ; preds = %if.then15.i, %if.else12.i
  %z.0.i = phi float [ %add.i, %if.then15.i ], [ %call1.i, %if.else12.i ]
  %1 = bitcast float %z.0.i to i32
  %and22.i = and i32 %1, 1
  %conv23.i = sitofp i32 %and22.i to float
  %shl.i = shl nuw nsw i32 %and22.i, 2
  br label %if.end25.i

if.end25.i:                                       ; preds = %do.body17.i, %if.then3.i
  %n.0.i = phi i32 [ %conv.i, %if.then3.i ], [ %shl.i, %do.body17.i ]
  %y.0.i = phi float [ %mul7.i, %if.then3.i ], [ %conv23.i, %do.body17.i ]
  switch i32 %n.0.i, label %sw.default.i [
    i32 0, label %sw.bb.i
    i32 1, label %sw.bb28.i
    i32 2, label %sw.bb28.i
    i32 3, label %sw.bb32.i
    i32 4, label %sw.bb32.i
    i32 5, label %sw.bb36.i
    i32 6, label %sw.bb36.i
  ]

sw.bb.i:                                          ; preds = %if.end25.i, %if.else.i
  %y.065.i = phi float [ %y.0.i, %if.end25.i ], [ 0.000000e+00, %if.else.i ]
  %mul26.i = fmul float %y.065.i, 0x400921FB60000000
  %call27.i = tail call float @__kernel_sinf(float %mul26.i, float 0.000000e+00, i32 0) #8, !parents_inline !437
  br label %sw.epilog.i

sw.bb28.i:                                        ; preds = %if.end25.i, %if.end25.i
  %sub29.i = fsub float 5.000000e-01, %y.0.i
  %mul30.i = fmul float %sub29.i, 0x400921FB60000000
  %call31.i = tail call float @__kernel_cosf(float %mul30.i, float 0.000000e+00) #8, !parents_inline !437
  br label %sw.epilog.i

sw.bb32.i:                                        ; preds = %if.end25.i, %if.end25.i
  %sub33.i = fsub float 1.000000e+00, %y.0.i
  %mul34.i = fmul float %sub33.i, 0x400921FB60000000
  %call35.i = tail call float @__kernel_sinf(float %mul34.i, float 0.000000e+00, i32 0) #8, !parents_inline !437
  br label %sw.epilog.i

sw.bb36.i:                                        ; preds = %if.end25.i, %if.end25.i
  %sub37.i = fadd float %y.0.i, -1.500000e+00
  %mul38.i = fmul float %sub37.i, 0x400921FB60000000
  %call39.i = tail call float @__kernel_cosf(float %mul38.i, float 0.000000e+00) #8, !parents_inline !437
  %sub40.i = fsub float -0.000000e+00, %call39.i
  br label %sw.epilog.i

sw.default.i:                                     ; preds = %if.end25.i
  %sub41.i = fadd float %y.0.i, -2.000000e+00
  %mul42.i = fmul float %sub41.i, 0x400921FB60000000
  %call43.i = tail call float @__kernel_sinf(float %mul42.i, float 0.000000e+00, i32 0) #8, !parents_inline !437
  br label %sw.epilog.i

sw.epilog.i:                                      ; preds = %sw.default.i, %sw.bb36.i, %sw.bb32.i, %sw.bb28.i, %sw.bb.i
  %y.1.i = phi float [ %call43.i, %sw.default.i ], [ %sub40.i, %sw.bb36.i ], [ %call35.i, %sw.bb32.i ], [ %call31.i, %sw.bb28.i ], [ %call27.i, %sw.bb.i ]
  %sub44.i = fsub float -0.000000e+00, %y.1.i
  br label %sin_pif.exit

sin_pif.exit:                                     ; preds = %sw.epilog.i, %if.then.i
  %retval.0.i = phi float [ %call.i, %if.then.i ], [ %sub44.i, %sw.epilog.i ]
  %cmp18 = fcmp oeq float %retval.0.i, 0.000000e+00
  br i1 %cmp18, label %return, label %if.end20

if.end20:                                         ; preds = %sin_pif.exit
  %mul21 = fmul float %retval.0.i, %x
  %call22 = tail call float @fabsf(float %mul21) #8
  %div = fdiv float 0x400921FB60000000, %call22
  %call23 = tail call float @logf(float %div) #8
  %cmp24 = fcmp olt float %retval.0.i, 0.000000e+00
  br i1 %cmp24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end20
  store i32 -1, i32* %signgamp, align 4, !tbaa !433
  br label %if.end26

if.end26:                                         ; preds = %if.then25, %if.end20
  %sub27 = fsub float -0.000000e+00, %x
  br label %if.end28

if.end28:                                         ; preds = %if.end26, %if.end11
  %nadj.0 = phi float [ %call23, %if.end26 ], [ 0.000000e+00, %if.end11 ]
  %x.addr.0 = phi float [ %sub27, %if.end26 ], [ %x, %if.end11 ]
  switch i32 %0, label %if.else32 [
    i32 -1073741824, label %if.end230
    i32 -1082130432, label %if.end230
    i32 1073741824, label %if.end230
    i32 1065353216, label %if.end230
  ]

if.else32:                                        ; preds = %if.end28
  %cmp33 = icmp ult i32 %and, 1073741824
  br i1 %cmp33, label %if.then34, label %if.else149

if.then34:                                        ; preds = %if.else32
  %cmp35 = icmp ult i32 %and, 1063675495
  br i1 %cmp35, label %if.then36, label %if.else49

if.then36:                                        ; preds = %if.then34
  %call37 = tail call float @logf(float %x.addr.0) #8
  %sub38 = fsub float -0.000000e+00, %call37
  %cmp39 = icmp ugt i32 %and, 1060850207
  br i1 %cmp39, label %sw.bb, label %if.else42

if.else42:                                        ; preds = %if.then36
  %cmp43 = icmp ugt i32 %and, 1047343879
  br i1 %cmp43, label %if.then44, label %sw.bb123

if.then44:                                        ; preds = %if.else42
  %sub45 = fadd float %x.addr.0, 0xBFDD8B6180000000
  br label %sw.bb88

if.else49:                                        ; preds = %if.then34
  %cmp50 = icmp ugt i32 %and, 1071490583
  br i1 %cmp50, label %sw.bb, label %if.else53

if.else53:                                        ; preds = %if.else49
  %cmp54 = icmp ugt i32 %and, 1067296287
  br i1 %cmp54, label %if.then55, label %if.else57

if.then55:                                        ; preds = %if.else53
  %sub56 = fadd float %x.addr.0, 0xBFF762D860000000
  br label %sw.bb88

if.else57:                                        ; preds = %if.else53
  %sub58 = fadd float %x.addr.0, -1.000000e+00
  br label %sw.bb123

sw.bb:                                            ; preds = %if.else49, %if.then36
  %.pn = phi float [ 1.000000e+00, %if.then36 ], [ 2.000000e+00, %if.else49 ]
  %r.0.ph = phi float [ %sub38, %if.then36 ], [ 0.000000e+00, %if.else49 ]
  %y.0.ph = fsub float %.pn, %x.addr.0
  %mul62 = fmul float %y.0.ph, %y.0.ph
  %mul63 = fmul float %mul62, 0x3EFA707440000000
  %add = fadd float %mul63, 0x3F2CF2ECE0000000
  %mul64 = fmul float %mul62, %add
  %add65 = fadd float %mul64, 0x3F538A9420000000
  %mul66 = fmul float %mul62, %add65
  %add67 = fadd float %mul66, 0x3F7E404FC0000000
  %mul68 = fmul float %mul62, %add67
  %add69 = fadd float %mul68, 0x3FB13E0020000000
  %mul70 = fmul float %mul62, %add69
  %add71 = fadd float %mul70, 0x3FB3C467E0000000
  %mul72 = fmul float %mul62, 0x3F07858EA0000000
  %add73 = fadd float %mul72, 0x3F1C5088A0000000
  %mul74 = fmul float %mul62, %add73
  %add75 = fadd float %mul74, 0x3F40B6C680000000
  %mul76 = fmul float %mul62, %add75
  %add77 = fadd float %mul76, 0x3F67ADD8C0000000
  %mul78 = fmul float %mul62, %add77
  %add79 = fadd float %mul78, 0x3F951322A0000000
  %mul80 = fmul float %mul62, %add79
  %add81 = fadd float %mul80, 0x3FD4A34CC0000000
  %mul82 = fmul float %mul62, %add81
  %mul83 = fmul float %y.0.ph, %add71
  %add84 = fadd float %mul83, %mul82
  %mul85 = fmul float %y.0.ph, 5.000000e-01
  %sub86 = fsub float %add84, %mul85
  %add87 = fadd float %r.0.ph, %sub86
  br label %if.end230

sw.bb88:                                          ; preds = %if.then55, %if.then44
  %y.0.ph366 = phi float [ %sub56, %if.then55 ], [ %sub45, %if.then44 ]
  %r.0.ph367 = phi float [ 0.000000e+00, %if.then55 ], [ %sub38, %if.then44 ]
  %mul89 = fmul float %y.0.ph366, %y.0.ph366
  %mul90 = fmul float %y.0.ph366, %mul89
  %mul91 = fmul float %mul90, 0x3F34AF6D60000000
  %add92 = fadd float %mul91, 0xBF56FE8EC0000000
  %mul93 = fmul float %mul90, %add92
  %add94 = fadd float %mul93, 0x3F78FCE0E0000000
  %mul95 = fmul float %mul90, %add94
  %add96 = fadd float %mul95, 0xBFA0C9A8E0000000
  %mul97 = fmul float %mul90, %add96
  %add98 = fadd float %mul97, 0x3FDEF72BC0000000
  %mul99 = fmul float %mul90, 0xBF347F24E0000000
  %add100 = fadd float %mul99, 0x3F4CDF0CE0000000
  %mul101 = fmul float %mul90, %add100
  %add102 = fadd float %mul101, 0xBF6E2EFFC0000000
  %mul103 = fmul float %mul90, %add102
  %add104 = fadd float %mul103, 0x3F9266E7A0000000
  %mul105 = fmul float %mul90, %add104
  %add106 = fadd float %mul105, 0xBFC2E42780000000
  %mul107 = fmul float %mul90, 0x3F35FD3EE0000000
  %add108 = fadd float %mul107, 0xBF41A610A0000000
  %mul109 = fmul float %mul90, %add108
  %add110 = fadd float %mul109, 0x3F6282D320000000
  %mul111 = fmul float %mul90, %add110
  %add112 = fadd float %mul111, 0xBF851F9FC0000000
  %mul113 = fmul float %mul90, %add112
  %add114 = fadd float %mul113, 0x3FB08B42A0000000
  %mul115 = fmul float %mul89, %add98
  %mul116 = fmul float %y.0.ph366, %add114
  %add117 = fadd float %add106, %mul116
  %mul118 = fmul float %mul90, %add117
  %sub119 = fsub float 0x3E3CC38A40000000, %mul118
  %sub120 = fsub float %mul115, %sub119
  %add121 = fadd float %sub120, 0xBFBF19B9A0000000
  %add122 = fadd float %r.0.ph367, %add121
  br label %if.end230

sw.bb123:                                         ; preds = %if.else57, %if.else42
  %y.0 = phi float [ %sub58, %if.else57 ], [ %x.addr.0, %if.else42 ]
  %r.0 = phi float [ 0.000000e+00, %if.else57 ], [ %sub38, %if.else42 ]
  %mul124 = fmul float %y.0, 0x3F8B678BC0000000
  %add125 = fadd float %mul124, 0x3FCD4EAF00000000
  %mul126 = fmul float %y.0, %add125
  %add127 = fadd float %mul126, 0x3FEF497640000000
  %mul128 = fmul float %y.0, %add127
  %add129 = fadd float %mul128, 0x3FF7475CE0000000
  %mul130 = fmul float %y.0, %add129
  %add131 = fadd float %mul130, 0x3FE4401E80000000
  %mul132 = fmul float %y.0, %add131
  %add133 = fadd float %mul132, 0xBFB3C467E0000000
  %mul134 = fmul float %y.0, %add133
  %mul135 = fmul float %y.0, 0x3F6A5ABB60000000
  %add136 = fadd float %mul135, 0x3FBAAE55E0000000
  %mul137 = fmul float %y.0, %add136
  %add138 = fadd float %mul137, 0x3FE89DFBE0000000
  %mul139 = fmul float %y.0, %add138
  %add140 = fadd float %mul139, 0x40010725A0000000
  %mul141 = fmul float %y.0, %add140
  %add142 = fadd float %mul141, 0x4003A5D7C0000000
  %mul143 = fmul float %y.0, %add142
  %add144 = fadd float %mul143, 1.000000e+00
  %mul145 = fmul float %y.0, -5.000000e-01
  %div146 = fdiv float %mul134, %add144
  %add147 = fadd float %mul145, %div146
  %add148 = fadd float %r.0, %add147
  br label %if.end230

if.else149:                                       ; preds = %if.else32
  %cmp150 = icmp ult i32 %and, 1090519040
  br i1 %cmp150, label %if.then151, label %if.else200

if.then151:                                       ; preds = %if.else149
  %conv = fptosi float %x.addr.0 to i32
  %conv152 = sitofp i32 %conv to float
  %sub153 = fsub float %x.addr.0, %conv152
  %mul154 = fmul float %sub153, 0x3F00BFECE0000000
  %add155 = fadd float %mul154, 0x3F5E26B680000000
  %mul156 = fmul float %sub153, %add155
  %add157 = fadd float %mul156, 0x3F9B481C80000000
  %mul158 = fmul float %sub153, %add157
  %add159 = fadd float %mul158, 0x3FC2BB9CC0000000
  %mul160 = fmul float %sub153, %add159
  %add161 = fadd float %mul160, 0x3FD4D98F40000000
  %mul162 = fmul float %sub153, %add161
  %add163 = fadd float %mul162, 0x3FCB848B40000000
  %mul164 = fmul float %sub153, %add163
  %add165 = fadd float %mul164, 0xBFB3C467E0000000
  %mul166 = fmul float %sub153, %add165
  %mul167 = fmul float %sub153, 0x3EDEBAF7A0000000
  %add168 = fadd float %mul167, 0x3F497DDAC0000000
  %mul169 = fmul float %sub153, %add168
  %add170 = fadd float %mul169, 0x3F9317EA80000000
  %mul171 = fmul float %sub153, %add170
  %add172 = fadd float %mul171, 0x3FC601EDC0000000
  %mul173 = fmul float %sub153, %add172
  %add174 = fadd float %mul173, 0x3FE71A18A0000000
  %mul175 = fmul float %sub153, %add174
  %add176 = fadd float %mul175, 0x3FF645A760000000
  %mul177 = fmul float %sub153, %add176
  %add178 = fadd float %mul177, 1.000000e+00
  %mul179 = fmul float %sub153, 5.000000e-01
  %div180 = fdiv float %mul166, %add178
  %add181 = fadd float %mul179, %div180
  switch i32 %conv, label %if.end230 [
    i32 7, label %sw.bb182
    i32 6, label %sw.bb185
    i32 5, label %sw.bb188
    i32 4, label %sw.bb191
    i32 3, label %sw.bb194
  ]

sw.bb182:                                         ; preds = %if.then151
  %add183 = fadd float %sub153, 6.000000e+00
  br label %sw.bb185

sw.bb185:                                         ; preds = %sw.bb182, %if.then151
  %z.0 = phi float [ 1.000000e+00, %if.then151 ], [ %add183, %sw.bb182 ]
  %add186 = fadd float %sub153, 5.000000e+00
  %mul187 = fmul float %add186, %z.0
  br label %sw.bb188

sw.bb188:                                         ; preds = %sw.bb185, %if.then151
  %z.1 = phi float [ 1.000000e+00, %if.then151 ], [ %mul187, %sw.bb185 ]
  %add189 = fadd float %sub153, 4.000000e+00
  %mul190 = fmul float %add189, %z.1
  br label %sw.bb191

sw.bb191:                                         ; preds = %sw.bb188, %if.then151
  %z.2 = phi float [ 1.000000e+00, %if.then151 ], [ %mul190, %sw.bb188 ]
  %add192 = fadd float %sub153, 3.000000e+00
  %mul193 = fmul float %add192, %z.2
  br label %sw.bb194

sw.bb194:                                         ; preds = %sw.bb191, %if.then151
  %z.3 = phi float [ 1.000000e+00, %if.then151 ], [ %mul193, %sw.bb191 ]
  %add195 = fadd float %sub153, 2.000000e+00
  %mul196 = fmul float %add195, %z.3
  %call197 = tail call float @logf(float %mul196) #8
  %add198 = fadd float %add181, %call197
  br label %if.end230

if.else200:                                       ; preds = %if.else149
  %cmp201 = icmp ult i32 %and, 1551892480
  %call204 = tail call float @logf(float %x.addr.0) #8
  br i1 %cmp201, label %if.then203, label %if.else223

if.then203:                                       ; preds = %if.else200
  %div205 = fdiv float 1.000000e+00, %x.addr.0
  %mul206 = fmul float %div205, %div205
  %mul207 = fmul float %mul206, 0xBF5AB89D00000000
  %add208 = fadd float %mul207, 0x3F4B67BA40000000
  %mul209 = fmul float %mul206, %add208
  %add210 = fadd float %mul209, 0xBF4380CB80000000
  %mul211 = fmul float %mul206, %add210
  %add212 = fadd float %mul211, 0x3F4A019FA0000000
  %mul213 = fmul float %mul206, %add212
  %add214 = fadd float %mul213, 0xBF66C16C20000000
  %mul215 = fmul float %mul206, %add214
  %add216 = fadd float %mul215, 0x3FB5555560000000
  %mul217 = fmul float %div205, %add216
  %add218 = fadd float %mul217, 0x3FDACFE3A0000000
  %sub219 = fadd float %x.addr.0, -5.000000e-01
  %sub220 = fadd float %call204, -1.000000e+00
  %mul221 = fmul float %sub219, %sub220
  %add222 = fadd float %mul221, %add218
  br label %if.end230

if.else223:                                       ; preds = %if.else200
  %sub225 = fadd float %call204, -1.000000e+00
  %mul226 = fmul float %x.addr.0, %sub225
  br label %if.end230

if.end230:                                        ; preds = %if.else223, %if.then203, %sw.bb194, %if.then151, %sw.bb123, %sw.bb88, %sw.bb, %if.end28, %if.end28, %if.end28, %if.end28
  %r.1 = phi float [ %add148, %sw.bb123 ], [ %add122, %sw.bb88 ], [ %add87, %sw.bb ], [ %add181, %if.then151 ], [ %add198, %sw.bb194 ], [ %add222, %if.then203 ], [ %mul226, %if.else223 ], [ 0.000000e+00, %if.end28 ], [ 0.000000e+00, %if.end28 ], [ 0.000000e+00, %if.end28 ], [ 0.000000e+00, %if.end28 ]
  br i1 %cmp6, label %if.then233, label %return

if.then233:                                       ; preds = %if.end230
  %sub234 = fsub float %nadj.0, %r.1
  br label %return

return:                                           ; preds = %if.then233, %if.end230, %sin_pif.exit, %if.then13, %if.else, %if.then7, %if.end, %if.then
  %retval.0 = phi float [ %mul, %if.then ], [ %sub8, %if.then7 ], [ %sub10, %if.else ], [ 0x7FF0000000000000, %if.end ], [ 0x7FF0000000000000, %if.then13 ], [ 0x7FF0000000000000, %sin_pif.exit ], [ %sub234, %if.then233 ], [ %r.1, %if.end230 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_lgamma_r(double %x, i32* nocapture %signgamp) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  store i32 1, i32* %signgamp, align 4, !tbaa !433
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mul = fmul double %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %or = or i32 %and, %ew_u.sroa.0.0.extract.trunc
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %cmp5 = icmp ult i32 %and, 999292928
  %cmp7 = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp5, label %if.then6, label %if.end12

if.then6:                                         ; preds = %if.end4
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.then6
  store i32 -1, i32* %signgamp, align 4, !tbaa !433
  %sub = fsub double -0.000000e+00, %x
  %call = tail call double @log(double %sub) #8
  %sub9 = fsub double -0.000000e+00, %call
  br label %return

if.else:                                          ; preds = %if.then6
  %call10 = tail call double @log(double %x) #8
  %sub11 = fsub double -0.000000e+00, %call10
  br label %return

if.end12:                                         ; preds = %if.end4
  br i1 %cmp7, label %if.then14, label %if.end29

if.then14:                                        ; preds = %if.end12
  %cmp15 = icmp ugt i32 %and, 1127219199
  br i1 %cmp15, label %return, label %if.end17

if.end17:                                         ; preds = %if.then14
  %cmp.i = icmp ult i32 %and, 1070596096
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.end17
  %mul.i = fmul double %x, 0x400921FB54442D18
  %call.i = tail call double @__kernel_sin(double %mul.i, double 0.000000e+00, i32 0) #8, !parents_inline !438
  br label %sin_pi.exit

if.end.i:                                         ; preds = %if.end17
  %sub.i = fsub double -0.000000e+00, %x
  %call1.i = tail call double @floor(double %sub.i) #8, !parents_inline !438
  %cmp2.i = fcmp une double %call1.i, %sub.i
  br i1 %cmp2.i, label %if.then3.i, label %if.else.i

if.then3.i:                                       ; preds = %if.end.i
  %mul4.i = fmul double %x, -5.000000e-01
  %call5.i = tail call double @floor(double %mul4.i) #8, !parents_inline !438
  %sub6.i = fsub double %mul4.i, %call5.i
  %mul7.i = fmul double %sub6.i, 2.000000e+00
  %mul8.i = fmul double %mul7.i, 4.000000e+00
  %conv.i = fptosi double %mul8.i to i32
  br label %if.end24.i

if.else.i:                                        ; preds = %if.end.i
  %cmp9.i = icmp ugt i32 %and, 1128267775
  br i1 %cmp9.i, label %sw.bb.i, label %if.else12.i

if.else12.i:                                      ; preds = %if.else.i
  %cmp13.i = icmp ult i32 %and, 1127219200
  br i1 %cmp13.i, label %if.then15.i, label %do.body17.i

if.then15.i:                                      ; preds = %if.else12.i
  %add.i = fsub double 0x4330000000000000, %x
  br label %do.body17.i

do.body17.i:                                      ; preds = %if.then15.i, %if.else12.i
  %z.0.i = phi double [ %add.i, %if.then15.i ], [ %call1.i, %if.else12.i ]
  %1 = bitcast double %z.0.i to i64
  %gl_u.sroa.0.0.extract.trunc.i = trunc i64 %1 to i32
  %and21.i = and i32 %gl_u.sroa.0.0.extract.trunc.i, 1
  %conv22.i = sitofp i32 %and21.i to double
  %shl.i = shl nuw nsw i32 %and21.i, 2
  br label %if.end24.i

if.end24.i:                                       ; preds = %do.body17.i, %if.then3.i
  %n.0.i = phi i32 [ %conv.i, %if.then3.i ], [ %shl.i, %do.body17.i ]
  %y.0.i = phi double [ %mul7.i, %if.then3.i ], [ %conv22.i, %do.body17.i ]
  switch i32 %n.0.i, label %sw.default.i [
    i32 0, label %sw.bb.i
    i32 1, label %sw.bb27.i
    i32 2, label %sw.bb27.i
    i32 3, label %sw.bb31.i
    i32 4, label %sw.bb31.i
    i32 5, label %sw.bb35.i
    i32 6, label %sw.bb35.i
  ]

sw.bb.i:                                          ; preds = %if.end24.i, %if.else.i
  %y.064.i = phi double [ %y.0.i, %if.end24.i ], [ 0.000000e+00, %if.else.i ]
  %mul25.i = fmul double %y.064.i, 0x400921FB54442D18
  %call26.i = tail call double @__kernel_sin(double %mul25.i, double 0.000000e+00, i32 0) #8, !parents_inline !438
  br label %sw.epilog.i

sw.bb27.i:                                        ; preds = %if.end24.i, %if.end24.i
  %sub28.i = fsub double 5.000000e-01, %y.0.i
  %mul29.i = fmul double %sub28.i, 0x400921FB54442D18
  %call30.i = tail call double @__kernel_cos(double %mul29.i, double 0.000000e+00) #8, !parents_inline !438
  br label %sw.epilog.i

sw.bb31.i:                                        ; preds = %if.end24.i, %if.end24.i
  %sub32.i = fsub double 1.000000e+00, %y.0.i
  %mul33.i = fmul double %sub32.i, 0x400921FB54442D18
  %call34.i = tail call double @__kernel_sin(double %mul33.i, double 0.000000e+00, i32 0) #8, !parents_inline !438
  br label %sw.epilog.i

sw.bb35.i:                                        ; preds = %if.end24.i, %if.end24.i
  %sub36.i = fadd double %y.0.i, -1.500000e+00
  %mul37.i = fmul double %sub36.i, 0x400921FB54442D18
  %call38.i = tail call double @__kernel_cos(double %mul37.i, double 0.000000e+00) #8, !parents_inline !438
  %sub39.i = fsub double -0.000000e+00, %call38.i
  br label %sw.epilog.i

sw.default.i:                                     ; preds = %if.end24.i
  %sub40.i = fadd double %y.0.i, -2.000000e+00
  %mul41.i = fmul double %sub40.i, 0x400921FB54442D18
  %call42.i = tail call double @__kernel_sin(double %mul41.i, double 0.000000e+00, i32 0) #8, !parents_inline !438
  br label %sw.epilog.i

sw.epilog.i:                                      ; preds = %sw.default.i, %sw.bb35.i, %sw.bb31.i, %sw.bb27.i, %sw.bb.i
  %y.1.i = phi double [ %call42.i, %sw.default.i ], [ %sub39.i, %sw.bb35.i ], [ %call34.i, %sw.bb31.i ], [ %call30.i, %sw.bb27.i ], [ %call26.i, %sw.bb.i ]
  %sub43.i = fsub double -0.000000e+00, %y.1.i
  br label %sin_pi.exit

sin_pi.exit:                                      ; preds = %sw.epilog.i, %if.then.i
  %retval.0.i = phi double [ %call.i, %if.then.i ], [ %sub43.i, %sw.epilog.i ]
  %cmp19 = fcmp oeq double %retval.0.i, 0.000000e+00
  br i1 %cmp19, label %return, label %if.end21

if.end21:                                         ; preds = %sin_pi.exit
  %mul22 = fmul double %retval.0.i, %x
  %call23 = tail call double @fabs(double %mul22) #8
  %div = fdiv double 0x400921FB54442D18, %call23
  %call24 = tail call double @log(double %div) #8
  %cmp25 = fcmp olt double %retval.0.i, 0.000000e+00
  br i1 %cmp25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end21
  store i32 -1, i32* %signgamp, align 4, !tbaa !433
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end21
  %sub28 = fsub double -0.000000e+00, %x
  br label %if.end29

if.end29:                                         ; preds = %if.end27, %if.end12
  %nadj.0 = phi double [ %call24, %if.end27 ], [ 0.000000e+00, %if.end12 ]
  %x.addr.0 = phi double [ %sub28, %if.end27 ], [ %x, %if.end12 ]
  %sub30 = add nsw i32 %and, -1072693248
  %or31 = or i32 %sub30, %ew_u.sroa.0.0.extract.trunc
  %cmp32 = icmp eq i32 %or31, 0
  br i1 %cmp32, label %if.end235, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end29
  %sub33 = add nsw i32 %and, -1073741824
  %or34 = or i32 %sub33, %ew_u.sroa.0.0.extract.trunc
  %cmp35 = icmp eq i32 %or34, 0
  br i1 %cmp35, label %if.end235, label %if.else37

if.else37:                                        ; preds = %lor.lhs.false
  %cmp38 = icmp ult i32 %and, 1073741824
  br i1 %cmp38, label %if.then39, label %if.else154

if.then39:                                        ; preds = %if.else37
  %cmp40 = icmp ult i32 %and, 1072483533
  br i1 %cmp40, label %if.then41, label %if.else54

if.then41:                                        ; preds = %if.then39
  %call42 = tail call double @log(double %x.addr.0) #8
  %sub43 = fsub double -0.000000e+00, %call42
  %cmp44 = icmp ugt i32 %and, 1072130371
  br i1 %cmp44, label %sw.bb, label %if.else47

if.else47:                                        ; preds = %if.then41
  %cmp48 = icmp ugt i32 %and, 1070442080
  br i1 %cmp48, label %if.then49, label %sw.bb128

if.then49:                                        ; preds = %if.else47
  %sub50 = fadd double %x.addr.0, 0xBFDD8B618D5AF8FC
  br label %sw.bb93

if.else54:                                        ; preds = %if.then39
  %cmp55 = icmp ugt i32 %and, 1073460418
  br i1 %cmp55, label %sw.bb, label %if.else58

if.else58:                                        ; preds = %if.else54
  %cmp59 = icmp ugt i32 %and, 1072936131
  br i1 %cmp59, label %if.then60, label %if.else62

if.then60:                                        ; preds = %if.else58
  %sub61 = fadd double %x.addr.0, 0xBFF762D86356BE3F
  br label %sw.bb93

if.else62:                                        ; preds = %if.else58
  %sub63 = fadd double %x.addr.0, -1.000000e+00
  br label %sw.bb128

sw.bb:                                            ; preds = %if.else54, %if.then41
  %r.0.ph = phi double [ %sub43, %if.then41 ], [ 0.000000e+00, %if.else54 ]
  %.pn = phi double [ 1.000000e+00, %if.then41 ], [ 2.000000e+00, %if.else54 ]
  %y.0.ph = fsub double %.pn, %x.addr.0
  %mul67 = fmul double %y.0.ph, %y.0.ph
  %mul68 = fmul double %mul67, 0x3EFA7074428CFA52
  %add = fadd double %mul68, 0x3F2CF2ECED10E54D
  %mul69 = fmul double %mul67, %add
  %add70 = fadd double %mul69, 0x3F538A94116F3F5D
  %mul71 = fmul double %mul67, %add70
  %add72 = fadd double %mul71, 0x3F7E404FB68FEFE8
  %mul73 = fmul double %mul67, %add72
  %add74 = fadd double %mul73, 0x3FB13E001A5562A7
  %mul75 = fmul double %mul67, %add74
  %add76 = fadd double %mul75, 0x3FB3C467E37DB0C8
  %mul77 = fmul double %mul67, 0x3F07858E90A45837
  %add78 = fadd double %mul77, 0x3F1C5088987DFB07
  %mul79 = fmul double %mul67, %add78
  %add80 = fadd double %mul79, 0x3F40B6C689B99C00
  %mul81 = fmul double %mul67, %add80
  %add82 = fadd double %mul81, 0x3F67ADD8CCB7926B
  %mul83 = fmul double %mul67, %add82
  %add84 = fadd double %mul83, 0x3F951322AC92547B
  %mul85 = fmul double %mul67, %add84
  %add86 = fadd double %mul85, 0x3FD4A34CC4A60FAD
  %mul87 = fmul double %mul67, %add86
  %mul88 = fmul double %y.0.ph, %add76
  %add89 = fadd double %mul88, %mul87
  %mul90 = fmul double %y.0.ph, 5.000000e-01
  %sub91 = fsub double %add89, %mul90
  %add92 = fadd double %r.0.ph, %sub91
  br label %if.end235

sw.bb93:                                          ; preds = %if.then60, %if.then49
  %r.0.ph373 = phi double [ 0.000000e+00, %if.then60 ], [ %sub43, %if.then49 ]
  %y.0.ph374 = phi double [ %sub61, %if.then60 ], [ %sub50, %if.then49 ]
  %mul94 = fmul double %y.0.ph374, %y.0.ph374
  %mul95 = fmul double %y.0.ph374, %mul94
  %mul96 = fmul double %mul95, 0x3F34AF6D6C0EBBF7
  %add97 = fadd double %mul96, 0xBF56FE8EBF2D1AF1
  %mul98 = fmul double %mul95, %add97
  %add99 = fadd double %mul98, 0x3F78FCE0E370E344
  %mul100 = fmul double %mul95, %add99
  %add101 = fadd double %mul100, 0xBFA0C9A8DF35B713
  %mul102 = fmul double %mul95, %add101
  %add103 = fadd double %mul102, 0x3FDEF72BC8EE38A2
  %mul104 = fmul double %mul95, 0xBF347F24ECC38C38
  %add105 = fadd double %mul104, 0x3F4CDF0CEF61A8E9
  %mul106 = fmul double %mul95, %add105
  %add107 = fadd double %mul106, 0xBF6E2EFFB3E914D7
  %mul108 = fmul double %mul95, %add107
  %add109 = fadd double %mul108, 0x3F9266E7970AF9EC
  %mul110 = fmul double %mul95, %add109
  %add111 = fadd double %mul110, 0xBFC2E4278DC6C509
  %mul112 = fmul double %mul95, 0x3F35FD3EE8C2D3F4
  %add113 = fadd double %mul112, 0xBF41A6109C73E0EC
  %mul114 = fmul double %mul95, %add113
  %add115 = fadd double %mul114, 0x3F6282D32E15C915
  %mul116 = fmul double %mul95, %add115
  %add117 = fadd double %mul116, 0xBF851F9FBA91EC6A
  %mul118 = fmul double %mul95, %add117
  %add119 = fadd double %mul118, 0x3FB08B4294D5419B
  %mul120 = fmul double %mul94, %add103
  %mul121 = fmul double %y.0.ph374, %add119
  %add122 = fadd double %add111, %mul121
  %mul123 = fmul double %mul95, %add122
  %sub124 = fsub double 0xBC50C7CAA48A971F, %mul123
  %sub125 = fsub double %mul120, %sub124
  %add126 = fadd double %sub125, 0xBFBF19B9BCC38A42
  %add127 = fadd double %r.0.ph373, %add126
  br label %if.end235

sw.bb128:                                         ; preds = %if.else62, %if.else47
  %r.0 = phi double [ 0.000000e+00, %if.else62 ], [ %sub43, %if.else47 ]
  %y.0 = phi double [ %sub63, %if.else62 ], [ %x.addr.0, %if.else47 ]
  %mul129 = fmul double %y.0, 0x3F8B678BBF2BAB09
  %add130 = fadd double %mul129, 0x3FCD4EAEF6010924
  %mul131 = fmul double %y.0, %add130
  %add132 = fadd double %mul131, 0x3FEF497644EA8450
  %mul133 = fmul double %y.0, %add132
  %add134 = fadd double %mul133, 0x3FF7475CD119BD6F
  %mul135 = fmul double %y.0, %add134
  %add136 = fadd double %mul135, 0x3FE4401E8B005DFF
  %mul137 = fmul double %y.0, %add136
  %add138 = fadd double %mul137, 0xBFB3C467E37DB0C8
  %mul139 = fmul double %y.0, %add138
  %mul140 = fmul double %y.0, 0x3F6A5ABB57D0CF61
  %add141 = fadd double %mul140, 0x3FBAAE55D6537C88
  %mul142 = fmul double %y.0, %add141
  %add143 = fadd double %mul142, 0x3FE89DFBE45050AF
  %mul144 = fmul double %y.0, %add143
  %add145 = fadd double %mul144, 0x40010725A42B18F5
  %mul146 = fmul double %y.0, %add145
  %add147 = fadd double %mul146, 0x4003A5D7C2BD619C
  %mul148 = fmul double %y.0, %add147
  %add149 = fadd double %mul148, 1.000000e+00
  %mul150 = fmul double %y.0, -5.000000e-01
  %div151 = fdiv double %mul139, %add149
  %add152 = fadd double %mul150, %div151
  %add153 = fadd double %r.0, %add152
  br label %if.end235

if.else154:                                       ; preds = %if.else37
  %cmp155 = icmp ult i32 %and, 1075838976
  br i1 %cmp155, label %if.then156, label %if.else205

if.then156:                                       ; preds = %if.else154
  %conv = fptosi double %x.addr.0 to i32
  %conv157 = sitofp i32 %conv to double
  %sub158 = fsub double %x.addr.0, %conv157
  %mul159 = fmul double %sub158, 0x3F00BFECDD17E945
  %add160 = fadd double %mul159, 0x3F5E26B67368F239
  %mul161 = fmul double %sub158, %add160
  %add162 = fadd double %mul161, 0x3F9B481C7E939961
  %mul163 = fmul double %sub158, %add162
  %add164 = fadd double %mul163, 0x3FC2BB9CBEE5F2F7
  %mul165 = fmul double %sub158, %add164
  %add166 = fadd double %mul165, 0x3FD4D98F4F139F59
  %mul167 = fmul double %sub158, %add166
  %add168 = fadd double %mul167, 0x3FCB848B36E20878
  %mul169 = fmul double %sub158, %add168
  %add170 = fadd double %mul169, 0xBFB3C467E37DB0C8
  %mul171 = fmul double %sub158, %add170
  %mul172 = fmul double %sub158, 0x3EDEBAF7A5B38140
  %add173 = fadd double %mul172, 0x3F497DDACA41A95B
  %mul174 = fmul double %sub158, %add173
  %add175 = fadd double %mul174, 0x3F9317EA742ED475
  %mul176 = fmul double %sub158, %add175
  %add177 = fadd double %mul176, 0x3FC601EDCCFBDF27
  %mul178 = fmul double %sub158, %add177
  %add179 = fadd double %mul178, 0x3FE71A1893D3DCDC
  %mul180 = fmul double %sub158, %add179
  %add181 = fadd double %mul180, 0x3FF645A762C4AB74
  %mul182 = fmul double %sub158, %add181
  %add183 = fadd double %mul182, 1.000000e+00
  %mul184 = fmul double %sub158, 5.000000e-01
  %div185 = fdiv double %mul171, %add183
  %add186 = fadd double %mul184, %div185
  switch i32 %conv, label %if.end235 [
    i32 7, label %sw.bb187
    i32 6, label %sw.bb190
    i32 5, label %sw.bb193
    i32 4, label %sw.bb196
    i32 3, label %sw.bb199
  ]

sw.bb187:                                         ; preds = %if.then156
  %add188 = fadd double %sub158, 6.000000e+00
  br label %sw.bb190

sw.bb190:                                         ; preds = %sw.bb187, %if.then156
  %z.0 = phi double [ 1.000000e+00, %if.then156 ], [ %add188, %sw.bb187 ]
  %add191 = fadd double %sub158, 5.000000e+00
  %mul192 = fmul double %add191, %z.0
  br label %sw.bb193

sw.bb193:                                         ; preds = %sw.bb190, %if.then156
  %z.1 = phi double [ 1.000000e+00, %if.then156 ], [ %mul192, %sw.bb190 ]
  %add194 = fadd double %sub158, 4.000000e+00
  %mul195 = fmul double %add194, %z.1
  br label %sw.bb196

sw.bb196:                                         ; preds = %sw.bb193, %if.then156
  %z.2 = phi double [ 1.000000e+00, %if.then156 ], [ %mul195, %sw.bb193 ]
  %add197 = fadd double %sub158, 3.000000e+00
  %mul198 = fmul double %add197, %z.2
  br label %sw.bb199

sw.bb199:                                         ; preds = %sw.bb196, %if.then156
  %z.3 = phi double [ 1.000000e+00, %if.then156 ], [ %mul198, %sw.bb196 ]
  %add200 = fadd double %sub158, 2.000000e+00
  %mul201 = fmul double %add200, %z.3
  %call202 = tail call double @log(double %mul201) #8
  %add203 = fadd double %add186, %call202
  br label %if.end235

if.else205:                                       ; preds = %if.else154
  %cmp206 = icmp ult i32 %and, 1133510656
  %call209 = tail call double @log(double %x.addr.0) #8
  br i1 %cmp206, label %if.then208, label %if.else228

if.then208:                                       ; preds = %if.else205
  %div210 = fdiv double 1.000000e+00, %x.addr.0
  %mul211 = fmul double %div210, %div210
  %mul212 = fmul double %mul211, 0xBF5AB89D0B9E43E4
  %add213 = fadd double %mul212, 0x3F4B67BA4CDAD5D1
  %mul214 = fmul double %mul211, %add213
  %add215 = fadd double %mul214, 0xBF4380CB8C0FE741
  %mul216 = fmul double %mul211, %add215
  %add217 = fadd double %mul216, 0x3F4A019F98CF38B6
  %mul218 = fmul double %mul211, %add217
  %add219 = fadd double %mul218, 0xBF66C16C16B02E5C
  %mul220 = fmul double %mul211, %add219
  %add221 = fadd double %mul220, 0x3FB555555555553B
  %mul222 = fmul double %div210, %add221
  %add223 = fadd double %mul222, 0x3FDACFE390C97D69
  %sub224 = fadd double %x.addr.0, -5.000000e-01
  %sub225 = fadd double %call209, -1.000000e+00
  %mul226 = fmul double %sub224, %sub225
  %add227 = fadd double %mul226, %add223
  br label %if.end235

if.else228:                                       ; preds = %if.else205
  %sub230 = fadd double %call209, -1.000000e+00
  %mul231 = fmul double %x.addr.0, %sub230
  br label %if.end235

if.end235:                                        ; preds = %if.else228, %if.then208, %sw.bb199, %if.then156, %sw.bb128, %sw.bb93, %sw.bb, %lor.lhs.false, %if.end29
  %r.1 = phi double [ %add153, %sw.bb128 ], [ %add127, %sw.bb93 ], [ %add92, %sw.bb ], [ %add186, %if.then156 ], [ %add203, %sw.bb199 ], [ %add227, %if.then208 ], [ %mul231, %if.else228 ], [ 0.000000e+00, %lor.lhs.false ], [ 0.000000e+00, %if.end29 ]
  br i1 %cmp7, label %if.then238, label %return

if.then238:                                       ; preds = %if.end235
  %sub239 = fsub double %nadj.0, %r.1
  br label %return

return:                                           ; preds = %if.then238, %if.end235, %sin_pi.exit, %if.then14, %if.else, %if.then8, %if.end, %if.then
  %retval.0 = phi double [ %mul, %if.then ], [ %sub9, %if.then8 ], [ %sub11, %if.else ], [ 0x7FF0000000000000, %if.end ], [ 0x7FF0000000000000, %if.then14 ], [ 0x7FF0000000000000, %sin_pi.exit ], [ %sub239, %if.then238 ], [ %r.1, %if.end235 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_scalb(double %x, double %fn) #2 {
entry:
  %call = tail call i32 @__fpclassifyd(double %x) #8
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %call1 = tail call i32 @__fpclassifyd(double %fn) #8
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %mul = fmul double %x, %fn
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %call3 = tail call i32 @finite(double %fn) #8
  %tobool = icmp eq i32 %call3, 0
  br i1 %tobool, label %if.then4, label %if.end8

if.then4:                                         ; preds = %if.end
  %cmp5 = fcmp ogt double %fn, 0.000000e+00
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then4
  %mul7 = fmul double %x, %fn
  br label %return

if.else:                                          ; preds = %if.then4
  %sub = fsub double -0.000000e+00, %fn
  %div = fdiv double %x, %sub
  br label %return

if.end8:                                          ; preds = %if.end
  %call9 = tail call double @rint(double %fn) #8
  %cmp10 = fcmp une double %call9, %fn
  br i1 %cmp10, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end8
  %sub12 = fsub double %fn, %fn
  %div14 = fdiv double %sub12, %sub12
  br label %return

if.end15:                                         ; preds = %if.end8
  %cmp16 = fcmp ogt double %fn, 6.500000e+04
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end15
  %call18 = tail call double @scalbn(double %x, i32 65000) #8
  br label %return

if.end19:                                         ; preds = %if.end15
  %cmp21 = fcmp olt double %fn, -6.500000e+04
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %call23 = tail call double @scalbn(double %x, i32 -65000) #8
  br label %return

if.end24:                                         ; preds = %if.end19
  %conv = fptosi double %fn to i32
  %call25 = tail call double @scalbn(double %x, i32 %conv) #8
  br label %return

return:                                           ; preds = %if.end24, %if.then22, %if.then17, %if.then11, %if.else, %if.then6, %if.then
  %retval.0 = phi double [ %mul, %if.then ], [ %div14, %if.then11 ], [ %call18, %if.then17 ], [ %call23, %if.then22 ], [ %call25, %if.end24 ], [ %mul7, %if.then6 ], [ %div, %if.else ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_sinh(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %add = fadd double %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp slt i32 %gh_u.sroa.0.4.extract.trunc, 0
  %. = select i1 %cmp1, double -5.000000e-01, double 5.000000e-01
  %cmp4 = icmp ult i32 %and, 1077280768
  br i1 %cmp4, label %if.then5, label %if.end25

if.then5:                                         ; preds = %if.end
  %cmp6 = icmp ult i32 %and, 1043333120
  %add8 = fadd double %x, 1.000000e+307
  %cmp9 = fcmp ogt double %add8, 1.000000e+00
  %or.cond72 = and i1 %cmp6, %cmp9
  br i1 %or.cond72, label %return, label %if.end12

if.end12:                                         ; preds = %if.then5
  %call = tail call double @fabs(double %x) #8
  %call13 = tail call double @expm1(double %call) #8
  %cmp14 = icmp ult i32 %and, 1072693248
  br i1 %cmp14, label %if.then15, label %if.end20

if.then15:                                        ; preds = %if.end12
  %mul = fmul double %call13, 2.000000e+00
  %mul16 = fmul double %call13, %call13
  %add17 = fadd double %call13, 1.000000e+00
  %div = fdiv double %mul16, %add17
  %sub18 = fsub double %mul, %div
  %mul19 = fmul double %., %sub18
  br label %return

if.end20:                                         ; preds = %if.end12
  %add21 = fadd double %call13, 1.000000e+00
  %div22 = fdiv double %call13, %add21
  %add23 = fadd double %call13, %div22
  %mul24 = fmul double %., %add23
  br label %return

if.end25:                                         ; preds = %if.end
  %cmp26 = icmp ult i32 %and, 1082535490
  br i1 %cmp26, label %if.then27, label %do.body32

if.then27:                                        ; preds = %if.end25
  %call28 = tail call double @fabs(double %x) #8
  %call29 = tail call double @exp(double %call28) #8
  %mul30 = fmul double %., %call29
  br label %return

do.body32:                                        ; preds = %if.end25
  %cmp36 = icmp ult i32 %and, 1082536910
  br i1 %cmp36, label %if.then39, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body32
  %gl_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %cmp37 = icmp eq i32 %and, 1082536910
  %cmp38 = icmp ult i32 %gl_u.sroa.0.0.extract.trunc, -1883637634
  %or.cond = and i1 %cmp37, %cmp38
  br i1 %or.cond, label %if.then39, label %if.end45

if.then39:                                        ; preds = %lor.lhs.false, %do.body32
  %call40 = tail call double @fabs(double %x) #8
  %mul41 = fmul double %call40, 5.000000e-01
  %call42 = tail call double @exp(double %mul41) #8
  %mul43 = fmul double %., %call42
  %mul44 = fmul double %call42, %mul43
  br label %return

if.end45:                                         ; preds = %lor.lhs.false
  %mul46 = fmul double %x, 1.000000e+307
  br label %return

return:                                           ; preds = %if.end45, %if.then39, %if.then27, %if.end20, %if.then15, %if.then5, %if.then
  %retval.0 = phi double [ %add, %if.then ], [ %mul19, %if.then15 ], [ %mul24, %if.end20 ], [ %mul30, %if.then27 ], [ %mul44, %if.then39 ], [ %mul46, %if.end45 ], [ %x, %if.then5 ]
  ret double %retval.0
}

; Function Attrs: nounwind readnone
define double @__ieee754_sqrt(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2146435072
  %cmp = icmp eq i32 %and, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mul = fmul double %x, %x
  %add = fadd double %mul, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp2 = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 1
  br i1 %cmp2, label %if.then3, label %if.end12

if.then3:                                         ; preds = %if.end
  %and4 = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %or = or i32 %and4, %ew_u.sroa.0.0.extract.trunc
  %cmp5 = icmp eq i32 %or, 0
  br i1 %cmp5, label %return, label %if.else

if.else:                                          ; preds = %if.then3
  %cmp7 = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp7, label %if.then8, label %if.end12

if.then8:                                         ; preds = %if.else
  %sub = fsub double %x, %x
  %div = fdiv double %sub, %sub
  br label %return

if.end12:                                         ; preds = %if.else, %if.end
  %shr = ashr i32 %ew_u.sroa.0.4.extract.trunc, 20
  %cmp13 = icmp eq i32 %shr, 0
  br i1 %cmp13, label %while.cond.preheader, label %if.end28

while.cond.preheader:                             ; preds = %if.end12
  %cmp15265 = icmp eq i32 %ew_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp15265, label %while.body.preheader, label %for.cond.preheader

while.body.preheader:                             ; preds = %while.cond.preheader
  br label %while.body

while.cond.for.cond.preheader_crit_edge:          ; preds = %while.body
  %shl.lcssa = phi i32 [ %shl, %while.body ]
  %shr17.lcssa = phi i32 [ %shr17, %while.body ]
  %m.0268.lcssa = phi i32 [ %m.0268, %while.body ]
  %phitmp = add i32 %m.0268.lcssa, -20
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.cond.for.cond.preheader_crit_edge, %while.cond.preheader
  %m.0.lcssa = phi i32 [ %phitmp, %while.cond.for.cond.preheader_crit_edge ], [ 1, %while.cond.preheader ]
  %ix0.0.lcssa = phi i32 [ %shr17.lcssa, %while.cond.for.cond.preheader_crit_edge ], [ %ew_u.sroa.0.4.extract.trunc, %while.cond.preheader ]
  %ix1.0.lcssa = phi i32 [ %shl.lcssa, %while.cond.for.cond.preheader_crit_edge ], [ %ew_u.sroa.0.0.extract.trunc, %while.cond.preheader ]
  %and19260 = and i32 %ix0.0.lcssa, 1048576
  %cmp20261 = icmp eq i32 %and19260, 0
  br i1 %cmp20261, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

while.body:                                       ; preds = %while.body, %while.body.preheader
  %m.0268 = phi i32 [ %sub16, %while.body ], [ 0, %while.body.preheader ]
  %ix1.0266 = phi i32 [ %shl, %while.body ], [ %ew_u.sroa.0.0.extract.trunc, %while.body.preheader ]
  %sub16 = add nsw i32 %m.0268, -21
  %shr17 = lshr i32 %ix1.0266, 11
  %shl = shl i32 %ix1.0266, 21
  %cmp15 = icmp eq i32 %shr17, 0
  br i1 %cmp15, label %while.body, label %while.cond.for.cond.preheader_crit_edge

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.0263 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %ix0.1262 = phi i32 [ %shl21, %for.body ], [ %ix0.0.lcssa, %for.body.preheader ]
  %shl21 = shl i32 %ix0.1262, 1
  %inc = add nsw i32 %i.0263, 1
  %and19 = and i32 %shl21, 1048576
  %cmp20 = icmp eq i32 %and19, 0
  br i1 %cmp20, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  %inc.lcssa = phi i32 [ %inc, %for.body ]
  %shl21.lcssa = phi i32 [ %shl21, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %i.0.lcssa = phi i32 [ 0, %for.cond.preheader ], [ %inc.lcssa, %for.end.loopexit ]
  %ix0.1.lcssa = phi i32 [ %ix0.0.lcssa, %for.cond.preheader ], [ %shl21.lcssa, %for.end.loopexit ]
  %sub23 = sub i32 %m.0.lcssa, %i.0.lcssa
  %sub24 = sub nsw i32 32, %i.0.lcssa
  %shr25 = lshr i32 %ix1.0.lcssa, %sub24
  %or26 = or i32 %shr25, %ix0.1.lcssa
  %shl27 = shl i32 %ix1.0.lcssa, %i.0.lcssa
  br label %if.end28

if.end28:                                         ; preds = %for.end, %if.end12
  %ix1.1 = phi i32 [ %shl27, %for.end ], [ %ew_u.sroa.0.0.extract.trunc, %if.end12 ]
  %ix0.2 = phi i32 [ %or26, %for.end ], [ %ew_u.sroa.0.4.extract.trunc, %if.end12 ]
  %m.1 = phi i32 [ %sub23, %for.end ], [ %shr, %if.end12 ]
  %sub29 = add nsw i32 %m.1, -1023
  %and30 = and i32 %ix0.2, 1048575
  %or31 = or i32 %and30, 1048576
  %and32 = and i32 %sub29, 1
  %tobool = icmp eq i32 %and32, 0
  br i1 %tobool, label %if.end39, label %if.then33

if.then33:                                        ; preds = %if.end28
  %shr35 = lshr i32 %ix1.1, 31
  %factor = shl nuw nsw i32 %or31, 1
  %add37 = or i32 %factor, %shr35
  %add38 = shl i32 %ix1.1, 1
  br label %if.end39

if.end39:                                         ; preds = %if.then33, %if.end28
  %ix1.2 = phi i32 [ %add38, %if.then33 ], [ %ix1.1, %if.end28 ]
  %ix0.3 = phi i32 [ %add37, %if.then33 ], [ %or31, %if.end28 ]
  %shr42 = lshr i32 %ix1.2, 31
  %factor244 = shl nsw i32 %ix0.3, 1
  %add44 = or i32 %factor244, %shr42
  %ix1.3253 = shl i32 %ix1.2, 1
  br label %while.body48

while.cond63.preheader:                           ; preds = %if.end55
  %ix1.3.lcssa = phi i32 [ %ix1.3, %if.end55 ]
  %add59.lcssa = phi i32 [ %add59, %if.end55 ]
  %q.1.lcssa = phi i32 [ %q.1, %if.end55 ]
  %s0.1.lcssa = phi i32 [ %s0.1, %if.end55 ]
  %shr40242 = lshr i32 %sub29, 1
  br label %while.body65

while.body48:                                     ; preds = %if.end55, %if.end39
  %ix1.3259 = phi i32 [ %ix1.3253, %if.end39 ], [ %ix1.3, %if.end55 ]
  %q.0258 = phi i32 [ 0, %if.end39 ], [ %q.1, %if.end55 ]
  %s0.0257 = phi i32 [ 0, %if.end39 ], [ %s0.1, %if.end55 ]
  %ix0.4256 = phi i32 [ %add44, %if.end39 ], [ %add59, %if.end55 ]
  %ix1.3.in255 = phi i32 [ %ix1.2, %if.end39 ], [ %ix1.3259, %if.end55 ]
  %r.0254 = phi i32 [ 2097152, %if.end39 ], [ %shr61, %if.end55 ]
  %add49 = add i32 %s0.0257, %r.0254
  %cmp50 = icmp slt i32 %ix0.4256, %add49
  br i1 %cmp50, label %if.end55, label %if.then51

if.then51:                                        ; preds = %while.body48
  %add52 = add i32 %add49, %r.0254
  %sub53 = sub nsw i32 %ix0.4256, %add49
  %add54 = add i32 %q.0258, %r.0254
  br label %if.end55

if.end55:                                         ; preds = %if.then51, %while.body48
  %ix0.5 = phi i32 [ %sub53, %if.then51 ], [ %ix0.4256, %while.body48 ]
  %s0.1 = phi i32 [ %add52, %if.then51 ], [ %s0.0257, %while.body48 ]
  %q.1 = phi i32 [ %add54, %if.then51 ], [ %q.0258, %while.body48 ]
  %1 = lshr i32 %ix1.3.in255, 30
  %shr57 = and i32 %1, 1
  %factor245 = shl i32 %ix0.5, 1
  %add59 = or i32 %factor245, %shr57
  %shr61 = lshr i32 %r.0254, 1
  %ix1.3 = shl i32 %ix1.3259, 1
  %cmp47 = icmp eq i32 %shr61, 0
  br i1 %cmp47, label %while.cond63.preheader, label %while.body48

while.body65:                                     ; preds = %if.end87, %while.cond63.preheader
  %s0.2252 = phi i32 [ %s0.1.lcssa, %while.cond63.preheader ], [ %s0.4, %if.end87 ]
  %ix0.6251 = phi i32 [ %add59.lcssa, %while.cond63.preheader ], [ %add91, %if.end87 ]
  %q1.0250 = phi i32 [ 0, %while.cond63.preheader ], [ %q1.1, %if.end87 ]
  %ix1.4249 = phi i32 [ %ix1.3.lcssa, %while.cond63.preheader ], [ %add92, %if.end87 ]
  %s1.0248 = phi i32 [ 0, %while.cond63.preheader ], [ %s1.1, %if.end87 ]
  %r.1247 = phi i32 [ -2147483648, %while.cond63.preheader ], [ %shr93, %if.end87 ]
  %add66 = add i32 %s1.0248, %r.1247
  %cmp67 = icmp sgt i32 %ix0.6251, %s0.2252
  br i1 %cmp67, label %if.then70, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body65
  %cmp68 = icmp ne i32 %ix0.6251, %s0.2252
  %cmp69 = icmp ult i32 %ix1.4249, %add66
  %or.cond = or i1 %cmp68, %cmp69
  br i1 %or.cond, label %if.end87, label %if.then70

if.then70:                                        ; preds = %lor.lhs.false, %while.body65
  %add71 = add i32 %add66, %r.1247
  %cmp73 = icmp slt i32 %add66, 0
  %cmp76 = icmp sgt i32 %add71, -1
  %or.cond243 = and i1 %cmp73, %cmp76
  %add78 = zext i1 %or.cond243 to i32
  %s0.3 = add nsw i32 %add78, %s0.2252
  %cmp81 = icmp ult i32 %ix1.4249, %add66
  %sub83 = sext i1 %cmp81 to i32
  %sub80 = add i32 %sub83, %ix0.6251
  %sub83.sub80 = sub i32 %sub80, %s0.2252
  %sub85 = sub i32 %ix1.4249, %add66
  %add86 = add i32 %q1.0250, %r.1247
  br label %if.end87

if.end87:                                         ; preds = %if.then70, %lor.lhs.false
  %s1.1 = phi i32 [ %add71, %if.then70 ], [ %s1.0248, %lor.lhs.false ]
  %ix1.5 = phi i32 [ %sub85, %if.then70 ], [ %ix1.4249, %lor.lhs.false ]
  %q1.1 = phi i32 [ %add86, %if.then70 ], [ %q1.0250, %lor.lhs.false ]
  %ix0.8 = phi i32 [ %sub83.sub80, %if.then70 ], [ %ix0.6251, %lor.lhs.false ]
  %s0.4 = phi i32 [ %s0.3, %if.then70 ], [ %s0.2252, %lor.lhs.false ]
  %shr89 = lshr i32 %ix1.5, 31
  %factor246 = shl i32 %ix0.8, 1
  %add91 = or i32 %factor246, %shr89
  %add92 = shl i32 %ix1.5, 1
  %shr93 = lshr i32 %r.1247, 1
  %cmp64 = icmp eq i32 %shr93, 0
  br i1 %cmp64, label %while.end94, label %while.body65

while.end94:                                      ; preds = %if.end87
  %add92.lcssa = phi i32 [ %add92, %if.end87 ]
  %add91.lcssa = phi i32 [ %add91, %if.end87 ]
  %q1.1.lcssa = phi i32 [ %q1.1, %if.end87 ]
  %or95 = or i32 %add91.lcssa, %add92.lcssa
  %cmp96 = icmp eq i32 %or95, 0
  br i1 %cmp96, label %if.end117, label %if.then99

if.then99:                                        ; preds = %while.end94
  %cmp100 = icmp eq i32 %q1.1.lcssa, -1
  br i1 %cmp100, label %if.then101, label %if.else111

if.then101:                                       ; preds = %if.then99
  %add102 = add nsw i32 %q.1.lcssa, 1
  br label %if.end117

if.else111:                                       ; preds = %if.then99
  %and112 = and i32 %q1.1.lcssa, 1
  %add113 = add i32 %and112, %q1.1.lcssa
  br label %if.end117

if.end117:                                        ; preds = %if.else111, %if.then101, %while.end94
  %q1.2 = phi i32 [ 0, %if.then101 ], [ %add113, %if.else111 ], [ %q1.1.lcssa, %while.end94 ]
  %q.3 = phi i32 [ %add102, %if.then101 ], [ %q.1.lcssa, %if.else111 ], [ %q.1.lcssa, %while.end94 ]
  %shr118 = ashr i32 %q.3, 1
  %shr120 = lshr i32 %q1.2, 1
  %2 = shl i32 %q.3, 31
  %3 = or i32 %2, %shr120
  %shl126 = shl i32 %shr40242, 20
  %add119 = add i32 %shl126, 1071644672
  %add127 = add i32 %add119, %shr118
  %iw_u.sroa.0.4.insert.ext = zext i32 %add127 to i64
  %iw_u.sroa.0.4.insert.shift = shl nuw i64 %iw_u.sroa.0.4.insert.ext, 32
  %iw_u.sroa.0.0.insert.ext = zext i32 %3 to i64
  %iw_u.sroa.0.0.insert.insert = or i64 %iw_u.sroa.0.4.insert.shift, %iw_u.sroa.0.0.insert.ext
  %4 = bitcast i64 %iw_u.sroa.0.0.insert.insert to double
  br label %return

return:                                           ; preds = %if.end117, %if.then8, %if.then3, %if.then
  %retval.0 = phi double [ %add, %if.then ], [ %div, %if.then8 ], [ %4, %if.end117 ], [ %x, %if.then3 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__ieee754_tgamma(double %x) #2 {
entry:
  %signgam_local = alloca i32, align 4
  %call = call double @__ieee754_lgamma_r(double %x, i32* %signgam_local) #8
  %call1 = call double @exp(double %call) #8
  %0 = load i32* %signgam_local, align 4, !tbaa !433
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sub = fsub double -0.000000e+00, %call1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %y.0 = phi double [ %sub, %if.then ], [ %call1, %entry ]
  ret double %y.0
}

; Function Attrs: nounwind
define double @exp2(double %x) #2 {
entry:
  %y.i49.i = alloca double, align 8
  %y.i.i = alloca double, align 8
  %0 = bitcast double %x to i64
  %shr.i = lshr i64 %0, 52
  %conv.i = trunc i64 %shr.i to i32
  %and = and i32 %conv.i, 2047
  %sub = add nsw i32 %and, -969
  %cmp = icmp ult i32 %sub, 63
  br i1 %cmp, label %if.end46, label %if.then, !prof !426

if.then:                                          ; preds = %entry
  %cmp7 = icmp slt i32 %sub, 0
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then
  %add = fadd double %x, 1.000000e+00
  br label %return

if.end:                                           ; preds = %if.then
  %cmp11 = icmp ult i32 %and, 1033
  br i1 %cmp11, label %if.end38, label %if.then13

if.then13:                                        ; preds = %if.end
  %cmp16 = icmp eq i64 %0, -4503599627370496
  br i1 %cmp16, label %return, label %if.end19

if.end19:                                         ; preds = %if.then13
  %cmp21 = icmp eq i32 %and, 2047
  br i1 %cmp21, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end19
  %add24 = fadd double %x, 1.000000e+00
  br label %return

if.end25:                                         ; preds = %if.end19
  %tobool27 = icmp slt i64 %0, 0
  br i1 %tobool27, label %if.else, label %if.then28

if.then28:                                        ; preds = %if.end25
  %call29 = tail call double @__math_oflow(i32 0) #8
  br label %return

if.else:                                          ; preds = %if.end25
  %cmp32 = icmp ult i64 %0, -4570929321408987136
  br i1 %cmp32, label %if.end38, label %if.then34

if.then34:                                        ; preds = %if.else
  %call35 = tail call double @__math_uflow(i32 0) #8
  br label %return

if.end38:                                         ; preds = %if.else, %if.end
  %1 = trunc i64 %0 to i63
  %cmp42 = icmp ugt i63 %1, -4571998046711185408
  %.and = select i1 %cmp42, i32 0, i32 %and
  br label %if.end46

if.end46:                                         ; preds = %if.end38, %entry
  %abstop.0 = phi i32 [ %and, %entry ], [ %.and, %if.end38 ]
  %2 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 5), align 4, !tbaa !439
  %add47 = fadd double %2, %x
  %3 = bitcast double %add47 to i64
  %sub50 = fsub double %add47, %2
  %sub51 = fsub double %x, %sub50
  %rem = shl i64 %3, 1
  %mul52 = and i64 %rem, 254
  %shl = shl i64 %3, 45
  %idxprom = trunc i64 %mul52 to i32
  %arrayidx = getelementptr inbounds %struct.exp_data* @__exp_data, i32 0, i32 7, i32 %idxprom
  %4 = load i64* %arrayidx, align 4, !tbaa !441
  %5 = bitcast i64 %4 to double
  %add54105 = or i64 %mul52, 1
  %idxprom55 = trunc i64 %add54105 to i32
  %arrayidx56 = getelementptr inbounds %struct.exp_data* @__exp_data, i32 0, i32 7, i32 %idxprom55
  %6 = load i64* %arrayidx56, align 4, !tbaa !441
  %add57 = add i64 %shl, %6
  %mul58 = fmul double %sub51, %sub51
  %7 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 6, i32 0), align 4, !tbaa !429
  %mul59 = fmul double %sub51, %7
  %add60 = fadd double %5, %mul59
  %8 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 6, i32 1), align 4, !tbaa !429
  %9 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 6, i32 2), align 4, !tbaa !429
  %mul61 = fmul double %sub51, %9
  %add62 = fadd double %8, %mul61
  %mul63 = fmul double %mul58, %add62
  %add64 = fadd double %add60, %mul63
  %mul65 = fmul double %mul58, %mul58
  %10 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 6, i32 3), align 4, !tbaa !429
  %11 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 6, i32 4), align 4, !tbaa !429
  %mul66 = fmul double %sub51, %11
  %add67 = fadd double %10, %mul66
  %mul68 = fmul double %mul65, %add67
  %add69 = fadd double %add64, %mul68
  %cmp70 = icmp eq i32 %abstop.0, 0
  br i1 %cmp70, label %if.then74, label %if.end76, !prof !418

if.then74:                                        ; preds = %if.end46
  %and.i = and i64 %3, 2147483648
  %cmp.i = icmp eq i64 %and.i, 0
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then74
  %sub.i = add i64 %add57, -4503599627370496
  %12 = bitcast i64 %sub.i to double
  %mul.i = fmul double %12, %add69
  %add.i = fadd double %12, %mul.i
  %mul3.i = fmul double %add.i, 2.000000e+00
  br label %return

if.end.i:                                         ; preds = %if.then74
  %add5.i = add i64 %add57, 4602678819172646912
  %13 = bitcast i64 %add5.i to double
  %mul7.i = fmul double %13, %add69
  %add8.i = fadd double %13, %mul7.i
  %cmp9.i = fcmp olt double %add8.i, 1.000000e+00
  br i1 %cmp9.i, label %if.then10.i, label %if.end28.i

if.then10.i:                                      ; preds = %if.end.i
  %sub13.i = fsub double %13, %add8.i
  %add15.i = fadd double %mul7.i, %sub13.i
  %add16.i = fadd double %add8.i, 1.000000e+00
  %sub17.i = fsub double 1.000000e+00, %add16.i
  %add18.i = fadd double %add8.i, %sub17.i
  %add19.i = fadd double %add15.i, %add18.i
  %add20.i = fadd double %add16.i, %add19.i
  %sub22.i = fadd double %add20.i, -1.000000e+00
  %cmp23.i = fcmp oeq double %sub22.i, 0.000000e+00
  %y.0.i = select i1 %cmp23.i, double 0.000000e+00, double %sub22.i
  %y.i49.i.0.y.i49.0..sroa_cast = bitcast double* %y.i49.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %y.i49.i.0.y.i49.0..sroa_cast)
  store volatile double 0x10000000000000, double* %y.i49.i, align 8, !tbaa !429
  %y.i49.i.0.y.i49.0.y.0.y.0..i.i = load volatile double* %y.i49.i, align 8
  call void @llvm.lifetime.end(i64 8, i8* %y.i49.i.0.y.i49.0..sroa_cast)
  %mul27.i = fmul double %y.i49.i.0.y.i49.0.y.0.y.0..i.i, 0x10000000000000
  %y.i.i.0.y.i.0..sroa_cast = bitcast double* %y.i.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %y.i.i.0.y.i.0..sroa_cast)
  store volatile double %mul27.i, double* %y.i.i, align 8, !tbaa !429
  call void @llvm.lifetime.end(i64 8, i8* %y.i.i.0.y.i.0..sroa_cast)
  br label %if.end28.i

if.end28.i:                                       ; preds = %if.then10.i, %if.end.i
  %y.1.i = phi double [ %y.0.i, %if.then10.i ], [ %add8.i, %if.end.i ]
  %mul29.i = fmul double %y.1.i, 0x10000000000000
  br label %return

if.end76:                                         ; preds = %if.end46
  %14 = bitcast i64 %add57 to double
  %mul78 = fmul double %14, %add69
  %add79 = fadd double %14, %mul78
  br label %return

return:                                           ; preds = %if.end76, %if.end28.i, %if.then.i, %if.then34, %if.then28, %if.then23, %if.then13, %if.then9
  %retval.0 = phi double [ %add, %if.then9 ], [ %add24, %if.then23 ], [ %call35, %if.then34 ], [ %add79, %if.end76 ], [ %call29, %if.then28 ], [ 0.000000e+00, %if.then13 ], [ %mul3.i, %if.then.i ], [ %mul29.i, %if.end28.i ]
  ret double %retval.0
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #4

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #4

; Function Attrs: nounwind
define double @exp(double %x) #2 {
entry:
  %y.i49.i = alloca double, align 8
  %y.i.i = alloca double, align 8
  %0 = bitcast double %x to i64
  %shr.i = lshr i64 %0, 52
  %conv.i = trunc i64 %shr.i to i32
  %and = and i32 %conv.i, 2047
  %sub = add nsw i32 %and, -969
  %cmp = icmp ult i32 %sub, 63
  br i1 %cmp, label %if.end32, label %if.then, !prof !426

if.then:                                          ; preds = %entry
  %cmp7 = icmp slt i32 %sub, 0
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then
  %add = fadd double %x, 1.000000e+00
  br label %return

if.end:                                           ; preds = %if.then
  %cmp11 = icmp ult i32 %and, 1033
  br i1 %cmp11, label %if.end32, label %if.then13

if.then13:                                        ; preds = %if.end
  %cmp16 = icmp eq i64 %0, -4503599627370496
  br i1 %cmp16, label %return, label %if.end19

if.end19:                                         ; preds = %if.then13
  %cmp21 = icmp eq i32 %and, 2047
  br i1 %cmp21, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end19
  %add24 = fadd double %x, 1.000000e+00
  br label %return

if.end25:                                         ; preds = %if.end19
  %tobool27 = icmp slt i64 %0, 0
  br i1 %tobool27, label %if.then28, label %if.else

if.then28:                                        ; preds = %if.end25
  %call29 = tail call double @__math_uflow(i32 0) #8
  br label %return

if.else:                                          ; preds = %if.end25
  %call30 = tail call double @__math_oflow(i32 0) #8
  br label %return

if.end32:                                         ; preds = %if.end, %entry
  %abstop.0 = phi i32 [ %and, %entry ], [ 0, %if.end ]
  %1 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 0), align 4, !tbaa !443
  %mul = fmul double %1, %x
  %2 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 1), align 4, !tbaa !444
  %add33 = fadd double %mul, %2
  %3 = bitcast double %add33 to i64
  %sub36 = fsub double %add33, %2
  %4 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 2), align 4, !tbaa !445
  %mul37 = fmul double %4, %sub36
  %add38 = fadd double %mul37, %x
  %5 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 3), align 4, !tbaa !446
  %mul39 = fmul double %sub36, %5
  %add40 = fadd double %mul39, %add38
  %rem = shl i64 %3, 1
  %mul41 = and i64 %rem, 254
  %shl = shl i64 %3, 45
  %idxprom = trunc i64 %mul41 to i32
  %arrayidx = getelementptr inbounds %struct.exp_data* @__exp_data, i32 0, i32 7, i32 %idxprom
  %6 = load i64* %arrayidx, align 4, !tbaa !441
  %7 = bitcast i64 %6 to double
  %add4392 = or i64 %mul41, 1
  %idxprom44 = trunc i64 %add4392 to i32
  %arrayidx45 = getelementptr inbounds %struct.exp_data* @__exp_data, i32 0, i32 7, i32 %idxprom44
  %8 = load i64* %arrayidx45, align 4, !tbaa !441
  %add46 = add i64 %8, %shl
  %mul47 = fmul double %add40, %add40
  %add48 = fadd double %7, %add40
  %9 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 4, i32 0), align 4, !tbaa !429
  %10 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 4, i32 1), align 4, !tbaa !429
  %mul49 = fmul double %add40, %10
  %add50 = fadd double %9, %mul49
  %mul51 = fmul double %mul47, %add50
  %add52 = fadd double %add48, %mul51
  %mul53 = fmul double %mul47, %mul47
  %11 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 4, i32 2), align 4, !tbaa !429
  %12 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 4, i32 3), align 4, !tbaa !429
  %mul54 = fmul double %add40, %12
  %add55 = fadd double %11, %mul54
  %mul56 = fmul double %mul53, %add55
  %add57 = fadd double %add52, %mul56
  %cmp58 = icmp eq i32 %abstop.0, 0
  br i1 %cmp58, label %if.then62, label %if.end64, !prof !418

if.then62:                                        ; preds = %if.end32
  %and.i = and i64 %3, 2147483648
  %cmp.i = icmp eq i64 %and.i, 0
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then62
  %sub.i = add i64 %add46, -4544132024016830464
  %13 = bitcast i64 %sub.i to double
  %mul.i = fmul double %13, %add57
  %add.i = fadd double %13, %mul.i
  %mul3.i = fmul double %add.i, 0x7F00000000000000
  br label %return

if.end.i:                                         ; preds = %if.then62
  %add5.i = add i64 %add46, 4602678819172646912
  %14 = bitcast i64 %add5.i to double
  %mul7.i = fmul double %14, %add57
  %add8.i = fadd double %14, %mul7.i
  %cmp9.i = fcmp olt double %add8.i, 1.000000e+00
  br i1 %cmp9.i, label %if.then10.i, label %if.end28.i

if.then10.i:                                      ; preds = %if.end.i
  %sub13.i = fsub double %14, %add8.i
  %add15.i = fadd double %mul7.i, %sub13.i
  %add16.i = fadd double %add8.i, 1.000000e+00
  %sub17.i = fsub double 1.000000e+00, %add16.i
  %add18.i = fadd double %add8.i, %sub17.i
  %add19.i = fadd double %add15.i, %add18.i
  %add20.i = fadd double %add16.i, %add19.i
  %sub22.i = fadd double %add20.i, -1.000000e+00
  %cmp23.i = fcmp oeq double %sub22.i, 0.000000e+00
  %y.0.i = select i1 %cmp23.i, double 0.000000e+00, double %sub22.i
  %y.i49.i.0.y.i49.0..sroa_cast = bitcast double* %y.i49.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %y.i49.i.0.y.i49.0..sroa_cast)
  store volatile double 0x10000000000000, double* %y.i49.i, align 8, !tbaa !429
  %y.i49.i.0.y.i49.0.y.0.y.0..i.i = load volatile double* %y.i49.i, align 8
  call void @llvm.lifetime.end(i64 8, i8* %y.i49.i.0.y.i49.0..sroa_cast)
  %mul27.i = fmul double %y.i49.i.0.y.i49.0.y.0.y.0..i.i, 0x10000000000000
  %y.i.i.0.y.i.0..sroa_cast = bitcast double* %y.i.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %y.i.i.0.y.i.0..sroa_cast)
  store volatile double %mul27.i, double* %y.i.i, align 8, !tbaa !429
  call void @llvm.lifetime.end(i64 8, i8* %y.i.i.0.y.i.0..sroa_cast)
  br label %if.end28.i

if.end28.i:                                       ; preds = %if.then10.i, %if.end.i
  %y.1.i = phi double [ %y.0.i, %if.then10.i ], [ %add8.i, %if.end.i ]
  %mul29.i = fmul double %y.1.i, 0x10000000000000
  br label %return

if.end64:                                         ; preds = %if.end32
  %15 = bitcast i64 %add46 to double
  %mul66 = fmul double %15, %add57
  %add67 = fadd double %15, %mul66
  br label %return

return:                                           ; preds = %if.end64, %if.end28.i, %if.then.i, %if.else, %if.then28, %if.then23, %if.then13, %if.then9
  %retval.0 = phi double [ %add, %if.then9 ], [ %add24, %if.then23 ], [ %call29, %if.then28 ], [ %call30, %if.else ], [ %add67, %if.end64 ], [ 0.000000e+00, %if.then13 ], [ %mul3.i, %if.then.i ], [ %mul29.i, %if.end28.i ]
  ret double %retval.0
}

; Function Attrs: nounwind
define x86_fp80 @hypotl(x86_fp80 %x, x86_fp80 %y) #2 {
entry:
  %call = tail call x86_fp80 @__ieee754_hypotl(x86_fp80 %x, x86_fp80 %y) #8
  ret x86_fp80 %call
}

; Function Attrs: nounwind readnone
define double @__kernel_cos(double %x, double %y) #3 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ult i32 %and, 1044381696
  %conv = fptosi double %x to i32
  %cmp1 = icmp eq i32 %conv, 0
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %return, label %if.end4

if.end4:                                          ; preds = %entry
  %mul = fmul double %x, %x
  %mul5 = fmul double %mul, 0xBDA8FAE9BE8838D4
  %add = fadd double %mul5, 0x3E21EE9EBDB4B1C4
  %mul6 = fmul double %mul, %add
  %add7 = fadd double %mul6, 0xBE927E4F809C52AD
  %mul8 = fmul double %mul, %add7
  %add9 = fadd double %mul8, 0x3EFA01A019CB1590
  %mul10 = fmul double %mul, %add9
  %add11 = fadd double %mul10, 0xBF56C16C16C15177
  %mul12 = fmul double %mul, %add11
  %add13 = fadd double %mul12, 0x3FA555555555554C
  %mul14 = fmul double %mul, %add13
  %cmp15 = icmp ult i32 %and, 1070805811
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end4
  %mul18 = fmul double %mul, 5.000000e-01
  %mul19 = fmul double %mul, %mul14
  %mul20 = fmul double %x, %y
  %sub = fsub double %mul19, %mul20
  %sub21 = fsub double %mul18, %sub
  %sub22 = fsub double 1.000000e+00, %sub21
  br label %return

if.else:                                          ; preds = %if.end4
  %cmp23 = icmp ugt i32 %and, 1072234496
  br i1 %cmp23, label %if.end34, label %do.body27

do.body27:                                        ; preds = %if.else
  %sub28 = add nsw i32 %and, -2097152
  %iw_u.sroa.0.4.insert.ext = zext i32 %sub28 to i64
  %iw_u.sroa.0.4.insert.shift = shl nuw i64 %iw_u.sroa.0.4.insert.ext, 32
  %1 = bitcast i64 %iw_u.sroa.0.4.insert.shift to double
  br label %if.end34

if.end34:                                         ; preds = %do.body27, %if.else
  %qx.0 = phi double [ %1, %do.body27 ], [ 2.812500e-01, %if.else ]
  %mul35 = fmul double %mul, 5.000000e-01
  %sub36 = fsub double %mul35, %qx.0
  %sub37 = fsub double 1.000000e+00, %qx.0
  %mul38 = fmul double %mul, %mul14
  %mul39 = fmul double %x, %y
  %sub40 = fsub double %mul38, %mul39
  %sub41 = fsub double %sub36, %sub40
  %sub42 = fsub double %sub37, %sub41
  br label %return

return:                                           ; preds = %if.end34, %if.then17, %entry
  %retval.0 = phi double [ %sub22, %if.then17 ], [ %sub42, %if.end34 ], [ 1.000000e+00, %entry ]
  ret double %retval.0
}

; Function Attrs: nounwind readnone
define float @__kernel_cosf(float %x, float %y) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 838860800
  %conv = fptosi float %x to i32
  %cmp1 = icmp eq i32 %conv, 0
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %return, label %if.end4

if.end4:                                          ; preds = %entry
  %mul = fmul float %x, %x
  %mul5 = fmul float %mul, 0xBDA8FAE9C0000000
  %add = fadd float %mul5, 0x3E21EE9EC0000000
  %mul6 = fmul float %mul, %add
  %add7 = fadd float %mul6, 0xBE927E4F80000000
  %mul8 = fmul float %mul, %add7
  %add9 = fadd float %mul8, 0x3EFA01A020000000
  %mul10 = fmul float %mul, %add9
  %add11 = fadd float %mul10, 0xBF56C16C20000000
  %mul12 = fmul float %mul, %add11
  %add13 = fadd float %mul12, 0x3FA5555560000000
  %mul14 = fmul float %mul, %add13
  %cmp15 = icmp ult i32 %and, 1050253722
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end4
  %mul18 = fmul float %mul, 5.000000e-01
  %mul19 = fmul float %mul, %mul14
  %mul20 = fmul float %x, %y
  %sub = fsub float %mul19, %mul20
  %sub21 = fsub float %mul18, %sub
  %sub22 = fsub float 1.000000e+00, %sub21
  br label %return

if.else:                                          ; preds = %if.end4
  %cmp23 = icmp ugt i32 %and, 1061683200
  br i1 %cmp23, label %if.end32, label %do.body27

do.body27:                                        ; preds = %if.else
  %sub28 = add nsw i32 %and, -16777216
  %1 = bitcast i32 %sub28 to float
  br label %if.end32

if.end32:                                         ; preds = %do.body27, %if.else
  %qx.0 = phi float [ %1, %do.body27 ], [ 2.812500e-01, %if.else ]
  %mul33 = fmul float %mul, 5.000000e-01
  %sub34 = fsub float %mul33, %qx.0
  %sub35 = fsub float 1.000000e+00, %qx.0
  %mul36 = fmul float %mul, %mul14
  %mul37 = fmul float %x, %y
  %sub38 = fsub float %mul36, %mul37
  %sub39 = fsub float %sub34, %sub38
  %sub40 = fsub float %sub35, %sub39
  br label %return

return:                                           ; preds = %if.end32, %if.then17, %entry
  %retval.0 = phi float [ %sub22, %if.then17 ], [ %sub40, %if.end32 ], [ 1.000000e+00, %entry ]
  ret float %retval.0
}

; Function Attrs: nounwind
define i32 @__kernel_rem_pio2f(float* nocapture readonly %x, float* nocapture %y, i32 %e0, i32 %nx, i32 %prec, i32* nocapture readonly %ipio2) #2 {
entry:
  %iq = alloca [20 x i32], align 4
  %f = alloca [20 x float], align 4
  %fq = alloca [20 x float], align 4
  %q = alloca [20 x float], align 4
  %0 = bitcast [20 x i32]* %iq to i8*
  call void @llvm.lifetime.start(i64 80, i8* %0) #4
  %1 = bitcast [20 x float]* %f to i8*
  call void @llvm.lifetime.start(i64 80, i8* %1) #4
  %2 = bitcast [20 x float]* %fq to i8*
  call void @llvm.lifetime.start(i64 80, i8* %2) #4
  %3 = bitcast [20 x float]* %q to i8*
  call void @llvm.lifetime.start(i64 80, i8* %3) #4
  %arrayidx = getelementptr inbounds [3 x i32]* @init_jk, i32 0, i32 %prec
  %4 = load i32* %arrayidx, align 4, !tbaa !433
  %sub = add nsw i32 %nx, -1
  %sub1 = add nsw i32 %e0, -3
  %div = sdiv i32 %sub1, 8
  %cmp = icmp slt i32 %div, 0
  %.div = select i1 %cmp, i32 0, i32 %div
  %add = shl i32 %.div, 3
  %mul = add i32 %add, 8
  %sub2 = sub nsw i32 %e0, %mul
  %add4 = add nsw i32 %4, %sub
  %cmp5655 = icmp slt i32 %add4, 0
  br i1 %cmp5655, label %for.cond14.preheader.lr.ph, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %sub3 = sub nsw i32 %.div, %sub
  %5 = add i32 %4, %nx
  br label %for.body

for.cond14.preheader.lr.ph.loopexit:              ; preds = %cond.end
  br label %for.cond14.preheader.lr.ph

for.cond14.preheader.lr.ph:                       ; preds = %for.cond14.preheader.lr.ph.loopexit, %entry
  %cmp15649 = icmp slt i32 %nx, 1
  br label %for.cond14.preheader

for.body:                                         ; preds = %cond.end, %for.body.lr.ph
  %j.0657 = phi i32 [ %sub3, %for.body.lr.ph ], [ %inc9, %cond.end ]
  %i.0656 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %cond.end ]
  %cmp6 = icmp slt i32 %j.0657, 0
  br i1 %cmp6, label %cond.end, label %cond.false

cond.false:                                       ; preds = %for.body
  %arrayidx7 = getelementptr inbounds i32* %ipio2, i32 %j.0657
  %6 = load i32* %arrayidx7, align 4, !tbaa !433
  %conv = sitofp i32 %6 to float
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %for.body
  %cond = phi float [ %conv, %cond.false ], [ 0.000000e+00, %for.body ]
  %arrayidx8 = getelementptr inbounds [20 x float]* %f, i32 0, i32 %i.0656
  store float %cond, float* %arrayidx8, align 4, !tbaa !435
  %inc = add nsw i32 %i.0656, 1
  %inc9 = add nsw i32 %j.0657, 1
  %exitcond672 = icmp eq i32 %inc, %5
  br i1 %exitcond672, label %for.cond14.preheader.lr.ph.loopexit, label %for.body

for.cond14.preheader:                             ; preds = %for.end26, %for.cond14.preheader.lr.ph
  %i.1654 = phi i32 [ 0, %for.cond14.preheader.lr.ph ], [ %inc29, %for.end26 ]
  br i1 %cmp15649, label %for.end26, label %for.body17.lr.ph

for.body17.lr.ph:                                 ; preds = %for.cond14.preheader
  %add19 = add nsw i32 %i.1654, %sub
  br label %for.body17

recompute.preheader:                              ; preds = %for.end26
  %cmp56 = icmp sgt i32 %sub2, 0
  %sub61 = sub nsw i32 8, %sub2
  %sub69 = sub nsw i32 7, %sub2
  %cmp167640 = icmp slt i32 %nx, 1
  %cmp71 = icmp eq i32 %mul, %e0
  br label %recompute

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph
  %fw.0651 = phi float [ 0.000000e+00, %for.body17.lr.ph ], [ %add23, %for.body17 ]
  %j.1650 = phi i32 [ 0, %for.body17.lr.ph ], [ %inc25, %for.body17 ]
  %arrayidx18 = getelementptr inbounds float* %x, i32 %j.1650
  %7 = load float* %arrayidx18, align 4, !tbaa !435
  %sub20 = sub i32 %add19, %j.1650
  %arrayidx21 = getelementptr inbounds [20 x float]* %f, i32 0, i32 %sub20
  %8 = load float* %arrayidx21, align 4, !tbaa !435
  %mul22 = fmul float %7, %8
  %add23 = fadd float %fw.0651, %mul22
  %inc25 = add nsw i32 %j.1650, 1
  %cmp15 = icmp slt i32 %j.1650, %sub
  br i1 %cmp15, label %for.body17, label %for.end26.loopexit

for.end26.loopexit:                               ; preds = %for.body17
  %add23.lcssa = phi float [ %add23, %for.body17 ]
  br label %for.end26

for.end26:                                        ; preds = %for.end26.loopexit, %for.cond14.preheader
  %fw.0.lcssa = phi float [ 0.000000e+00, %for.cond14.preheader ], [ %add23.lcssa, %for.end26.loopexit ]
  %arrayidx27 = getelementptr inbounds [20 x float]* %q, i32 0, i32 %i.1654
  store float %fw.0.lcssa, float* %arrayidx27, align 4, !tbaa !435
  %inc29 = add nsw i32 %i.1654, 1
  %cmp11 = icmp slt i32 %i.1654, %4
  br i1 %cmp11, label %for.cond14.preheader, label %recompute.preheader

recompute.loopexit:                               ; preds = %for.end178
  br label %recompute.backedge

recompute:                                        ; preds = %recompute.backedge, %recompute.preheader
  %jz.0 = phi i32 [ %4, %recompute.preheader ], [ %add157, %recompute.backedge ]
  %arrayidx31 = getelementptr inbounds [20 x float]* %q, i32 0, i32 %jz.0
  %9 = load float* %arrayidx31, align 4, !tbaa !435
  %cmp33626 = icmp sgt i32 %jz.0, 0
  br i1 %cmp33626, label %for.body35.preheader, label %for.end48

for.body35.preheader:                             ; preds = %recompute
  br label %for.body35

for.body35:                                       ; preds = %for.body35, %for.body35.preheader
  %z.0629 = phi float [ %add45, %for.body35 ], [ %9, %for.body35.preheader ]
  %j.2628 = phi i32 [ %sub43, %for.body35 ], [ %jz.0, %for.body35.preheader ]
  %i.2627 = phi i32 [ %inc47, %for.body35 ], [ 0, %for.body35.preheader ]
  tail call void @__legup_label(i8* getelementptr inbounds ([10 x i8]* @.str, i32 0, i32 0)) #4
  %mul36 = fmul float %z.0629, 3.906250e-03
  %conv37 = fptosi float %mul36 to i32
  %conv38 = sitofp i32 %conv37 to float
  %mul39 = fmul float %conv38, 2.560000e+02
  %sub40 = fsub float %z.0629, %mul39
  %conv41 = fptosi float %sub40 to i32
  %arrayidx42 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %i.2627
  store i32 %conv41, i32* %arrayidx42, align 4, !tbaa !433
  %sub43 = add nsw i32 %j.2628, -1
  %arrayidx44 = getelementptr inbounds [20 x float]* %q, i32 0, i32 %sub43
  %10 = load float* %arrayidx44, align 4, !tbaa !435
  %add45 = fadd float %conv38, %10
  %inc47 = add nsw i32 %i.2627, 1
  %exitcond670 = icmp eq i32 %inc47, %jz.0
  br i1 %exitcond670, label %for.end48.loopexit, label %for.body35

for.end48.loopexit:                               ; preds = %for.body35
  %add45.lcssa = phi float [ %add45, %for.body35 ]
  br label %for.end48

for.end48:                                        ; preds = %for.end48.loopexit, %recompute
  %z.0.lcssa = phi float [ %9, %recompute ], [ %add45.lcssa, %for.end48.loopexit ]
  %call = tail call float @scalbnf(float %z.0.lcssa, i32 %sub2) #8
  %mul49 = fmul float %call, 1.250000e-01
  %call50 = tail call float @floorf(float %mul49) #8
  %mul51 = fmul float %call50, 8.000000e+00
  %sub52 = fsub float %call, %mul51
  %conv53 = fptosi float %sub52 to i32
  %conv54 = sitofp i32 %conv53 to float
  %sub55 = fsub float %sub52, %conv54
  br i1 %cmp56, label %if.then58, label %if.else

if.then58:                                        ; preds = %for.end48
  %sub59 = add nsw i32 %jz.0, -1
  %arrayidx60 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub59
  %11 = load i32* %arrayidx60, align 4, !tbaa !433
  %shr = ashr i32 %11, %sub61
  %add62 = add nsw i32 %shr, %conv53
  %shl = shl i32 %shr, %sub61
  %sub66 = sub nsw i32 %11, %shl
  store i32 %sub66, i32* %arrayidx60, align 4, !tbaa !433
  %shr70 = ashr i32 %sub66, %sub69
  br label %if.end83

if.else:                                          ; preds = %for.end48
  br i1 %cmp71, label %if.then73, label %if.else77

if.then73:                                        ; preds = %if.else
  %sub74 = add nsw i32 %jz.0, -1
  %arrayidx75 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub74
  %12 = load i32* %arrayidx75, align 4, !tbaa !433
  %shr76 = ashr i32 %12, 7
  br label %if.end83

if.else77:                                        ; preds = %if.else
  %cmp78 = fcmp ult float %sub55, 5.000000e-01
  br i1 %cmp78, label %if.end130, label %if.then86

if.end83:                                         ; preds = %if.then73, %if.then58
  %n.0 = phi i32 [ %add62, %if.then58 ], [ %conv53, %if.then73 ]
  %ih.0 = phi i32 [ %shr70, %if.then58 ], [ %shr76, %if.then73 ]
  %cmp84 = icmp sgt i32 %ih.0, 0
  br i1 %cmp84, label %if.then86, label %if.end130

if.then86:                                        ; preds = %if.end83, %if.else77
  %ih.0579 = phi i32 [ %ih.0, %if.end83 ], [ 2, %if.else77 ]
  %n.0578 = phi i32 [ %n.0, %if.end83 ], [ %conv53, %if.else77 ]
  %add87 = add nsw i32 %n.0578, 1
  br i1 %cmp33626, label %for.body91.preheader, label %for.end108

for.body91.preheader:                             ; preds = %if.then86
  br label %for.body91

for.body91:                                       ; preds = %for.inc106, %for.body91.preheader
  %i.3633 = phi i32 [ %inc107, %for.inc106 ], [ 0, %for.body91.preheader ]
  %carry.0632 = phi i32 [ %carry.1, %for.inc106 ], [ 0, %for.body91.preheader ]
  %arrayidx92 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %i.3633
  %13 = load i32* %arrayidx92, align 4, !tbaa !433
  %cmp93 = icmp eq i32 %carry.0632, 0
  br i1 %cmp93, label %if.then95, label %if.else102

if.then95:                                        ; preds = %for.body91
  %cmp96 = icmp eq i32 %13, 0
  br i1 %cmp96, label %for.inc106, label %if.then98

if.then98:                                        ; preds = %if.then95
  %sub99 = sub nsw i32 256, %13
  store i32 %sub99, i32* %arrayidx92, align 4, !tbaa !433
  br label %for.inc106

if.else102:                                       ; preds = %for.body91
  %sub103 = sub nsw i32 255, %13
  store i32 %sub103, i32* %arrayidx92, align 4, !tbaa !433
  br label %for.inc106

for.inc106:                                       ; preds = %if.else102, %if.then98, %if.then95
  %carry.1 = phi i32 [ 1, %if.then98 ], [ 0, %if.then95 ], [ %carry.0632, %if.else102 ]
  %inc107 = add nsw i32 %i.3633, 1
  %exitcond671 = icmp eq i32 %inc107, %jz.0
  br i1 %exitcond671, label %for.end108.loopexit, label %for.body91

for.end108.loopexit:                              ; preds = %for.inc106
  %carry.1.lcssa = phi i32 [ %carry.1, %for.inc106 ]
  br label %for.end108

for.end108:                                       ; preds = %for.end108.loopexit, %if.then86
  %carry.0.lcssa = phi i32 [ 0, %if.then86 ], [ %carry.1.lcssa, %for.end108.loopexit ]
  br i1 %cmp56, label %if.then111, label %if.end118

if.then111:                                       ; preds = %for.end108
  switch i32 %sub2, label %if.end118 [
    i32 1, label %sw.bb
    i32 2, label %sw.bb114
  ]

sw.bb:                                            ; preds = %if.then111
  %sub112 = add nsw i32 %jz.0, -1
  %arrayidx113 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub112
  %14 = load i32* %arrayidx113, align 4, !tbaa !433
  %and = and i32 %14, 127
  store i32 %and, i32* %arrayidx113, align 4, !tbaa !433
  br label %if.end118

sw.bb114:                                         ; preds = %if.then111
  %sub115 = add nsw i32 %jz.0, -1
  %arrayidx116 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub115
  %15 = load i32* %arrayidx116, align 4, !tbaa !433
  %and117 = and i32 %15, 63
  store i32 %and117, i32* %arrayidx116, align 4, !tbaa !433
  br label %if.end118

if.end118:                                        ; preds = %sw.bb114, %sw.bb, %if.then111, %for.end108
  %cmp119 = icmp eq i32 %ih.0579, 2
  br i1 %cmp119, label %if.then121, label %if.end130

if.then121:                                       ; preds = %if.end118
  %sub122 = fsub float 1.000000e+00, %sub55
  %cmp123 = icmp eq i32 %carry.0.lcssa, 0
  br i1 %cmp123, label %if.end130, label %if.then125

if.then125:                                       ; preds = %if.then121
  %call126 = tail call float @scalbnf(float 1.000000e+00, i32 %sub2) #8
  %sub127 = fsub float %sub122, %call126
  br label %if.end130

if.end130:                                        ; preds = %if.then125, %if.then121, %if.end118, %if.end83, %if.else77
  %ih.0580 = phi i32 [ 2, %if.then125 ], [ 2, %if.then121 ], [ %ih.0579, %if.end118 ], [ %ih.0, %if.end83 ], [ 0, %if.else77 ]
  %n.1 = phi i32 [ %add87, %if.then125 ], [ %add87, %if.then121 ], [ %add87, %if.end118 ], [ %n.0, %if.end83 ], [ %conv53, %if.else77 ]
  %z.1 = phi float [ %sub127, %if.then125 ], [ %sub122, %if.then121 ], [ %sub55, %if.end118 ], [ %sub55, %if.end83 ], [ %sub55, %if.else77 ]
  %cmp131 = fcmp oeq float %z.1, 0.000000e+00
  br i1 %cmp131, label %for.cond135.preheader, label %if.else196

for.cond135.preheader:                            ; preds = %if.end130
  %cmp136636 = icmp sgt i32 %jz.0, %4
  br i1 %cmp136636, label %for.body138.preheader, label %for.cond146.preheader

for.body138.preheader:                            ; preds = %for.cond135.preheader
  br label %for.body138

for.cond146.preheader:                            ; preds = %for.end142, %for.cond135.preheader
  br label %for.cond146

for.body138:                                      ; preds = %for.body138, %for.body138.preheader
  %i.4638.in = phi i32 [ %i.4638, %for.body138 ], [ %jz.0, %for.body138.preheader ]
  %j.3637 = phi i32 [ %or, %for.body138 ], [ 0, %for.body138.preheader ]
  %i.4638 = add nsw i32 %i.4638.in, -1
  %arrayidx139 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %i.4638
  %16 = load i32* %arrayidx139, align 4, !tbaa !433
  %or = or i32 %16, %j.3637
  %cmp136 = icmp sgt i32 %i.4638, %4
  br i1 %cmp136, label %for.body138, label %for.end142

for.end142:                                       ; preds = %for.body138
  %or.lcssa = phi i32 [ %or, %for.body138 ]
  %phitmp = icmp eq i32 %or.lcssa, 0
  br i1 %phitmp, label %for.cond146.preheader, label %while.cond.preheader

while.cond.preheader:                             ; preds = %for.end142
  %n.1.lcssa685 = phi i32 [ %n.1, %for.end142 ]
  %ih.0580.lcssa683 = phi i32 [ %ih.0580, %for.end142 ]
  %jz.0.lcssa682 = phi i32 [ %jz.0, %for.end142 ]
  br label %while.cond

for.cond146:                                      ; preds = %for.cond146, %for.cond146.preheader
  %k.0 = phi i32 [ %inc153, %for.cond146 ], [ 1, %for.cond146.preheader ]
  %sub147 = sub nsw i32 %4, %k.0
  %arrayidx148 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub147
  %17 = load i32* %arrayidx148, align 4, !tbaa !433
  %cmp149 = icmp eq i32 %17, 0
  %inc153 = add nsw i32 %k.0, 1
  br i1 %cmp149, label %for.cond146, label %for.cond156.preheader

for.cond156.preheader:                            ; preds = %for.cond146
  %k.0.lcssa = phi i32 [ %k.0, %for.cond146 ]
  %add157 = add nsw i32 %k.0.lcssa, %jz.0
  %cmp158645 = icmp sgt i32 %k.0.lcssa, 0
  br i1 %cmp158645, label %for.body160.preheader, label %recompute.backedge

recompute.backedge:                               ; preds = %for.cond156.preheader, %recompute.loopexit
  br label %recompute

for.body160.preheader:                            ; preds = %for.cond156.preheader
  br label %for.body160

for.body160:                                      ; preds = %for.end178, %for.body160.preheader
  %i.5647.in = phi i32 [ %i.5647, %for.end178 ], [ %jz.0, %for.body160.preheader ]
  %i.5647 = add nsw i32 %i.5647.in, 1
  %add161 = add nsw i32 %i.5647, %.div
  %arrayidx162 = getelementptr inbounds i32* %ipio2, i32 %add161
  %18 = load i32* %arrayidx162, align 4, !tbaa !433
  %conv163 = sitofp i32 %18 to float
  %add164 = add i32 %i.5647.in, %nx
  %arrayidx165 = getelementptr inbounds [20 x float]* %f, i32 0, i32 %add164
  store float %conv163, float* %arrayidx165, align 4, !tbaa !435
  br i1 %cmp167640, label %for.end178, label %for.body169.preheader

for.body169.preheader:                            ; preds = %for.body160
  br label %for.body169

for.body169:                                      ; preds = %for.body169, %for.body169.preheader
  %fw.1642 = phi float [ %add175, %for.body169 ], [ 0.000000e+00, %for.body169.preheader ]
  %j.4641 = phi i32 [ %inc177, %for.body169 ], [ 0, %for.body169.preheader ]
  %arrayidx170 = getelementptr inbounds float* %x, i32 %j.4641
  %19 = load float* %arrayidx170, align 4, !tbaa !435
  %sub172 = sub nsw i32 %add164, %j.4641
  %arrayidx173 = getelementptr inbounds [20 x float]* %f, i32 0, i32 %sub172
  %20 = load float* %arrayidx173, align 4, !tbaa !435
  %mul174 = fmul float %19, %20
  %add175 = fadd float %fw.1642, %mul174
  %inc177 = add nsw i32 %j.4641, 1
  %cmp167 = icmp slt i32 %j.4641, %sub
  br i1 %cmp167, label %for.body169, label %for.end178.loopexit

for.end178.loopexit:                              ; preds = %for.body169
  %add175.lcssa = phi float [ %add175, %for.body169 ]
  br label %for.end178

for.end178:                                       ; preds = %for.end178.loopexit, %for.body160
  %fw.1.lcssa = phi float [ 0.000000e+00, %for.body160 ], [ %add175.lcssa, %for.end178.loopexit ]
  %arrayidx179 = getelementptr inbounds [20 x float]* %q, i32 0, i32 %i.5647
  store float %fw.1.lcssa, float* %arrayidx179, align 4, !tbaa !435
  %cmp158 = icmp slt i32 %i.5647, %add157
  br i1 %cmp158, label %for.body160, label %recompute.loopexit

while.cond:                                       ; preds = %while.cond, %while.cond.preheader
  %q0.0.in = phi i32 [ %q0.0, %while.cond ], [ %sub2, %while.cond.preheader ]
  %jz.1.in = phi i32 [ %jz.1, %while.cond ], [ %jz.0.lcssa682, %while.cond.preheader ]
  %q0.0 = add nsw i32 %q0.0.in, -8
  %jz.1 = add nsw i32 %jz.1.in, -1
  %arrayidx191 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %jz.1
  %21 = load i32* %arrayidx191, align 4, !tbaa !433
  %cmp192 = icmp eq i32 %21, 0
  br i1 %cmp192, label %while.cond, label %if.end217.loopexit

if.else196:                                       ; preds = %if.end130
  %z.1.lcssa = phi float [ %z.1, %if.end130 ]
  %n.1.lcssa = phi i32 [ %n.1, %if.end130 ]
  %ih.0580.lcssa = phi i32 [ %ih.0580, %if.end130 ]
  %jz.0.lcssa = phi i32 [ %jz.0, %if.end130 ]
  %sub197 = sub nsw i32 0, %sub2
  %call198 = tail call float @scalbnf(float %z.1.lcssa, i32 %sub197) #8
  %cmp199 = fcmp ult float %call198, 2.560000e+02
  br i1 %cmp199, label %if.else213, label %if.then201

if.then201:                                       ; preds = %if.else196
  %mul202 = fmul float %call198, 3.906250e-03
  %conv203 = fptosi float %mul202 to i32
  %conv204 = sitofp i32 %conv203 to float
  %mul205 = fmul float %conv204, 2.560000e+02
  %sub206 = fsub float %call198, %mul205
  %conv207 = fptosi float %sub206 to i32
  %arrayidx208 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %jz.0.lcssa
  store i32 %conv207, i32* %arrayidx208, align 4, !tbaa !433
  %add209 = add nsw i32 %jz.0.lcssa, 1
  %add210 = add nsw i32 %sub2, 8
  %conv211 = fptosi float %conv204 to i32
  %arrayidx212 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %add209
  store i32 %conv211, i32* %arrayidx212, align 4, !tbaa !433
  br label %if.end217

if.else213:                                       ; preds = %if.else196
  %conv214 = fptosi float %call198 to i32
  %arrayidx215 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %jz.0.lcssa
  store i32 %conv214, i32* %arrayidx215, align 4, !tbaa !433
  br label %if.end217

if.end217.loopexit:                               ; preds = %while.cond
  %jz.1.lcssa = phi i32 [ %jz.1, %while.cond ]
  %q0.0.lcssa = phi i32 [ %q0.0, %while.cond ]
  br label %if.end217

if.end217:                                        ; preds = %if.end217.loopexit, %if.else213, %if.then201
  %n.1686 = phi i32 [ %n.1.lcssa, %if.then201 ], [ %n.1.lcssa, %if.else213 ], [ %n.1.lcssa685, %if.end217.loopexit ]
  %ih.0580684 = phi i32 [ %ih.0580.lcssa, %if.then201 ], [ %ih.0580.lcssa, %if.else213 ], [ %ih.0580.lcssa683, %if.end217.loopexit ]
  %q0.1 = phi i32 [ %add210, %if.then201 ], [ %sub2, %if.else213 ], [ %q0.0.lcssa, %if.end217.loopexit ]
  %jz.2 = phi i32 [ %add209, %if.then201 ], [ %jz.0.lcssa, %if.else213 ], [ %jz.1.lcssa, %if.end217.loopexit ]
  %call218 = tail call float @scalbnf(float 1.000000e+00, i32 %q0.1) #8
  %cmp220623 = icmp sgt i32 %jz.2, -1
  br i1 %cmp220623, label %for.body222.preheader, label %for.end254

for.body222.preheader:                            ; preds = %if.end217
  br label %for.body222

for.cond231.preheader:                            ; preds = %for.body222
  br i1 %cmp220623, label %for.cond235.preheader.lr.ph, label %for.end254

for.cond235.preheader.lr.ph:                      ; preds = %for.cond231.preheader
  %.op = xor i32 %4, -1
  br label %for.body241.lr.ph

for.body222:                                      ; preds = %for.body222, %for.body222.preheader
  %fw.2625 = phi float [ %mul227, %for.body222 ], [ %call218, %for.body222.preheader ]
  %i.6624 = phi i32 [ %dec229, %for.body222 ], [ %jz.2, %for.body222.preheader ]
  %arrayidx223 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %i.6624
  %22 = load i32* %arrayidx223, align 4, !tbaa !433
  %conv224 = sitofp i32 %22 to float
  %mul225 = fmul float %fw.2625, %conv224
  %arrayidx226 = getelementptr inbounds [20 x float]* %q, i32 0, i32 %i.6624
  store float %mul225, float* %arrayidx226, align 4, !tbaa !435
  %mul227 = fmul float %fw.2625, 3.906250e-03
  %dec229 = add nsw i32 %i.6624, -1
  %cmp220 = icmp sgt i32 %i.6624, 0
  br i1 %cmp220, label %for.body222, label %for.cond231.preheader

for.body241.lr.ph:                                ; preds = %for.end249, %for.cond235.preheader.lr.ph
  %indvars.iv = phi i32 [ -1, %for.cond235.preheader.lr.ph ], [ %indvars.iv.next, %for.end249 ]
  %i.7621 = phi i32 [ %jz.2, %for.cond235.preheader.lr.ph ], [ %dec253, %for.end249 ]
  %23 = icmp ugt i32 %indvars.iv, %.op
  %umax = select i1 %23, i32 %indvars.iv, i32 %.op
  %24 = sub i32 0, %umax
  %sub238 = sub nsw i32 %jz.2, %i.7621
  br label %for.body241

for.body241:                                      ; preds = %for.body241, %for.body241.lr.ph
  %fw.3617 = phi float [ 0.000000e+00, %for.body241.lr.ph ], [ %add246, %for.body241 ]
  %k.1616 = phi i32 [ 0, %for.body241.lr.ph ], [ %inc248, %for.body241 ]
  %arrayidx242 = getelementptr inbounds [11 x float]* @PIo2, i32 0, i32 %k.1616
  %25 = load float* %arrayidx242, align 4, !tbaa !435
  %add243 = add nsw i32 %k.1616, %i.7621
  %arrayidx244 = getelementptr inbounds [20 x float]* %q, i32 0, i32 %add243
  %26 = load float* %arrayidx244, align 4, !tbaa !435
  %mul245 = fmul float %25, %26
  %add246 = fadd float %fw.3617, %mul245
  %inc248 = add nsw i32 %k.1616, 1
  %exitcond669 = icmp eq i32 %inc248, %24
  br i1 %exitcond669, label %for.end249, label %for.body241

for.end249:                                       ; preds = %for.body241
  %add246.lcssa = phi float [ %add246, %for.body241 ]
  %arrayidx251 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %sub238
  store float %add246.lcssa, float* %arrayidx251, align 4, !tbaa !435
  %dec253 = add nsw i32 %i.7621, -1
  %cmp232 = icmp sgt i32 %i.7621, 0
  %indvars.iv.next = add i32 %indvars.iv, -1
  br i1 %cmp232, label %for.body241.lr.ph, label %for.end254.loopexit

for.end254.loopexit:                              ; preds = %for.end249
  br label %for.end254

for.end254:                                       ; preds = %for.end254.loopexit, %for.cond231.preheader, %if.end217
  switch i32 %prec, label %sw.epilog374 [
    i32 0, label %for.cond256.preheader
    i32 1, label %for.cond274.preheader
    i32 2, label %for.cond274.preheader
    i32 3, label %for.cond311.preheader
  ]

for.cond311.preheader:                            ; preds = %for.end254
  %cmp312611 = icmp sgt i32 %jz.2, 0
  br i1 %cmp312611, label %for.body314.lr.ph, label %for.end355

for.body314.lr.ph:                                ; preds = %for.cond311.preheader
  %arrayidx317.phi.trans.insert = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %jz.2
  %.pre = load float* %arrayidx317.phi.trans.insert, align 4, !tbaa !435
  br label %for.body314

for.cond274.preheader:                            ; preds = %for.end254, %for.end254
  br i1 %cmp220623, label %for.body277.preheader, label %for.end282

for.body277.preheader:                            ; preds = %for.cond274.preheader
  br label %for.body277

for.cond256.preheader:                            ; preds = %for.end254
  br i1 %cmp220623, label %for.body259.preheader, label %for.end264

for.body259.preheader:                            ; preds = %for.cond256.preheader
  br label %for.body259

for.body259:                                      ; preds = %for.body259, %for.body259.preheader
  %fw.4596 = phi float [ %add261, %for.body259 ], [ 0.000000e+00, %for.body259.preheader ]
  %i.8595 = phi i32 [ %dec263, %for.body259 ], [ %jz.2, %for.body259.preheader ]
  %arrayidx260 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %i.8595
  %27 = load float* %arrayidx260, align 4, !tbaa !435
  %add261 = fadd float %fw.4596, %27
  %dec263 = add nsw i32 %i.8595, -1
  %cmp257 = icmp sgt i32 %i.8595, 0
  br i1 %cmp257, label %for.body259, label %for.end264.loopexit

for.end264.loopexit:                              ; preds = %for.body259
  %add261.lcssa = phi float [ %add261, %for.body259 ]
  br label %for.end264

for.end264:                                       ; preds = %for.end264.loopexit, %for.cond256.preheader
  %fw.4.lcssa = phi float [ 0.000000e+00, %for.cond256.preheader ], [ %add261.lcssa, %for.end264.loopexit ]
  %cmp265 = icmp eq i32 %ih.0580684, 0
  br i1 %cmp265, label %cond.end270, label %cond.false268

cond.false268:                                    ; preds = %for.end264
  %sub269 = fsub float -0.000000e+00, %fw.4.lcssa
  br label %cond.end270

cond.end270:                                      ; preds = %cond.false268, %for.end264
  %cond271 = phi float [ %sub269, %cond.false268 ], [ %fw.4.lcssa, %for.end264 ]
  store float %cond271, float* %y, align 4, !tbaa !435
  br label %sw.epilog374

for.body277:                                      ; preds = %for.body277, %for.body277.preheader
  %fw.5603 = phi float [ %add279, %for.body277 ], [ 0.000000e+00, %for.body277.preheader ]
  %i.9602 = phi i32 [ %dec281, %for.body277 ], [ %jz.2, %for.body277.preheader ]
  %arrayidx278 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %i.9602
  %28 = load float* %arrayidx278, align 4, !tbaa !435
  %add279 = fadd float %fw.5603, %28
  %dec281 = add nsw i32 %i.9602, -1
  %cmp275 = icmp sgt i32 %i.9602, 0
  br i1 %cmp275, label %for.body277, label %for.end282.loopexit

for.end282.loopexit:                              ; preds = %for.body277
  %add279.lcssa = phi float [ %add279, %for.body277 ]
  br label %for.end282

for.end282:                                       ; preds = %for.end282.loopexit, %for.cond274.preheader
  %fw.5.lcssa = phi float [ 0.000000e+00, %for.cond274.preheader ], [ %add279.lcssa, %for.end282.loopexit ]
  %cmp283 = icmp eq i32 %ih.0580684, 0
  br i1 %cmp283, label %cond.end288, label %cond.false286

cond.false286:                                    ; preds = %for.end282
  %sub287 = fsub float -0.000000e+00, %fw.5.lcssa
  br label %cond.end288

cond.end288:                                      ; preds = %cond.false286, %for.end282
  %cond289 = phi float [ %sub287, %cond.false286 ], [ %fw.5.lcssa, %for.end282 ]
  store float %cond289, float* %y, align 4, !tbaa !435
  %arrayidx291 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 0
  %29 = load float* %arrayidx291, align 4, !tbaa !435
  %sub292 = fsub float %29, %fw.5.lcssa
  %cmp294597 = icmp slt i32 %jz.2, 1
  br i1 %cmp294597, label %for.end301, label %for.body296.preheader

for.body296.preheader:                            ; preds = %cond.end288
  br label %for.body296

for.body296:                                      ; preds = %for.body296, %for.body296.preheader
  %fw.6599 = phi float [ %add298, %for.body296 ], [ %sub292, %for.body296.preheader ]
  %i.10598 = phi i32 [ %inc300, %for.body296 ], [ 1, %for.body296.preheader ]
  %arrayidx297 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %i.10598
  %30 = load float* %arrayidx297, align 4, !tbaa !435
  %add298 = fadd float %fw.6599, %30
  %inc300 = add nsw i32 %i.10598, 1
  %exitcond = icmp eq i32 %i.10598, %jz.2
  br i1 %exitcond, label %for.end301.loopexit, label %for.body296

for.end301.loopexit:                              ; preds = %for.body296
  %add298.lcssa = phi float [ %add298, %for.body296 ]
  br label %for.end301

for.end301:                                       ; preds = %for.end301.loopexit, %cond.end288
  %fw.6.lcssa = phi float [ %sub292, %cond.end288 ], [ %add298.lcssa, %for.end301.loopexit ]
  br i1 %cmp283, label %cond.end307, label %cond.false305

cond.false305:                                    ; preds = %for.end301
  %sub306 = fsub float -0.000000e+00, %fw.6.lcssa
  br label %cond.end307

cond.end307:                                      ; preds = %cond.false305, %for.end301
  %cond308 = phi float [ %sub306, %cond.false305 ], [ %fw.6.lcssa, %for.end301 ]
  %arrayidx309 = getelementptr inbounds float* %y, i32 1
  store float %cond308, float* %arrayidx309, align 4, !tbaa !435
  br label %sw.epilog374

for.cond329.preheader:                            ; preds = %for.body314
  %cmp330609 = icmp sgt i32 %jz.2, 1
  br i1 %cmp330609, label %for.body332.lr.ph, label %for.end355

for.body332.lr.ph:                                ; preds = %for.cond329.preheader
  %arrayidx335.phi.trans.insert = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %jz.2
  %.pre673 = load float* %arrayidx335.phi.trans.insert, align 4, !tbaa !435
  br label %for.body332

for.body314:                                      ; preds = %for.body314, %for.body314.lr.ph
  %31 = phi float [ %.pre, %for.body314.lr.ph ], [ %add318, %for.body314 ]
  %i.11612 = phi i32 [ %jz.2, %for.body314.lr.ph ], [ %sub315, %for.body314 ]
  %sub315 = add nsw i32 %i.11612, -1
  %arrayidx316 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %sub315
  %32 = load float* %arrayidx316, align 4, !tbaa !435
  %arrayidx317 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %i.11612
  %add318 = fadd float %32, %31
  %sub321 = fsub float %32, %add318
  %add323 = fadd float %31, %sub321
  store float %add323, float* %arrayidx317, align 4, !tbaa !435
  store float %add318, float* %arrayidx316, align 4, !tbaa !435
  %cmp312 = icmp sgt i32 %sub315, 0
  br i1 %cmp312, label %for.body314, label %for.cond329.preheader

for.cond347.preheader:                            ; preds = %for.body332
  br i1 %cmp330609, label %for.body350.preheader, label %for.end355

for.body350.preheader:                            ; preds = %for.cond347.preheader
  br label %for.body350

for.body332:                                      ; preds = %for.body332, %for.body332.lr.ph
  %33 = phi float [ %.pre673, %for.body332.lr.ph ], [ %add336, %for.body332 ]
  %i.12610 = phi i32 [ %jz.2, %for.body332.lr.ph ], [ %sub333, %for.body332 ]
  %sub333 = add nsw i32 %i.12610, -1
  %arrayidx334 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %sub333
  %34 = load float* %arrayidx334, align 4, !tbaa !435
  %arrayidx335 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %i.12610
  %add336 = fadd float %34, %33
  %sub339 = fsub float %34, %add336
  %add341 = fadd float %33, %sub339
  store float %add341, float* %arrayidx335, align 4, !tbaa !435
  store float %add336, float* %arrayidx334, align 4, !tbaa !435
  %cmp330 = icmp sgt i32 %sub333, 1
  br i1 %cmp330, label %for.body332, label %for.cond347.preheader

for.body350:                                      ; preds = %for.body350, %for.body350.preheader
  %fw.7607 = phi float [ %add352, %for.body350 ], [ 0.000000e+00, %for.body350.preheader ]
  %i.13606 = phi i32 [ %dec354, %for.body350 ], [ %jz.2, %for.body350.preheader ]
  %arrayidx351 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %i.13606
  %35 = load float* %arrayidx351, align 4, !tbaa !435
  %add352 = fadd float %fw.7607, %35
  %dec354 = add nsw i32 %i.13606, -1
  %cmp348 = icmp sgt i32 %dec354, 1
  br i1 %cmp348, label %for.body350, label %for.end355.loopexit

for.end355.loopexit:                              ; preds = %for.body350
  %add352.lcssa = phi float [ %add352, %for.body350 ]
  br label %for.end355

for.end355:                                       ; preds = %for.end355.loopexit, %for.cond347.preheader, %for.cond329.preheader, %for.cond311.preheader
  %fw.7.lcssa = phi float [ 0.000000e+00, %for.cond347.preheader ], [ 0.000000e+00, %for.cond329.preheader ], [ 0.000000e+00, %for.cond311.preheader ], [ %add352.lcssa, %for.end355.loopexit ]
  %cmp356 = icmp eq i32 %ih.0580684, 0
  %arrayidx359 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 0
  %36 = load float* %arrayidx359, align 4, !tbaa !435
  br i1 %cmp356, label %if.then358, label %if.else364

if.then358:                                       ; preds = %for.end355
  store float %36, float* %y, align 4, !tbaa !435
  %arrayidx361 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 1
  %37 = load float* %arrayidx361, align 4, !tbaa !435
  %arrayidx362 = getelementptr inbounds float* %y, i32 1
  store float %37, float* %arrayidx362, align 4, !tbaa !435
  %arrayidx363 = getelementptr inbounds float* %y, i32 2
  store float %fw.7.lcssa, float* %arrayidx363, align 4, !tbaa !435
  br label %sw.epilog374

if.else364:                                       ; preds = %for.end355
  %sub366 = fsub float -0.000000e+00, %36
  store float %sub366, float* %y, align 4, !tbaa !435
  %arrayidx368 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 1
  %38 = load float* %arrayidx368, align 4, !tbaa !435
  %sub369 = fsub float -0.000000e+00, %38
  %arrayidx370 = getelementptr inbounds float* %y, i32 1
  store float %sub369, float* %arrayidx370, align 4, !tbaa !435
  %sub371 = fsub float -0.000000e+00, %fw.7.lcssa
  %arrayidx372 = getelementptr inbounds float* %y, i32 2
  store float %sub371, float* %arrayidx372, align 4, !tbaa !435
  br label %sw.epilog374

sw.epilog374:                                     ; preds = %if.else364, %if.then358, %cond.end307, %cond.end270, %for.end254
  %and375 = and i32 %n.1686, 7
  call void @llvm.lifetime.end(i64 80, i8* %3) #4
  call void @llvm.lifetime.end(i64 80, i8* %2) #4
  call void @llvm.lifetime.end(i64 80, i8* %1) #4
  call void @llvm.lifetime.end(i64 80, i8* %0) #4
  ret i32 %and375
}

declare void @__legup_label(i8*)

; Function Attrs: nounwind readnone
define float @__kernel_sinf(float %x, float %y, i32 %iy) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2113929216
  %cmp = icmp ult i32 %and, 838860800
  %conv = fptosi float %x to i32
  %cmp1 = icmp eq i32 %conv, 0
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %return, label %if.end4

if.end4:                                          ; preds = %entry
  %mul = fmul float %x, %x
  %mul5 = fmul float %mul, %x
  %mul6 = fmul float %mul, 0x3DE5D93A60000000
  %add = fadd float %mul6, 0xBE5AE5E680000000
  %mul7 = fmul float %mul, %add
  %add8 = fadd float %mul7, 0x3EC71DE360000000
  %mul9 = fmul float %mul, %add8
  %add10 = fadd float %mul9, 0xBF2A01A020000000
  %mul11 = fmul float %mul, %add10
  %add12 = fadd float %mul11, 0x3F81111120000000
  %cmp13 = icmp eq i32 %iy, 0
  br i1 %cmp13, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.end4
  %mul16 = fmul float %mul, %add12
  %add17 = fadd float %mul16, 0xBFC5555560000000
  %mul18 = fmul float %mul5, %add17
  %add19 = fadd float %mul18, %x
  br label %return

if.else:                                          ; preds = %if.end4
  %mul20 = fmul float %y, 5.000000e-01
  %mul21 = fmul float %mul5, %add12
  %sub = fsub float %mul20, %mul21
  %mul22 = fmul float %mul, %sub
  %sub23 = fsub float %mul22, %y
  %mul24 = fmul float %mul5, 0xBFC5555560000000
  %sub25 = fsub float %sub23, %mul24
  %sub26 = fsub float %x, %sub25
  br label %return

return:                                           ; preds = %if.else, %if.then15, %entry
  %retval.0 = phi float [ %add19, %if.then15 ], [ %sub26, %if.else ], [ %x, %entry ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @__kernel_tanf(float %x, float %y, i32 %iy) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 830472192
  %conv = fptosi float %x to i32
  %cmp1 = icmp eq i32 %conv, 0
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %if.then3, label %if.end10

if.then3:                                         ; preds = %entry
  %add = add nsw i32 %iy, 1
  %or = or i32 %add, %and
  %cmp4 = icmp eq i32 %or, 0
  br i1 %cmp4, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then3
  %call = tail call float @fabsf(float %x) #8
  %div = fdiv float 1.000000e+00, %call
  br label %return

if.else:                                          ; preds = %if.then3
  %cmp7 = icmp eq i32 %iy, 1
  br i1 %cmp7, label %return, label %cond.false

cond.false:                                       ; preds = %if.else
  %div9 = fdiv float -1.000000e+00, %x
  br label %return

if.end10:                                         ; preds = %entry
  %cmp11 = icmp ugt i32 %and, 1059889471
  br i1 %cmp11, label %if.then13, label %if.end22

if.then13:                                        ; preds = %if.end10
  %cmp14 = icmp slt i32 %0, 0
  br i1 %cmp14, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.then13
  %sub = fsub float -0.000000e+00, %x
  %sub17 = fsub float -0.000000e+00, %y
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.then13
  %y.addr.0 = phi float [ %sub17, %if.then16 ], [ %y, %if.then13 ]
  %x.addr.0 = phi float [ %sub, %if.then16 ], [ %x, %if.then13 ]
  %sub19 = fsub float 0x3FE921FB40000000, %x.addr.0
  %sub20 = fsub float 0x3E64442D00000000, %y.addr.0
  %add21 = fadd float %sub20, %sub19
  br label %if.end22

if.end22:                                         ; preds = %if.end18, %if.end10
  %y.addr.1 = phi float [ 0.000000e+00, %if.end18 ], [ %y, %if.end10 ]
  %x.addr.1 = phi float [ %add21, %if.end18 ], [ %x, %if.end10 ]
  %mul = fmul float %x.addr.1, %x.addr.1
  %mul23 = fmul float %mul, %mul
  %mul24 = fmul float %mul23, 0xBEF375CBE0000000
  %add25 = fadd float %mul24, 0x3F147E88A0000000
  %mul26 = fmul float %mul23, %add25
  %add27 = fadd float %mul26, 0x3F4344D900000000
  %mul28 = fmul float %mul23, %add27
  %add29 = fadd float %mul28, 0x3F6D6D22C0000000
  %mul30 = fmul float %mul23, %add29
  %add31 = fadd float %mul30, 0x3F9664F480000000
  %mul32 = fmul float %mul23, %add31
  %add33 = fadd float %mul32, 0x3FC1111120000000
  %mul34 = fmul float %mul23, 0x3EFB2A7080000000
  %add35 = fadd float %mul34, 0x3F12B80F40000000
  %mul36 = fmul float %mul23, %add35
  %add37 = fadd float %mul36, 0x3F3026F720000000
  %mul38 = fmul float %mul23, %add37
  %add39 = fadd float %mul38, 0x3F57DBC900000000
  %mul40 = fmul float %mul23, %add39
  %add41 = fadd float %mul40, 0x3F8226E3E0000000
  %mul42 = fmul float %mul23, %add41
  %add43 = fadd float %mul42, 0x3FABA1BA20000000
  %mul44 = fmul float %mul, %add43
  %mul45 = fmul float %x.addr.1, %mul
  %add46 = fadd float %add33, %mul44
  %mul47 = fmul float %mul45, %add46
  %add48 = fadd float %y.addr.1, %mul47
  %mul49 = fmul float %mul, %add48
  %add50 = fadd float %y.addr.1, %mul49
  %mul51 = fmul float %mul45, 0x3FD5555560000000
  %add52 = fadd float %mul51, %add50
  %add53 = fadd float %x.addr.1, %add52
  br i1 %cmp11, label %if.then56, label %if.end69

if.then56:                                        ; preds = %if.end22
  %conv57 = sitofp i32 %iy to float
  %shr161 = lshr i32 %0, 30
  %and58 = and i32 %shr161, 2
  %sub59 = sub nsw i32 1, %and58
  %conv60 = sitofp i32 %sub59 to float
  %mul61 = fmul float %add53, %add53
  %add62 = fadd float %conv57, %add53
  %div63 = fdiv float %mul61, %add62
  %sub64 = fsub float %div63, %add52
  %sub65 = fsub float %x.addr.1, %sub64
  %mul66 = fmul float %sub65, 2.000000e+00
  %sub67 = fsub float %conv57, %mul66
  %mul68 = fmul float %conv60, %sub67
  br label %return

if.end69:                                         ; preds = %if.end22
  %cmp70 = icmp eq i32 %iy, 1
  br i1 %cmp70, label %return, label %if.else73

if.else73:                                        ; preds = %if.end69
  %1 = bitcast float %add53 to i32
  %and80 = and i32 %1, -4096
  %2 = bitcast i32 %and80 to float
  %sub84 = fsub float %2, %x.addr.1
  %sub85 = fsub float %add52, %sub84
  %div86 = fdiv float -1.000000e+00, %add53
  %3 = bitcast float %div86 to i32
  %and94 = and i32 %3, -4096
  %4 = bitcast i32 %and94 to float
  %mul98 = fmul float %2, %4
  %add99 = fadd float %mul98, 1.000000e+00
  %mul100 = fmul float %sub85, %4
  %add101 = fadd float %mul100, %add99
  %mul102 = fmul float %div86, %add101
  %add103 = fadd float %4, %mul102
  br label %return

return:                                           ; preds = %if.else73, %if.end69, %if.then56, %cond.false, %if.else, %if.then6
  %retval.0 = phi float [ %div, %if.then6 ], [ %mul68, %if.then56 ], [ %add103, %if.else73 ], [ %div9, %cond.false ], [ %x, %if.else ], [ %add53, %if.end69 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define i32 @__kernel_rem_pio2(double* nocapture readonly %x, double* nocapture %y, i32 %e0, i32 %nx, i32 %prec, i32* nocapture readonly %ipio2) #2 {
entry:
  %iq = alloca [20 x i32], align 4
  %f = alloca [20 x double], align 8
  %fq = alloca [20 x double], align 8
  %q = alloca [20 x double], align 8
  %0 = bitcast [20 x i32]* %iq to i8*
  call void @llvm.lifetime.start(i64 80, i8* %0) #4
  %1 = bitcast [20 x double]* %f to i8*
  call void @llvm.lifetime.start(i64 160, i8* %1) #4
  %2 = bitcast [20 x double]* %fq to i8*
  call void @llvm.lifetime.start(i64 160, i8* %2) #4
  %3 = bitcast [20 x double]* %q to i8*
  call void @llvm.lifetime.start(i64 160, i8* %3) #4
  %arrayidx = getelementptr inbounds [4 x i32]* @init_jk53, i32 0, i32 %prec
  %4 = load i32* %arrayidx, align 4, !tbaa !433
  %sub = add nsw i32 %nx, -1
  %sub1 = add nsw i32 %e0, -3
  %div = sdiv i32 %sub1, 24
  %cmp = icmp slt i32 %div, 0
  %.div = select i1 %cmp, i32 0, i32 %div
  %5 = mul i32 %.div, 24
  %mul = add i32 %5, 24
  %sub2 = sub nsw i32 %e0, %mul
  %add4 = add nsw i32 %4, %sub
  %cmp5655 = icmp slt i32 %add4, 0
  br i1 %cmp5655, label %for.cond14.preheader.lr.ph, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %sub3 = sub nsw i32 %.div, %sub
  %6 = add i32 %4, %nx
  br label %for.body

for.cond14.preheader.lr.ph.loopexit:              ; preds = %cond.end
  br label %for.cond14.preheader.lr.ph

for.cond14.preheader.lr.ph:                       ; preds = %for.cond14.preheader.lr.ph.loopexit, %entry
  %cmp15649 = icmp slt i32 %nx, 1
  br label %for.cond14.preheader

for.body:                                         ; preds = %cond.end, %for.body.lr.ph
  %j.0657 = phi i32 [ %sub3, %for.body.lr.ph ], [ %inc9, %cond.end ]
  %i.0656 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %cond.end ]
  %cmp6 = icmp slt i32 %j.0657, 0
  br i1 %cmp6, label %cond.end, label %cond.false

cond.false:                                       ; preds = %for.body
  %arrayidx7 = getelementptr inbounds i32* %ipio2, i32 %j.0657
  %7 = load i32* %arrayidx7, align 4, !tbaa !433
  %conv = sitofp i32 %7 to double
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %for.body
  %cond = phi double [ %conv, %cond.false ], [ 0.000000e+00, %for.body ]
  %arrayidx8 = getelementptr inbounds [20 x double]* %f, i32 0, i32 %i.0656
  store double %cond, double* %arrayidx8, align 8, !tbaa !429
  %inc = add nsw i32 %i.0656, 1
  %inc9 = add nsw i32 %j.0657, 1
  %exitcond672 = icmp eq i32 %inc, %6
  br i1 %exitcond672, label %for.cond14.preheader.lr.ph.loopexit, label %for.body

for.cond14.preheader:                             ; preds = %for.end26, %for.cond14.preheader.lr.ph
  %i.1654 = phi i32 [ 0, %for.cond14.preheader.lr.ph ], [ %inc29, %for.end26 ]
  br i1 %cmp15649, label %for.end26, label %for.body17.lr.ph

for.body17.lr.ph:                                 ; preds = %for.cond14.preheader
  %add19 = add nsw i32 %i.1654, %sub
  br label %for.body17

recompute.preheader:                              ; preds = %for.end26
  %cmp56 = icmp sgt i32 %sub2, 0
  %sub61 = sub nsw i32 24, %sub2
  %sub69 = sub nsw i32 23, %sub2
  %cmp167640 = icmp slt i32 %nx, 1
  %cmp71 = icmp eq i32 %mul, %e0
  br label %recompute

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph
  %fw.0651 = phi double [ 0.000000e+00, %for.body17.lr.ph ], [ %add23, %for.body17 ]
  %j.1650 = phi i32 [ 0, %for.body17.lr.ph ], [ %inc25, %for.body17 ]
  %arrayidx18 = getelementptr inbounds double* %x, i32 %j.1650
  %8 = load double* %arrayidx18, align 4, !tbaa !429
  %sub20 = sub i32 %add19, %j.1650
  %arrayidx21 = getelementptr inbounds [20 x double]* %f, i32 0, i32 %sub20
  %9 = load double* %arrayidx21, align 8, !tbaa !429
  %mul22 = fmul double %8, %9
  %add23 = fadd double %fw.0651, %mul22
  %inc25 = add nsw i32 %j.1650, 1
  %cmp15 = icmp slt i32 %j.1650, %sub
  br i1 %cmp15, label %for.body17, label %for.end26.loopexit

for.end26.loopexit:                               ; preds = %for.body17
  %add23.lcssa = phi double [ %add23, %for.body17 ]
  br label %for.end26

for.end26:                                        ; preds = %for.end26.loopexit, %for.cond14.preheader
  %fw.0.lcssa = phi double [ 0.000000e+00, %for.cond14.preheader ], [ %add23.lcssa, %for.end26.loopexit ]
  %arrayidx27 = getelementptr inbounds [20 x double]* %q, i32 0, i32 %i.1654
  store double %fw.0.lcssa, double* %arrayidx27, align 8, !tbaa !429
  %inc29 = add nsw i32 %i.1654, 1
  %cmp11 = icmp slt i32 %i.1654, %4
  br i1 %cmp11, label %for.cond14.preheader, label %recompute.preheader

recompute.loopexit:                               ; preds = %for.end178
  br label %recompute.backedge

recompute:                                        ; preds = %recompute.backedge, %recompute.preheader
  %jz.0 = phi i32 [ %4, %recompute.preheader ], [ %add157, %recompute.backedge ]
  %arrayidx31 = getelementptr inbounds [20 x double]* %q, i32 0, i32 %jz.0
  %10 = load double* %arrayidx31, align 8, !tbaa !429
  %cmp33626 = icmp sgt i32 %jz.0, 0
  br i1 %cmp33626, label %for.body35.preheader, label %for.end48

for.body35.preheader:                             ; preds = %recompute
  br label %for.body35

for.body35:                                       ; preds = %for.body35, %for.body35.preheader
  %z.0629 = phi double [ %add45, %for.body35 ], [ %10, %for.body35.preheader ]
  %j.2628 = phi i32 [ %sub43, %for.body35 ], [ %jz.0, %for.body35.preheader ]
  %i.2627 = phi i32 [ %inc47, %for.body35 ], [ 0, %for.body35.preheader ]
  tail call void @__legup_label(i8* getelementptr inbounds ([10 x i8]* @.str54, i32 0, i32 0)) #4
  %mul36 = fmul double %z.0629, 0x3E70000000000000
  %conv37 = fptosi double %mul36 to i32
  %conv38 = sitofp i32 %conv37 to double
  %mul39 = fmul double %conv38, 0x4170000000000000
  %sub40 = fsub double %z.0629, %mul39
  %conv41 = fptosi double %sub40 to i32
  %arrayidx42 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %i.2627
  store i32 %conv41, i32* %arrayidx42, align 4, !tbaa !433
  %sub43 = add nsw i32 %j.2628, -1
  %arrayidx44 = getelementptr inbounds [20 x double]* %q, i32 0, i32 %sub43
  %11 = load double* %arrayidx44, align 8, !tbaa !429
  %add45 = fadd double %conv38, %11
  %inc47 = add nsw i32 %i.2627, 1
  %exitcond670 = icmp eq i32 %inc47, %jz.0
  br i1 %exitcond670, label %for.end48.loopexit, label %for.body35

for.end48.loopexit:                               ; preds = %for.body35
  %add45.lcssa = phi double [ %add45, %for.body35 ]
  br label %for.end48

for.end48:                                        ; preds = %for.end48.loopexit, %recompute
  %z.0.lcssa = phi double [ %10, %recompute ], [ %add45.lcssa, %for.end48.loopexit ]
  %call = tail call double @scalbn(double %z.0.lcssa, i32 %sub2) #8
  %mul49 = fmul double %call, 1.250000e-01
  %call50 = tail call double @floor(double %mul49) #8
  %mul51 = fmul double %call50, 8.000000e+00
  %sub52 = fsub double %call, %mul51
  %conv53 = fptosi double %sub52 to i32
  %conv54 = sitofp i32 %conv53 to double
  %sub55 = fsub double %sub52, %conv54
  br i1 %cmp56, label %if.then58, label %if.else

if.then58:                                        ; preds = %for.end48
  %sub59 = add nsw i32 %jz.0, -1
  %arrayidx60 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub59
  %12 = load i32* %arrayidx60, align 4, !tbaa !433
  %shr = ashr i32 %12, %sub61
  %add62 = add nsw i32 %shr, %conv53
  %shl = shl i32 %shr, %sub61
  %sub66 = sub nsw i32 %12, %shl
  store i32 %sub66, i32* %arrayidx60, align 4, !tbaa !433
  %shr70 = ashr i32 %sub66, %sub69
  br label %if.end83

if.else:                                          ; preds = %for.end48
  br i1 %cmp71, label %if.then73, label %if.else77

if.then73:                                        ; preds = %if.else
  %sub74 = add nsw i32 %jz.0, -1
  %arrayidx75 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub74
  %13 = load i32* %arrayidx75, align 4, !tbaa !433
  %shr76 = ashr i32 %13, 23
  br label %if.end83

if.else77:                                        ; preds = %if.else
  %cmp78 = fcmp ult double %sub55, 5.000000e-01
  br i1 %cmp78, label %if.end130, label %if.then86

if.end83:                                         ; preds = %if.then73, %if.then58
  %n.0 = phi i32 [ %add62, %if.then58 ], [ %conv53, %if.then73 ]
  %ih.0 = phi i32 [ %shr70, %if.then58 ], [ %shr76, %if.then73 ]
  %cmp84 = icmp sgt i32 %ih.0, 0
  br i1 %cmp84, label %if.then86, label %if.end130

if.then86:                                        ; preds = %if.end83, %if.else77
  %ih.0579 = phi i32 [ %ih.0, %if.end83 ], [ 2, %if.else77 ]
  %n.0578 = phi i32 [ %n.0, %if.end83 ], [ %conv53, %if.else77 ]
  %add87 = add nsw i32 %n.0578, 1
  br i1 %cmp33626, label %for.body91.preheader, label %for.end108

for.body91.preheader:                             ; preds = %if.then86
  br label %for.body91

for.body91:                                       ; preds = %for.inc106, %for.body91.preheader
  %i.3633 = phi i32 [ %inc107, %for.inc106 ], [ 0, %for.body91.preheader ]
  %carry.0632 = phi i32 [ %carry.1, %for.inc106 ], [ 0, %for.body91.preheader ]
  %arrayidx92 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %i.3633
  %14 = load i32* %arrayidx92, align 4, !tbaa !433
  %cmp93 = icmp eq i32 %carry.0632, 0
  br i1 %cmp93, label %if.then95, label %if.else102

if.then95:                                        ; preds = %for.body91
  %cmp96 = icmp eq i32 %14, 0
  br i1 %cmp96, label %for.inc106, label %if.then98

if.then98:                                        ; preds = %if.then95
  %sub99 = sub nsw i32 16777216, %14
  store i32 %sub99, i32* %arrayidx92, align 4, !tbaa !433
  br label %for.inc106

if.else102:                                       ; preds = %for.body91
  %sub103 = sub nsw i32 16777215, %14
  store i32 %sub103, i32* %arrayidx92, align 4, !tbaa !433
  br label %for.inc106

for.inc106:                                       ; preds = %if.else102, %if.then98, %if.then95
  %carry.1 = phi i32 [ 1, %if.then98 ], [ 0, %if.then95 ], [ %carry.0632, %if.else102 ]
  %inc107 = add nsw i32 %i.3633, 1
  %exitcond671 = icmp eq i32 %inc107, %jz.0
  br i1 %exitcond671, label %for.end108.loopexit, label %for.body91

for.end108.loopexit:                              ; preds = %for.inc106
  %carry.1.lcssa = phi i32 [ %carry.1, %for.inc106 ]
  br label %for.end108

for.end108:                                       ; preds = %for.end108.loopexit, %if.then86
  %carry.0.lcssa = phi i32 [ 0, %if.then86 ], [ %carry.1.lcssa, %for.end108.loopexit ]
  br i1 %cmp56, label %if.then111, label %if.end118

if.then111:                                       ; preds = %for.end108
  switch i32 %sub2, label %if.end118 [
    i32 1, label %sw.bb
    i32 2, label %sw.bb114
  ]

sw.bb:                                            ; preds = %if.then111
  %sub112 = add nsw i32 %jz.0, -1
  %arrayidx113 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub112
  %15 = load i32* %arrayidx113, align 4, !tbaa !433
  %and = and i32 %15, 8388607
  store i32 %and, i32* %arrayidx113, align 4, !tbaa !433
  br label %if.end118

sw.bb114:                                         ; preds = %if.then111
  %sub115 = add nsw i32 %jz.0, -1
  %arrayidx116 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub115
  %16 = load i32* %arrayidx116, align 4, !tbaa !433
  %and117 = and i32 %16, 4194303
  store i32 %and117, i32* %arrayidx116, align 4, !tbaa !433
  br label %if.end118

if.end118:                                        ; preds = %sw.bb114, %sw.bb, %if.then111, %for.end108
  %cmp119 = icmp eq i32 %ih.0579, 2
  br i1 %cmp119, label %if.then121, label %if.end130

if.then121:                                       ; preds = %if.end118
  %sub122 = fsub double 1.000000e+00, %sub55
  %cmp123 = icmp eq i32 %carry.0.lcssa, 0
  br i1 %cmp123, label %if.end130, label %if.then125

if.then125:                                       ; preds = %if.then121
  %call126 = tail call double @scalbn(double 1.000000e+00, i32 %sub2) #8
  %sub127 = fsub double %sub122, %call126
  br label %if.end130

if.end130:                                        ; preds = %if.then125, %if.then121, %if.end118, %if.end83, %if.else77
  %ih.0580 = phi i32 [ 2, %if.then125 ], [ 2, %if.then121 ], [ %ih.0579, %if.end118 ], [ %ih.0, %if.end83 ], [ 0, %if.else77 ]
  %n.1 = phi i32 [ %add87, %if.then125 ], [ %add87, %if.then121 ], [ %add87, %if.end118 ], [ %n.0, %if.end83 ], [ %conv53, %if.else77 ]
  %z.1 = phi double [ %sub127, %if.then125 ], [ %sub122, %if.then121 ], [ %sub55, %if.end118 ], [ %sub55, %if.end83 ], [ %sub55, %if.else77 ]
  %cmp131 = fcmp oeq double %z.1, 0.000000e+00
  br i1 %cmp131, label %for.cond135.preheader, label %if.else196

for.cond135.preheader:                            ; preds = %if.end130
  %cmp136636 = icmp sgt i32 %jz.0, %4
  br i1 %cmp136636, label %for.body138.preheader, label %for.cond146.preheader

for.body138.preheader:                            ; preds = %for.cond135.preheader
  br label %for.body138

for.cond146.preheader:                            ; preds = %for.end142, %for.cond135.preheader
  br label %for.cond146

for.body138:                                      ; preds = %for.body138, %for.body138.preheader
  %i.4638.in = phi i32 [ %i.4638, %for.body138 ], [ %jz.0, %for.body138.preheader ]
  %j.3637 = phi i32 [ %or, %for.body138 ], [ 0, %for.body138.preheader ]
  %i.4638 = add nsw i32 %i.4638.in, -1
  %arrayidx139 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %i.4638
  %17 = load i32* %arrayidx139, align 4, !tbaa !433
  %or = or i32 %17, %j.3637
  %cmp136 = icmp sgt i32 %i.4638, %4
  br i1 %cmp136, label %for.body138, label %for.end142

for.end142:                                       ; preds = %for.body138
  %or.lcssa = phi i32 [ %or, %for.body138 ]
  %phitmp = icmp eq i32 %or.lcssa, 0
  br i1 %phitmp, label %for.cond146.preheader, label %while.cond.preheader

while.cond.preheader:                             ; preds = %for.end142
  %n.1.lcssa685 = phi i32 [ %n.1, %for.end142 ]
  %ih.0580.lcssa683 = phi i32 [ %ih.0580, %for.end142 ]
  %jz.0.lcssa682 = phi i32 [ %jz.0, %for.end142 ]
  br label %while.cond

for.cond146:                                      ; preds = %for.cond146, %for.cond146.preheader
  %k.0 = phi i32 [ %inc153, %for.cond146 ], [ 1, %for.cond146.preheader ]
  %sub147 = sub nsw i32 %4, %k.0
  %arrayidx148 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub147
  %18 = load i32* %arrayidx148, align 4, !tbaa !433
  %cmp149 = icmp eq i32 %18, 0
  %inc153 = add nsw i32 %k.0, 1
  br i1 %cmp149, label %for.cond146, label %for.cond156.preheader

for.cond156.preheader:                            ; preds = %for.cond146
  %k.0.lcssa = phi i32 [ %k.0, %for.cond146 ]
  %add157 = add nsw i32 %k.0.lcssa, %jz.0
  %cmp158645 = icmp sgt i32 %k.0.lcssa, 0
  br i1 %cmp158645, label %for.body160.preheader, label %recompute.backedge

recompute.backedge:                               ; preds = %for.cond156.preheader, %recompute.loopexit
  br label %recompute

for.body160.preheader:                            ; preds = %for.cond156.preheader
  br label %for.body160

for.body160:                                      ; preds = %for.end178, %for.body160.preheader
  %i.5647.in = phi i32 [ %i.5647, %for.end178 ], [ %jz.0, %for.body160.preheader ]
  %i.5647 = add nsw i32 %i.5647.in, 1
  %add161 = add nsw i32 %i.5647, %.div
  %arrayidx162 = getelementptr inbounds i32* %ipio2, i32 %add161
  %19 = load i32* %arrayidx162, align 4, !tbaa !433
  %conv163 = sitofp i32 %19 to double
  %add164 = add i32 %i.5647.in, %nx
  %arrayidx165 = getelementptr inbounds [20 x double]* %f, i32 0, i32 %add164
  store double %conv163, double* %arrayidx165, align 8, !tbaa !429
  br i1 %cmp167640, label %for.end178, label %for.body169.preheader

for.body169.preheader:                            ; preds = %for.body160
  br label %for.body169

for.body169:                                      ; preds = %for.body169, %for.body169.preheader
  %fw.1642 = phi double [ %add175, %for.body169 ], [ 0.000000e+00, %for.body169.preheader ]
  %j.4641 = phi i32 [ %inc177, %for.body169 ], [ 0, %for.body169.preheader ]
  %arrayidx170 = getelementptr inbounds double* %x, i32 %j.4641
  %20 = load double* %arrayidx170, align 4, !tbaa !429
  %sub172 = sub nsw i32 %add164, %j.4641
  %arrayidx173 = getelementptr inbounds [20 x double]* %f, i32 0, i32 %sub172
  %21 = load double* %arrayidx173, align 8, !tbaa !429
  %mul174 = fmul double %20, %21
  %add175 = fadd double %fw.1642, %mul174
  %inc177 = add nsw i32 %j.4641, 1
  %cmp167 = icmp slt i32 %j.4641, %sub
  br i1 %cmp167, label %for.body169, label %for.end178.loopexit

for.end178.loopexit:                              ; preds = %for.body169
  %add175.lcssa = phi double [ %add175, %for.body169 ]
  br label %for.end178

for.end178:                                       ; preds = %for.end178.loopexit, %for.body160
  %fw.1.lcssa = phi double [ 0.000000e+00, %for.body160 ], [ %add175.lcssa, %for.end178.loopexit ]
  %arrayidx179 = getelementptr inbounds [20 x double]* %q, i32 0, i32 %i.5647
  store double %fw.1.lcssa, double* %arrayidx179, align 8, !tbaa !429
  %cmp158 = icmp slt i32 %i.5647, %add157
  br i1 %cmp158, label %for.body160, label %recompute.loopexit

while.cond:                                       ; preds = %while.cond, %while.cond.preheader
  %q0.0.in = phi i32 [ %q0.0, %while.cond ], [ %sub2, %while.cond.preheader ]
  %jz.1.in = phi i32 [ %jz.1, %while.cond ], [ %jz.0.lcssa682, %while.cond.preheader ]
  %q0.0 = add nsw i32 %q0.0.in, -24
  %jz.1 = add nsw i32 %jz.1.in, -1
  %arrayidx191 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %jz.1
  %22 = load i32* %arrayidx191, align 4, !tbaa !433
  %cmp192 = icmp eq i32 %22, 0
  br i1 %cmp192, label %while.cond, label %if.end217.loopexit

if.else196:                                       ; preds = %if.end130
  %z.1.lcssa = phi double [ %z.1, %if.end130 ]
  %n.1.lcssa = phi i32 [ %n.1, %if.end130 ]
  %ih.0580.lcssa = phi i32 [ %ih.0580, %if.end130 ]
  %jz.0.lcssa = phi i32 [ %jz.0, %if.end130 ]
  %sub197 = sub nsw i32 0, %sub2
  %call198 = tail call double @scalbn(double %z.1.lcssa, i32 %sub197) #8
  %cmp199 = fcmp ult double %call198, 0x4170000000000000
  br i1 %cmp199, label %if.else213, label %if.then201

if.then201:                                       ; preds = %if.else196
  %mul202 = fmul double %call198, 0x3E70000000000000
  %conv203 = fptosi double %mul202 to i32
  %conv204 = sitofp i32 %conv203 to double
  %mul205 = fmul double %conv204, 0x4170000000000000
  %sub206 = fsub double %call198, %mul205
  %conv207 = fptosi double %sub206 to i32
  %arrayidx208 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %jz.0.lcssa
  store i32 %conv207, i32* %arrayidx208, align 4, !tbaa !433
  %add209 = add nsw i32 %jz.0.lcssa, 1
  %add210 = add nsw i32 %sub2, 24
  %arrayidx212 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %add209
  store i32 %conv203, i32* %arrayidx212, align 4, !tbaa !433
  br label %if.end217

if.else213:                                       ; preds = %if.else196
  %conv214 = fptosi double %call198 to i32
  %arrayidx215 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %jz.0.lcssa
  store i32 %conv214, i32* %arrayidx215, align 4, !tbaa !433
  br label %if.end217

if.end217.loopexit:                               ; preds = %while.cond
  %jz.1.lcssa = phi i32 [ %jz.1, %while.cond ]
  %q0.0.lcssa = phi i32 [ %q0.0, %while.cond ]
  br label %if.end217

if.end217:                                        ; preds = %if.end217.loopexit, %if.else213, %if.then201
  %n.1686 = phi i32 [ %n.1.lcssa, %if.then201 ], [ %n.1.lcssa, %if.else213 ], [ %n.1.lcssa685, %if.end217.loopexit ]
  %ih.0580684 = phi i32 [ %ih.0580.lcssa, %if.then201 ], [ %ih.0580.lcssa, %if.else213 ], [ %ih.0580.lcssa683, %if.end217.loopexit ]
  %q0.1 = phi i32 [ %add210, %if.then201 ], [ %sub2, %if.else213 ], [ %q0.0.lcssa, %if.end217.loopexit ]
  %jz.2 = phi i32 [ %add209, %if.then201 ], [ %jz.0.lcssa, %if.else213 ], [ %jz.1.lcssa, %if.end217.loopexit ]
  %call218 = tail call double @scalbn(double 1.000000e+00, i32 %q0.1) #8
  %cmp220623 = icmp sgt i32 %jz.2, -1
  br i1 %cmp220623, label %for.body222.preheader, label %for.end254

for.body222.preheader:                            ; preds = %if.end217
  br label %for.body222

for.cond231.preheader:                            ; preds = %for.body222
  br i1 %cmp220623, label %for.cond235.preheader.lr.ph, label %for.end254

for.cond235.preheader.lr.ph:                      ; preds = %for.cond231.preheader
  %.op = xor i32 %4, -1
  br label %for.body241.lr.ph

for.body222:                                      ; preds = %for.body222, %for.body222.preheader
  %fw.2625 = phi double [ %mul227, %for.body222 ], [ %call218, %for.body222.preheader ]
  %i.6624 = phi i32 [ %dec229, %for.body222 ], [ %jz.2, %for.body222.preheader ]
  %arrayidx223 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %i.6624
  %23 = load i32* %arrayidx223, align 4, !tbaa !433
  %conv224 = sitofp i32 %23 to double
  %mul225 = fmul double %fw.2625, %conv224
  %arrayidx226 = getelementptr inbounds [20 x double]* %q, i32 0, i32 %i.6624
  store double %mul225, double* %arrayidx226, align 8, !tbaa !429
  %mul227 = fmul double %fw.2625, 0x3E70000000000000
  %dec229 = add nsw i32 %i.6624, -1
  %cmp220 = icmp sgt i32 %i.6624, 0
  br i1 %cmp220, label %for.body222, label %for.cond231.preheader

for.body241.lr.ph:                                ; preds = %for.end249, %for.cond235.preheader.lr.ph
  %indvars.iv = phi i32 [ -1, %for.cond235.preheader.lr.ph ], [ %indvars.iv.next, %for.end249 ]
  %i.7621 = phi i32 [ %jz.2, %for.cond235.preheader.lr.ph ], [ %dec253, %for.end249 ]
  %24 = icmp ugt i32 %indvars.iv, %.op
  %umax = select i1 %24, i32 %indvars.iv, i32 %.op
  %25 = sub i32 0, %umax
  %sub238 = sub nsw i32 %jz.2, %i.7621
  br label %for.body241

for.body241:                                      ; preds = %for.body241, %for.body241.lr.ph
  %fw.3617 = phi double [ 0.000000e+00, %for.body241.lr.ph ], [ %add246, %for.body241 ]
  %k.1616 = phi i32 [ 0, %for.body241.lr.ph ], [ %inc248, %for.body241 ]
  %arrayidx242 = getelementptr inbounds [8 x double]* @PIo255, i32 0, i32 %k.1616
  %26 = load double* %arrayidx242, align 8, !tbaa !429
  %add243 = add nsw i32 %k.1616, %i.7621
  %arrayidx244 = getelementptr inbounds [20 x double]* %q, i32 0, i32 %add243
  %27 = load double* %arrayidx244, align 8, !tbaa !429
  %mul245 = fmul double %26, %27
  %add246 = fadd double %fw.3617, %mul245
  %inc248 = add nsw i32 %k.1616, 1
  %exitcond669 = icmp eq i32 %inc248, %25
  br i1 %exitcond669, label %for.end249, label %for.body241

for.end249:                                       ; preds = %for.body241
  %add246.lcssa = phi double [ %add246, %for.body241 ]
  %arrayidx251 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %sub238
  store double %add246.lcssa, double* %arrayidx251, align 8, !tbaa !429
  %dec253 = add nsw i32 %i.7621, -1
  %cmp232 = icmp sgt i32 %i.7621, 0
  %indvars.iv.next = add i32 %indvars.iv, -1
  br i1 %cmp232, label %for.body241.lr.ph, label %for.end254.loopexit

for.end254.loopexit:                              ; preds = %for.end249
  br label %for.end254

for.end254:                                       ; preds = %for.end254.loopexit, %for.cond231.preheader, %if.end217
  switch i32 %prec, label %sw.epilog374 [
    i32 0, label %for.cond256.preheader
    i32 1, label %for.cond274.preheader
    i32 2, label %for.cond274.preheader
    i32 3, label %for.cond311.preheader
  ]

for.cond311.preheader:                            ; preds = %for.end254
  %cmp312611 = icmp sgt i32 %jz.2, 0
  br i1 %cmp312611, label %for.body314.lr.ph, label %for.end355

for.body314.lr.ph:                                ; preds = %for.cond311.preheader
  %arrayidx317.phi.trans.insert = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %jz.2
  %.pre = load double* %arrayidx317.phi.trans.insert, align 8, !tbaa !429
  br label %for.body314

for.cond274.preheader:                            ; preds = %for.end254, %for.end254
  br i1 %cmp220623, label %for.body277.preheader, label %for.end282

for.body277.preheader:                            ; preds = %for.cond274.preheader
  br label %for.body277

for.cond256.preheader:                            ; preds = %for.end254
  br i1 %cmp220623, label %for.body259.preheader, label %for.end264

for.body259.preheader:                            ; preds = %for.cond256.preheader
  br label %for.body259

for.body259:                                      ; preds = %for.body259, %for.body259.preheader
  %fw.4596 = phi double [ %add261, %for.body259 ], [ 0.000000e+00, %for.body259.preheader ]
  %i.8595 = phi i32 [ %dec263, %for.body259 ], [ %jz.2, %for.body259.preheader ]
  %arrayidx260 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %i.8595
  %28 = load double* %arrayidx260, align 8, !tbaa !429
  %add261 = fadd double %fw.4596, %28
  %dec263 = add nsw i32 %i.8595, -1
  %cmp257 = icmp sgt i32 %i.8595, 0
  br i1 %cmp257, label %for.body259, label %for.end264.loopexit

for.end264.loopexit:                              ; preds = %for.body259
  %add261.lcssa = phi double [ %add261, %for.body259 ]
  br label %for.end264

for.end264:                                       ; preds = %for.end264.loopexit, %for.cond256.preheader
  %fw.4.lcssa = phi double [ 0.000000e+00, %for.cond256.preheader ], [ %add261.lcssa, %for.end264.loopexit ]
  %cmp265 = icmp eq i32 %ih.0580684, 0
  br i1 %cmp265, label %cond.end270, label %cond.false268

cond.false268:                                    ; preds = %for.end264
  %sub269 = fsub double -0.000000e+00, %fw.4.lcssa
  br label %cond.end270

cond.end270:                                      ; preds = %cond.false268, %for.end264
  %cond271 = phi double [ %sub269, %cond.false268 ], [ %fw.4.lcssa, %for.end264 ]
  store double %cond271, double* %y, align 4, !tbaa !429
  br label %sw.epilog374

for.body277:                                      ; preds = %for.body277, %for.body277.preheader
  %fw.5603 = phi double [ %add279, %for.body277 ], [ 0.000000e+00, %for.body277.preheader ]
  %i.9602 = phi i32 [ %dec281, %for.body277 ], [ %jz.2, %for.body277.preheader ]
  %arrayidx278 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %i.9602
  %29 = load double* %arrayidx278, align 8, !tbaa !429
  %add279 = fadd double %fw.5603, %29
  %dec281 = add nsw i32 %i.9602, -1
  %cmp275 = icmp sgt i32 %i.9602, 0
  br i1 %cmp275, label %for.body277, label %for.end282.loopexit

for.end282.loopexit:                              ; preds = %for.body277
  %add279.lcssa = phi double [ %add279, %for.body277 ]
  br label %for.end282

for.end282:                                       ; preds = %for.end282.loopexit, %for.cond274.preheader
  %fw.5.lcssa = phi double [ 0.000000e+00, %for.cond274.preheader ], [ %add279.lcssa, %for.end282.loopexit ]
  %cmp283 = icmp eq i32 %ih.0580684, 0
  br i1 %cmp283, label %cond.end288, label %cond.false286

cond.false286:                                    ; preds = %for.end282
  %sub287 = fsub double -0.000000e+00, %fw.5.lcssa
  br label %cond.end288

cond.end288:                                      ; preds = %cond.false286, %for.end282
  %cond289 = phi double [ %sub287, %cond.false286 ], [ %fw.5.lcssa, %for.end282 ]
  store double %cond289, double* %y, align 4, !tbaa !429
  %arrayidx291 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 0
  %30 = load double* %arrayidx291, align 8, !tbaa !429
  %sub292 = fsub double %30, %fw.5.lcssa
  %cmp294597 = icmp slt i32 %jz.2, 1
  br i1 %cmp294597, label %for.end301, label %for.body296.preheader

for.body296.preheader:                            ; preds = %cond.end288
  br label %for.body296

for.body296:                                      ; preds = %for.body296, %for.body296.preheader
  %fw.6599 = phi double [ %add298, %for.body296 ], [ %sub292, %for.body296.preheader ]
  %i.10598 = phi i32 [ %inc300, %for.body296 ], [ 1, %for.body296.preheader ]
  %arrayidx297 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %i.10598
  %31 = load double* %arrayidx297, align 8, !tbaa !429
  %add298 = fadd double %fw.6599, %31
  %inc300 = add nsw i32 %i.10598, 1
  %exitcond = icmp eq i32 %i.10598, %jz.2
  br i1 %exitcond, label %for.end301.loopexit, label %for.body296

for.end301.loopexit:                              ; preds = %for.body296
  %add298.lcssa = phi double [ %add298, %for.body296 ]
  br label %for.end301

for.end301:                                       ; preds = %for.end301.loopexit, %cond.end288
  %fw.6.lcssa = phi double [ %sub292, %cond.end288 ], [ %add298.lcssa, %for.end301.loopexit ]
  br i1 %cmp283, label %cond.end307, label %cond.false305

cond.false305:                                    ; preds = %for.end301
  %sub306 = fsub double -0.000000e+00, %fw.6.lcssa
  br label %cond.end307

cond.end307:                                      ; preds = %cond.false305, %for.end301
  %cond308 = phi double [ %sub306, %cond.false305 ], [ %fw.6.lcssa, %for.end301 ]
  %arrayidx309 = getelementptr inbounds double* %y, i32 1
  store double %cond308, double* %arrayidx309, align 4, !tbaa !429
  br label %sw.epilog374

for.cond329.preheader:                            ; preds = %for.body314
  %cmp330609 = icmp sgt i32 %jz.2, 1
  br i1 %cmp330609, label %for.body332.lr.ph, label %for.end355

for.body332.lr.ph:                                ; preds = %for.cond329.preheader
  %arrayidx335.phi.trans.insert = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %jz.2
  %.pre673 = load double* %arrayidx335.phi.trans.insert, align 8, !tbaa !429
  br label %for.body332

for.body314:                                      ; preds = %for.body314, %for.body314.lr.ph
  %32 = phi double [ %.pre, %for.body314.lr.ph ], [ %add318, %for.body314 ]
  %i.11612 = phi i32 [ %jz.2, %for.body314.lr.ph ], [ %sub315, %for.body314 ]
  %sub315 = add nsw i32 %i.11612, -1
  %arrayidx316 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %sub315
  %33 = load double* %arrayidx316, align 8, !tbaa !429
  %arrayidx317 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %i.11612
  %add318 = fadd double %33, %32
  %sub321 = fsub double %33, %add318
  %add323 = fadd double %32, %sub321
  store double %add323, double* %arrayidx317, align 8, !tbaa !429
  store double %add318, double* %arrayidx316, align 8, !tbaa !429
  %cmp312 = icmp sgt i32 %sub315, 0
  br i1 %cmp312, label %for.body314, label %for.cond329.preheader

for.cond347.preheader:                            ; preds = %for.body332
  br i1 %cmp330609, label %for.body350.preheader, label %for.end355

for.body350.preheader:                            ; preds = %for.cond347.preheader
  br label %for.body350

for.body332:                                      ; preds = %for.body332, %for.body332.lr.ph
  %34 = phi double [ %.pre673, %for.body332.lr.ph ], [ %add336, %for.body332 ]
  %i.12610 = phi i32 [ %jz.2, %for.body332.lr.ph ], [ %sub333, %for.body332 ]
  %sub333 = add nsw i32 %i.12610, -1
  %arrayidx334 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %sub333
  %35 = load double* %arrayidx334, align 8, !tbaa !429
  %arrayidx335 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %i.12610
  %add336 = fadd double %35, %34
  %sub339 = fsub double %35, %add336
  %add341 = fadd double %34, %sub339
  store double %add341, double* %arrayidx335, align 8, !tbaa !429
  store double %add336, double* %arrayidx334, align 8, !tbaa !429
  %cmp330 = icmp sgt i32 %sub333, 1
  br i1 %cmp330, label %for.body332, label %for.cond347.preheader

for.body350:                                      ; preds = %for.body350, %for.body350.preheader
  %fw.7607 = phi double [ %add352, %for.body350 ], [ 0.000000e+00, %for.body350.preheader ]
  %i.13606 = phi i32 [ %dec354, %for.body350 ], [ %jz.2, %for.body350.preheader ]
  %arrayidx351 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %i.13606
  %36 = load double* %arrayidx351, align 8, !tbaa !429
  %add352 = fadd double %fw.7607, %36
  %dec354 = add nsw i32 %i.13606, -1
  %cmp348 = icmp sgt i32 %dec354, 1
  br i1 %cmp348, label %for.body350, label %for.end355.loopexit

for.end355.loopexit:                              ; preds = %for.body350
  %add352.lcssa = phi double [ %add352, %for.body350 ]
  br label %for.end355

for.end355:                                       ; preds = %for.end355.loopexit, %for.cond347.preheader, %for.cond329.preheader, %for.cond311.preheader
  %fw.7.lcssa = phi double [ 0.000000e+00, %for.cond347.preheader ], [ 0.000000e+00, %for.cond329.preheader ], [ 0.000000e+00, %for.cond311.preheader ], [ %add352.lcssa, %for.end355.loopexit ]
  %cmp356 = icmp eq i32 %ih.0580684, 0
  %arrayidx359 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 0
  %37 = load double* %arrayidx359, align 8, !tbaa !429
  br i1 %cmp356, label %if.then358, label %if.else364

if.then358:                                       ; preds = %for.end355
  store double %37, double* %y, align 4, !tbaa !429
  %arrayidx361 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 1
  %38 = load double* %arrayidx361, align 8, !tbaa !429
  %arrayidx362 = getelementptr inbounds double* %y, i32 1
  store double %38, double* %arrayidx362, align 4, !tbaa !429
  %arrayidx363 = getelementptr inbounds double* %y, i32 2
  store double %fw.7.lcssa, double* %arrayidx363, align 4, !tbaa !429
  br label %sw.epilog374

if.else364:                                       ; preds = %for.end355
  %sub366 = fsub double -0.000000e+00, %37
  store double %sub366, double* %y, align 4, !tbaa !429
  %arrayidx368 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 1
  %39 = load double* %arrayidx368, align 8, !tbaa !429
  %sub369 = fsub double -0.000000e+00, %39
  %arrayidx370 = getelementptr inbounds double* %y, i32 1
  store double %sub369, double* %arrayidx370, align 4, !tbaa !429
  %sub371 = fsub double -0.000000e+00, %fw.7.lcssa
  %arrayidx372 = getelementptr inbounds double* %y, i32 2
  store double %sub371, double* %arrayidx372, align 4, !tbaa !429
  br label %sw.epilog374

sw.epilog374:                                     ; preds = %if.else364, %if.then358, %cond.end307, %cond.end270, %for.end254
  %and375 = and i32 %n.1686, 7
  call void @llvm.lifetime.end(i64 160, i8* %3) #4
  call void @llvm.lifetime.end(i64 160, i8* %2) #4
  call void @llvm.lifetime.end(i64 160, i8* %1) #4
  call void @llvm.lifetime.end(i64 80, i8* %0) #4
  ret i32 %and375
}

; Function Attrs: nounwind readnone
define double @__kernel_sin(double %x, double %y, i32 %iy) #3 {
entry:
  %0 = bitcast double %x to i64
  %and = and i64 %0, 9205357638345293824
  %cmp = icmp ult i64 %and, 4485585228861014016
  %conv = fptosi double %x to i32
  %cmp1 = icmp eq i32 %conv, 0
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %return, label %if.end4

if.end4:                                          ; preds = %entry
  %mul = fmul double %x, %x
  %mul5 = fmul double %mul, %x
  %mul6 = fmul double %mul, 0x3DE5D93A5ACFD57C
  %add = fadd double %mul6, 0xBE5AE5E68A2B9CEB
  %mul7 = fmul double %mul, %add
  %add8 = fadd double %mul7, 0x3EC71DE357B1FE7D
  %mul9 = fmul double %mul, %add8
  %add10 = fadd double %mul9, 0xBF2A01A019C161D5
  %mul11 = fmul double %mul, %add10
  %add12 = fadd double %mul11, 0x3F8111111110F8A6
  %cmp13 = icmp eq i32 %iy, 0
  br i1 %cmp13, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.end4
  %mul16 = fmul double %mul, %add12
  %add17 = fadd double %mul16, 0xBFC5555555555549
  %mul18 = fmul double %mul5, %add17
  %add19 = fadd double %mul18, %x
  br label %return

if.else:                                          ; preds = %if.end4
  %mul20 = fmul double %y, 5.000000e-01
  %mul21 = fmul double %mul5, %add12
  %sub = fsub double %mul20, %mul21
  %mul22 = fmul double %mul, %sub
  %sub23 = fsub double %mul22, %y
  %mul24 = fmul double %mul5, 0xBFC5555555555549
  %sub25 = fsub double %sub23, %mul24
  %sub26 = fsub double %x, %sub25
  br label %return

return:                                           ; preds = %if.else, %if.then15, %entry
  %retval.0 = phi double [ %add19, %if.then15 ], [ %sub26, %if.else ], [ %x, %entry ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @__kernel_standard(double %x, double %y, i32 %type) #2 {
entry:
  switch i32 %type, label %sw.epilog [
    i32 1, label %sw.bb
    i32 101, label %sw.bb
    i32 2, label %sw.bb2
    i32 102, label %sw.bb2
    i32 3, label %sw.bb4
    i32 103, label %sw.bb4
    i32 4, label %sw.bb6
    i32 104, label %sw.bb6
    i32 5, label %sw.bb8
    i32 105, label %sw.bb8
    i32 6, label %sw.bb10
    i32 106, label %sw.bb10
    i32 7, label %sw.bb12
    i32 107, label %sw.bb12
    i32 8, label %sw.bb14
    i32 108, label %sw.bb14
    i32 9, label %sw.bb16
    i32 109, label %sw.bb16
    i32 10, label %sw.bb18
    i32 110, label %sw.bb18
    i32 11, label %sw.bb20
    i32 111, label %sw.bb20
    i32 12, label %sw.bb22
    i32 112, label %sw.bb22
    i32 13, label %sw.bb24
    i32 113, label %sw.bb24
    i32 14, label %sw.bb26
    i32 114, label %sw.bb26
    i32 15, label %sw.bb28
    i32 115, label %sw.bb28
    i32 16, label %sw.bb30
    i32 116, label %sw.bb30
    i32 17, label %sw.bb32
    i32 117, label %sw.bb32
    i32 18, label %sw.bb34
    i32 118, label %sw.bb34
    i32 19, label %sw.bb36
    i32 119, label %sw.bb36
    i32 20, label %sw.bb38
    i32 120, label %sw.bb38
    i32 21, label %sw.bb39
    i32 121, label %sw.bb39
    i32 22, label %sw.bb43
    i32 122, label %sw.bb43
    i32 23, label %sw.bb45
    i32 123, label %sw.bb45
    i32 24, label %sw.bb47
    i32 124, label %sw.bb47
    i32 25, label %sw.bb49
    i32 125, label %sw.bb49
    i32 26, label %sw.bb52
    i32 126, label %sw.bb52
    i32 27, label %sw.bb54
    i32 127, label %sw.bb54
    i32 28, label %sw.bb56
    i32 128, label %sw.bb56
    i32 29, label %sw.bb58
    i32 129, label %sw.bb58
    i32 30, label %sw.bb60
    i32 130, label %sw.bb60
    i32 31, label %sw.bb62
    i32 131, label %sw.bb62
    i32 32, label %sw.bb64
    i32 132, label %sw.bb64
    i32 33, label %sw.bb68
    i32 133, label %sw.bb68
    i32 34, label %sw.bb71
    i32 134, label %sw.bb71
    i32 35, label %sw.bb73
    i32 135, label %sw.bb73
    i32 36, label %sw.bb75
    i32 136, label %sw.bb75
    i32 37, label %sw.bb77
    i32 137, label %sw.bb77
    i32 38, label %sw.bb79
    i32 138, label %sw.bb79
    i32 39, label %sw.bb81
    i32 139, label %sw.bb81
    i32 40, label %sw.bb83
    i32 140, label %sw.bb83
    i32 41, label %sw.bb86
    i32 141, label %sw.bb86
    i32 42, label %sw.bb88
    i32 142, label %sw.bb88
  ]

sw.bb:                                            ; preds = %entry, %entry
  %call = tail call i32* @__errno() #8
  store i32 33, i32* %call, align 4, !tbaa !433
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry, %entry
  %call3 = tail call i32* @__errno() #8
  store i32 33, i32* %call3, align 4, !tbaa !433
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry, %entry
  %call5 = tail call i32* @__errno() #8
  store i32 33, i32* %call5, align 4, !tbaa !433
  br label %sw.epilog

sw.bb6:                                           ; preds = %entry, %entry
  %call7 = tail call i32* @__errno() #8
  store i32 34, i32* %call7, align 4, !tbaa !433
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry, %entry
  %call9 = tail call i32* @__errno() #8
  store i32 34, i32* %call9, align 4, !tbaa !433
  br label %sw.epilog

sw.bb10:                                          ; preds = %entry, %entry
  %call11 = tail call i32* @__errno() #8
  store i32 34, i32* %call11, align 4, !tbaa !433
  br label %sw.epilog

sw.bb12:                                          ; preds = %entry, %entry
  %call13 = tail call i32* @__errno() #8
  store i32 34, i32* %call13, align 4, !tbaa !433
  br label %sw.epilog

sw.bb14:                                          ; preds = %entry, %entry
  %call15 = tail call i32* @__errno() #8
  store i32 33, i32* %call15, align 4, !tbaa !433
  br label %sw.epilog

sw.bb16:                                          ; preds = %entry, %entry
  %call17 = tail call i32* @__errno() #8
  store i32 33, i32* %call17, align 4, !tbaa !433
  br label %sw.epilog

sw.bb18:                                          ; preds = %entry, %entry
  %call19 = tail call i32* @__errno() #8
  store i32 33, i32* %call19, align 4, !tbaa !433
  br label %sw.epilog

sw.bb20:                                          ; preds = %entry, %entry
  %call21 = tail call i32* @__errno() #8
  store i32 33, i32* %call21, align 4, !tbaa !433
  br label %sw.epilog

sw.bb22:                                          ; preds = %entry, %entry
  %call23 = tail call i32* @__errno() #8
  store i32 33, i32* %call23, align 4, !tbaa !433
  br label %sw.epilog

sw.bb24:                                          ; preds = %entry, %entry
  %call25 = tail call i32* @__errno() #8
  store i32 33, i32* %call25, align 4, !tbaa !433
  br label %sw.epilog

sw.bb26:                                          ; preds = %entry, %entry
  %call27 = tail call i32* @__errno() #8
  store i32 34, i32* %call27, align 4, !tbaa !433
  br label %sw.epilog

sw.bb28:                                          ; preds = %entry, %entry
  %call29 = tail call i32* @__errno() #8
  store i32 33, i32* %call29, align 4, !tbaa !433
  br label %sw.epilog

sw.bb30:                                          ; preds = %entry, %entry
  %call31 = tail call i32* @__errno() #8
  store i32 33, i32* %call31, align 4, !tbaa !433
  br label %sw.epilog

sw.bb32:                                          ; preds = %entry, %entry
  %call33 = tail call i32* @__errno() #8
  store i32 33, i32* %call33, align 4, !tbaa !433
  br label %sw.epilog

sw.bb34:                                          ; preds = %entry, %entry
  %call35 = tail call i32* @__errno() #8
  store i32 33, i32* %call35, align 4, !tbaa !433
  br label %sw.epilog

sw.bb36:                                          ; preds = %entry, %entry
  %call37 = tail call i32* @__errno() #8
  store i32 33, i32* %call37, align 4, !tbaa !433
  br label %sw.epilog

sw.bb38:                                          ; preds = %entry, %entry
  br label %sw.epilog

sw.bb39:                                          ; preds = %entry, %entry
  %mul = fmul double %y, 5.000000e-01
  %cmp = fcmp olt double %x, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb39
  %call40 = tail call double @rint(double %mul) #8
  %cmp41 = fcmp une double %call40, %mul
  br i1 %cmp41, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.bb39
  %retval1.0 = phi double [ 0xFFF0000000000000, %if.then ], [ 0x7FF0000000000000, %land.lhs.true ], [ 0x7FF0000000000000, %sw.bb39 ]
  %call42 = tail call i32* @__errno() #8
  store i32 34, i32* %call42, align 4, !tbaa !433
  br label %sw.epilog

sw.bb43:                                          ; preds = %entry, %entry
  %call44 = tail call i32* @__errno() #8
  store i32 34, i32* %call44, align 4, !tbaa !433
  br label %sw.epilog

sw.bb45:                                          ; preds = %entry, %entry
  %call46 = tail call i32* @__errno() #8
  store i32 33, i32* %call46, align 4, !tbaa !433
  br label %sw.epilog

sw.bb47:                                          ; preds = %entry, %entry
  %call48 = tail call i32* @__errno() #8
  store i32 33, i32* %call48, align 4, !tbaa !433
  br label %sw.epilog

sw.bb49:                                          ; preds = %entry, %entry
  %cmp50 = fcmp ogt double %x, 0.000000e+00
  %cond = select i1 %cmp50, double 0x7FF0000000000000, double 0xFFF0000000000000
  %call51 = tail call i32* @__errno() #8
  store i32 34, i32* %call51, align 4, !tbaa !433
  br label %sw.epilog

sw.bb52:                                          ; preds = %entry, %entry
  %call53 = tail call i32* @__errno() #8
  store i32 33, i32* %call53, align 4, !tbaa !433
  br label %sw.epilog

sw.bb54:                                          ; preds = %entry, %entry
  %call55 = tail call i32* @__errno() #8
  store i32 33, i32* %call55, align 4, !tbaa !433
  br label %sw.epilog

sw.bb56:                                          ; preds = %entry, %entry
  %call57 = tail call i32* @__errno() #8
  store i32 33, i32* %call57, align 4, !tbaa !433
  br label %sw.epilog

sw.bb58:                                          ; preds = %entry, %entry
  %call59 = tail call i32* @__errno() #8
  store i32 33, i32* %call59, align 4, !tbaa !433
  br label %sw.epilog

sw.bb60:                                          ; preds = %entry, %entry
  %call61 = tail call i32* @__errno() #8
  store i32 33, i32* %call61, align 4, !tbaa !433
  br label %sw.epilog

sw.bb62:                                          ; preds = %entry, %entry
  %div = fdiv double %x, 0.000000e+00
  %call63 = tail call i32* @__errno() #8
  store i32 33, i32* %call63, align 4, !tbaa !433
  br label %sw.epilog

sw.bb64:                                          ; preds = %entry, %entry
  %cmp65 = fcmp ogt double %x, 0.000000e+00
  %cond66 = select i1 %cmp65, double 0x7FF0000000000000, double 0xFFF0000000000000
  %call67 = tail call i32* @__errno() #8
  store i32 34, i32* %call67, align 4, !tbaa !433
  br label %sw.epilog

sw.bb68:                                          ; preds = %entry, %entry
  %call69 = tail call double @copysign(double 0.000000e+00, double %x) #8
  %call70 = tail call i32* @__errno() #8
  store i32 34, i32* %call70, align 4, !tbaa !433
  br label %sw.epilog

sw.bb71:                                          ; preds = %entry, %entry
  %call72 = tail call i32* @__errno() #8
  store i32 34, i32* %call72, align 4, !tbaa !433
  br label %sw.epilog

sw.bb73:                                          ; preds = %entry, %entry
  %call74 = tail call i32* @__errno() #8
  store i32 34, i32* %call74, align 4, !tbaa !433
  br label %sw.epilog

sw.bb75:                                          ; preds = %entry, %entry
  %call76 = tail call i32* @__errno() #8
  store i32 34, i32* %call76, align 4, !tbaa !433
  br label %sw.epilog

sw.bb77:                                          ; preds = %entry, %entry
  %call78 = tail call i32* @__errno() #8
  store i32 34, i32* %call78, align 4, !tbaa !433
  br label %sw.epilog

sw.bb79:                                          ; preds = %entry, %entry
  %call80 = tail call i32* @__errno() #8
  store i32 34, i32* %call80, align 4, !tbaa !433
  br label %sw.epilog

sw.bb81:                                          ; preds = %entry, %entry
  %call82 = tail call i32* @__errno() #8
  store i32 34, i32* %call82, align 4, !tbaa !433
  br label %sw.epilog

sw.bb83:                                          ; preds = %entry, %entry
  %call84 = tail call double @copysign(double 0x7FF0000000000000, double %x) #8
  %call85 = tail call i32* @__errno() #8
  store i32 34, i32* %call85, align 4, !tbaa !433
  br label %sw.epilog

sw.bb86:                                          ; preds = %entry, %entry
  %call87 = tail call i32* @__errno() #8
  store i32 33, i32* %call87, align 4, !tbaa !433
  br label %sw.epilog

sw.bb88:                                          ; preds = %entry, %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb88, %sw.bb86, %sw.bb83, %sw.bb81, %sw.bb79, %sw.bb77, %sw.bb75, %sw.bb73, %sw.bb71, %sw.bb68, %sw.bb64, %sw.bb62, %sw.bb60, %sw.bb58, %sw.bb56, %sw.bb54, %sw.bb52, %sw.bb49, %sw.bb47, %sw.bb45, %sw.bb43, %if.end, %sw.bb38, %sw.bb36, %sw.bb34, %sw.bb32, %sw.bb30, %sw.bb28, %sw.bb26, %sw.bb24, %sw.bb22, %sw.bb20, %sw.bb18, %sw.bb16, %sw.bb14, %sw.bb12, %sw.bb10, %sw.bb8, %sw.bb6, %sw.bb4, %sw.bb2, %sw.bb, %entry
  %retval1.1 = phi double [ 0.000000e+00, %entry ], [ 1.000000e+00, %sw.bb88 ], [ 0x7FF0000000000000, %sw.bb86 ], [ %call84, %sw.bb83 ], [ 0.000000e+00, %sw.bb81 ], [ 0.000000e+00, %sw.bb79 ], [ 0.000000e+00, %sw.bb77 ], [ 0.000000e+00, %sw.bb75 ], [ 0.000000e+00, %sw.bb73 ], [ 0.000000e+00, %sw.bb71 ], [ %call69, %sw.bb68 ], [ %cond66, %sw.bb64 ], [ %div, %sw.bb62 ], [ 0x7FF8000000000000, %sw.bb60 ], [ 0x7FF8000000000000, %sw.bb58 ], [ 0x7FF8000000000000, %sw.bb56 ], [ 0x7FF8000000000000, %sw.bb54 ], [ 0x7FF8000000000000, %sw.bb52 ], [ %cond, %sw.bb49 ], [ 0x7FF8000000000000, %sw.bb47 ], [ 0xFFF0000000000000, %sw.bb45 ], [ 0.000000e+00, %sw.bb43 ], [ %retval1.0, %if.end ], [ 1.000000e+00, %sw.bb38 ], [ 0xFFF0000000000000, %sw.bb36 ], [ 0xFFF0000000000000, %sw.bb34 ], [ 0xFFF0000000000000, %sw.bb32 ], [ 0xFFF0000000000000, %sw.bb30 ], [ 0x7FF0000000000000, %sw.bb28 ], [ 0x7FF0000000000000, %sw.bb26 ], [ 0xFFF0000000000000, %sw.bb24 ], [ 0xFFF0000000000000, %sw.bb22 ], [ 0xFFF0000000000000, %sw.bb20 ], [ 0xFFF0000000000000, %sw.bb18 ], [ 0xFFF0000000000000, %sw.bb16 ], [ 0xFFF0000000000000, %sw.bb14 ], [ 0.000000e+00, %sw.bb12 ], [ 0x7FF0000000000000, %sw.bb10 ], [ 0x7FF0000000000000, %sw.bb8 ], [ 0x7FF0000000000000, %sw.bb6 ], [ 0.000000e+00, %sw.bb4 ], [ 0.000000e+00, %sw.bb2 ], [ 0.000000e+00, %sw.bb ]
  ret double %retval1.1
}

declare i32* @__errno() #5

; Function Attrs: nounwind
define double @__kernel_tan(double %x, double %y, i32 %iy) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ult i32 %and, 1043333120
  %conv = fptosi double %x to i32
  %cmp1 = icmp eq i32 %conv, 0
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %do.body4, label %if.end37

do.body4:                                         ; preds = %entry
  %gl_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %add = add nsw i32 %iy, 1
  %or = or i32 %add, %gl_u.sroa.0.0.extract.trunc
  %or8 = or i32 %or, %and
  %cmp9 = icmp eq i32 %or8, 0
  br i1 %cmp9, label %if.then11, label %if.else

if.then11:                                        ; preds = %do.body4
  %call = tail call double @fabs(double %x) #8
  %div = fdiv double 1.000000e+00, %call
  br label %return

if.else:                                          ; preds = %do.body4
  %cmp12 = icmp eq i32 %iy, 1
  br i1 %cmp12, label %return, label %if.else15

if.else15:                                        ; preds = %if.else
  %add16 = fadd double %x, %y
  %1 = bitcast double %add16 to i64
  %sl_u.sroa.0.0.insert.mask = and i64 %1, -4294967296
  %2 = bitcast i64 %sl_u.sroa.0.0.insert.mask to double
  %sub = fsub double %2, %x
  %sub23 = fsub double %y, %sub
  %div24 = fdiv double -1.000000e+00, %add16
  %3 = bitcast double %div24 to i64
  %sl_u26.sroa.0.0.insert.mask = and i64 %3, -4294967296
  %4 = bitcast i64 %sl_u26.sroa.0.0.insert.mask to double
  %mul = fmul double %2, %4
  %add32 = fadd double %mul, 1.000000e+00
  %mul33 = fmul double %sub23, %4
  %add34 = fadd double %mul33, %add32
  %mul35 = fmul double %div24, %add34
  %add36 = fadd double %4, %mul35
  br label %return

if.end37:                                         ; preds = %entry
  %cmp38 = icmp ugt i32 %and, 1072010279
  br i1 %cmp38, label %if.then40, label %if.end50

if.then40:                                        ; preds = %if.end37
  %cmp41 = icmp slt i32 %gh_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp41, label %if.then43, label %if.end46

if.then43:                                        ; preds = %if.then40
  %sub44 = fsub double -0.000000e+00, %x
  %sub45 = fsub double -0.000000e+00, %y
  br label %if.end46

if.end46:                                         ; preds = %if.then43, %if.then40
  %y.addr.0 = phi double [ %sub45, %if.then43 ], [ %y, %if.then40 ]
  %x.addr.0 = phi double [ %sub44, %if.then43 ], [ %x, %if.then40 ]
  %sub47 = fsub double 0x3FE921FB54442D18, %x.addr.0
  %sub48 = fsub double 0x3C81A62633145C07, %y.addr.0
  %add49 = fadd double %sub48, %sub47
  br label %if.end50

if.end50:                                         ; preds = %if.end46, %if.end37
  %y.addr.1 = phi double [ 0.000000e+00, %if.end46 ], [ %y, %if.end37 ]
  %x.addr.1 = phi double [ %add49, %if.end46 ], [ %x, %if.end37 ]
  %mul51 = fmul double %x.addr.1, %x.addr.1
  %mul52 = fmul double %mul51, %mul51
  %mul53 = fmul double %mul52, 0xBEF375CBDB605373
  %add54 = fadd double %mul53, 0x3F147E88A03792A6
  %mul55 = fmul double %mul52, %add54
  %add56 = fadd double %mul55, 0x3F4344D8F2F26501
  %mul57 = fmul double %mul52, %add56
  %add58 = fadd double %mul57, 0x3F6D6D22C9560328
  %mul59 = fmul double %mul52, %add58
  %add60 = fadd double %mul59, 0x3F9664F48406D637
  %mul61 = fmul double %mul52, %add60
  %add62 = fadd double %mul61, 0x3FC111111110FE7A
  %mul63 = fmul double %mul52, 0x3EFB2A7074BF7AD4
  %add64 = fadd double %mul63, 0x3F12B80F32F0A7E9
  %mul65 = fmul double %mul52, %add64
  %add66 = fadd double %mul65, 0x3F3026F71A8D1068
  %mul67 = fmul double %mul52, %add66
  %add68 = fadd double %mul67, 0x3F57DBC8FEE08315
  %mul69 = fmul double %mul52, %add68
  %add70 = fadd double %mul69, 0x3F8226E3E96E8493
  %mul71 = fmul double %mul52, %add70
  %add72 = fadd double %mul71, 0x3FABA1BA1BB341FE
  %mul73 = fmul double %mul51, %add72
  %mul74 = fmul double %x.addr.1, %mul51
  %add75 = fadd double %add62, %mul73
  %mul76 = fmul double %mul74, %add75
  %add77 = fadd double %y.addr.1, %mul76
  %mul78 = fmul double %mul51, %add77
  %add79 = fadd double %y.addr.1, %mul78
  %mul80 = fmul double %mul74, 0x3FD5555555555563
  %add81 = fadd double %mul80, %add79
  %add82 = fadd double %x.addr.1, %add81
  br i1 %cmp38, label %if.then85, label %if.end98

if.then85:                                        ; preds = %if.end50
  %conv86 = sitofp i32 %iy to double
  %shr197198 = lshr i64 %0, 62
  %shr197 = trunc i64 %shr197198 to i32
  %and87 = and i32 %shr197, 2
  %sub88 = sub nsw i32 1, %and87
  %conv89 = sitofp i32 %sub88 to double
  %mul90 = fmul double %add82, %add82
  %add91 = fadd double %conv86, %add82
  %div92 = fdiv double %mul90, %add91
  %sub93 = fsub double %div92, %add81
  %sub94 = fsub double %x.addr.1, %sub93
  %mul95 = fmul double %sub94, 2.000000e+00
  %sub96 = fsub double %conv86, %mul95
  %mul97 = fmul double %conv89, %sub96
  br label %return

if.end98:                                         ; preds = %if.end50
  %cmp99 = icmp eq i32 %iy, 1
  br i1 %cmp99, label %return, label %if.else102

if.else102:                                       ; preds = %if.end98
  %5 = bitcast double %add82 to i64
  %sl_u106.sroa.0.0.insert.mask = and i64 %5, -4294967296
  %6 = bitcast i64 %sl_u106.sroa.0.0.insert.mask to double
  %sub112 = fsub double %6, %x.addr.1
  %sub113 = fsub double %add81, %sub112
  %div114 = fdiv double -1.000000e+00, %add82
  %7 = bitcast double %div114 to i64
  %sl_u116.sroa.0.0.insert.mask = and i64 %7, -4294967296
  %8 = bitcast i64 %sl_u116.sroa.0.0.insert.mask to double
  %mul122 = fmul double %6, %8
  %add123 = fadd double %mul122, 1.000000e+00
  %mul124 = fmul double %sub113, %8
  %add125 = fadd double %mul124, %add123
  %mul126 = fmul double %div114, %add125
  %add127 = fadd double %8, %mul126
  br label %return

return:                                           ; preds = %if.else102, %if.end98, %if.then85, %if.else15, %if.else, %if.then11
  %retval.0 = phi double [ %div, %if.then11 ], [ %add36, %if.else15 ], [ %mul97, %if.then85 ], [ %add127, %if.else102 ], [ %x, %if.else ], [ %add82, %if.end98 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @log2(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %shr.i = lshr i64 %0, 48
  %conv.i = trunc i64 %shr.i to i32
  %sub = add i64 %0, -4606800540372828160
  %cmp = icmp ult i64 %sub, 581272283906048
  br i1 %cmp, label %if.then, label %if.end49, !prof !418

if.then:                                          ; preds = %entry
  %cmp10 = icmp eq i64 %0, 4607182418800017408
  br i1 %cmp10, label %return, label %if.end, !prof !418

if.end:                                           ; preds = %if.then
  %sub15 = fadd double %x, -1.000000e+00
  %1 = bitcast double %sub15 to i64
  %and = and i64 %1, -4294967296
  %2 = bitcast i64 %and to double
  %sub20 = fsub double %sub15, %2
  %3 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 0), align 4, !tbaa !447
  %mul = fmul double %2, %3
  %mul21 = fmul double %sub20, %3
  %4 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 1), align 4, !tbaa !449
  %mul22 = fmul double %sub15, %4
  %add = fadd double %mul21, %mul22
  %mul23 = fmul double %sub15, %sub15
  %mul24 = fmul double %mul23, %mul23
  %5 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 3, i32 0), align 4, !tbaa !429
  %6 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 3, i32 1), align 4, !tbaa !429
  %mul25 = fmul double %sub15, %6
  %add26 = fadd double %5, %mul25
  %mul27 = fmul double %mul23, %add26
  %add28 = fadd double %mul, %mul27
  %sub29 = fsub double %mul, %add28
  %add30 = fadd double %mul27, %sub29
  %add31 = fadd double %add, %add30
  %7 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 3, i32 2), align 4, !tbaa !429
  %8 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 3, i32 3), align 4, !tbaa !429
  %mul32 = fmul double %sub15, %8
  %add33 = fadd double %7, %mul32
  %9 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 3, i32 4), align 4, !tbaa !429
  %10 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 3, i32 5), align 4, !tbaa !429
  %mul34 = fmul double %sub15, %10
  %add35 = fadd double %9, %mul34
  %mul36 = fmul double %mul23, %add35
  %add37 = fadd double %add33, %mul36
  %11 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 3, i32 6), align 4, !tbaa !429
  %12 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 3, i32 7), align 4, !tbaa !429
  %mul38 = fmul double %sub15, %12
  %add39 = fadd double %11, %mul38
  %13 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 3, i32 8), align 4, !tbaa !429
  %14 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 3, i32 9), align 4, !tbaa !429
  %mul40 = fmul double %sub15, %14
  %add41 = fadd double %13, %mul40
  %mul42 = fmul double %mul23, %add41
  %add43 = fadd double %add39, %mul42
  %mul44 = fmul double %mul24, %add43
  %add45 = fadd double %add37, %mul44
  %mul46 = fmul double %mul24, %add45
  %add47 = fadd double %add31, %mul46
  %add48 = fadd double %add28, %add47
  br label %return

if.end49:                                         ; preds = %entry
  %sub50 = add nsw i32 %conv.i, -16
  %cmp51 = icmp ugt i32 %sub50, 32735
  br i1 %cmp51, label %if.then55, label %if.end78, !prof !418

if.then55:                                        ; preds = %if.end49
  %mul56.mask = and i64 %0, 9223372036854775807
  %cmp57 = icmp eq i64 %mul56.mask, 0
  br i1 %cmp57, label %if.then59, label %if.end61

if.then59:                                        ; preds = %if.then55
  %call60 = tail call double @__math_divzero(i32 1) #8
  br label %return

if.end61:                                         ; preds = %if.then55
  %cmp63 = icmp eq i64 %0, 9218868437227405312
  br i1 %cmp63, label %return, label %if.end66

if.end66:                                         ; preds = %if.end61
  %and67 = and i32 %conv.i, 32768
  %tobool68 = icmp ne i32 %and67, 0
  %and69 = and i32 %conv.i, 32752
  %cmp70 = icmp eq i32 %and69, 32752
  %or.cond = or i1 %tobool68, %cmp70
  br i1 %or.cond, label %if.then72, label %if.end74

if.then72:                                        ; preds = %if.end66
  %call73 = tail call double @__math_invalid(double %x) #8
  br label %return

if.end74:                                         ; preds = %if.end66
  %mul75 = fmul double %x, 0x4330000000000000
  %15 = bitcast double %mul75 to i64
  %sub77 = add i64 %15, -234187180623265792
  br label %if.end78

if.end78:                                         ; preds = %if.end74, %if.end49
  %ix.0 = phi i64 [ %sub77, %if.end74 ], [ %0, %if.end49 ]
  %sub79 = add i64 %ix.0, -4604367669032910848
  %shr = lshr i64 %sub79, 46
  %shr.tr = trunc i64 %shr to i32
  %conv80 = and i32 %shr.tr, 63
  %shr81 = ashr i64 %sub79, 52
  %conv82 = trunc i64 %shr81 to i32
  %and83 = and i64 %sub79, -4503599627370496
  %sub84 = sub i64 %ix.0, %and83
  %invc85 = getelementptr inbounds %struct.log2_data* @__log2_data, i32 0, i32 4, i32 %conv80, i32 0
  %16 = load double* %invc85, align 4, !tbaa !450
  %logc87 = getelementptr inbounds %struct.log2_data* @__log2_data, i32 0, i32 4, i32 %conv80, i32 1
  %17 = load double* %logc87, align 4, !tbaa !452
  %18 = bitcast i64 %sub84 to double
  %conv89 = sitofp i32 %conv82 to double
  %chi = getelementptr inbounds %struct.log2_data* @__log2_data, i32 0, i32 5, i32 %conv80, i32 0
  %19 = load double* %chi, align 4, !tbaa !450
  %sub95 = fsub double %18, %19
  %clo = getelementptr inbounds %struct.log2_data* @__log2_data, i32 0, i32 5, i32 %conv80, i32 1
  %20 = load double* %clo, align 4, !tbaa !452
  %sub97 = fsub double %sub95, %20
  %mul98 = fmul double %16, %sub97
  %21 = bitcast double %mul98 to i64
  %and100 = and i64 %21, -4294967296
  %22 = bitcast i64 %and100 to double
  %sub102 = fsub double %mul98, %22
  %23 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 0), align 4, !tbaa !447
  %mul103 = fmul double %23, %22
  %mul104 = fmul double %23, %sub102
  %24 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 1), align 4, !tbaa !449
  %mul105 = fmul double %24, %mul98
  %add106 = fadd double %mul105, %mul104
  %add107 = fadd double %17, %conv89
  %add108 = fadd double %add107, %mul103
  %sub109 = fsub double %add107, %add108
  %add110 = fadd double %mul103, %sub109
  %add111 = fadd double %add106, %add110
  %mul112 = fmul double %mul98, %mul98
  %mul113 = fmul double %mul112, %mul112
  %25 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 2, i32 0), align 4, !tbaa !429
  %26 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 2, i32 1), align 4, !tbaa !429
  %mul114 = fmul double %mul98, %26
  %add115 = fadd double %25, %mul114
  %27 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 2, i32 2), align 4, !tbaa !429
  %28 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 2, i32 3), align 4, !tbaa !429
  %mul116 = fmul double %mul98, %28
  %add117 = fadd double %27, %mul116
  %mul118 = fmul double %mul112, %add117
  %add119 = fadd double %add115, %mul118
  %29 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 2, i32 4), align 4, !tbaa !429
  %30 = load double* getelementptr inbounds (%struct.log2_data* @__log2_data, i32 0, i32 2, i32 5), align 4, !tbaa !429
  %mul120 = fmul double %mul98, %30
  %add121 = fadd double %29, %mul120
  %mul122 = fmul double %mul113, %add121
  %add123 = fadd double %add119, %mul122
  %mul124 = fmul double %mul112, %add123
  %add125 = fadd double %add111, %mul124
  %add126 = fadd double %add108, %add125
  br label %return

return:                                           ; preds = %if.end78, %if.then72, %if.end61, %if.then59, %if.end, %if.then
  %retval.0 = phi double [ %add48, %if.end ], [ %call60, %if.then59 ], [ %call73, %if.then72 ], [ %add126, %if.end78 ], [ 0.000000e+00, %if.then ], [ %x, %if.end61 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @log(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %shr.i = lshr i64 %0, 48
  %conv.i = trunc i64 %shr.i to i32
  %sub = add i64 %0, -4606619468846596096
  %cmp = icmp ult i64 %sub, 854320534781952
  br i1 %cmp, label %if.then, label %if.end52, !prof !418

if.then:                                          ; preds = %entry
  %cmp10 = icmp eq i64 %0, 4607182418800017408
  br i1 %cmp10, label %return, label %if.end, !prof !418

if.end:                                           ; preds = %if.then
  %sub15 = fadd double %x, -1.000000e+00
  %mul = fmul double %sub15, %sub15
  %mul16 = fmul double %sub15, %mul
  %1 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 3, i32 1), align 4, !tbaa !429
  %2 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 3, i32 2), align 4, !tbaa !429
  %mul17 = fmul double %sub15, %2
  %add = fadd double %1, %mul17
  %3 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 3, i32 3), align 4, !tbaa !429
  %mul18 = fmul double %mul, %3
  %add19 = fadd double %add, %mul18
  %4 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 3, i32 4), align 4, !tbaa !429
  %5 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 3, i32 5), align 4, !tbaa !429
  %mul20 = fmul double %sub15, %5
  %add21 = fadd double %4, %mul20
  %6 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 3, i32 6), align 4, !tbaa !429
  %mul22 = fmul double %mul, %6
  %add23 = fadd double %add21, %mul22
  %7 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 3, i32 7), align 4, !tbaa !429
  %8 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 3, i32 8), align 4, !tbaa !429
  %mul24 = fmul double %sub15, %8
  %add25 = fadd double %7, %mul24
  %9 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 3, i32 9), align 4, !tbaa !429
  %mul26 = fmul double %mul, %9
  %add27 = fadd double %add25, %mul26
  %10 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 3, i32 10), align 4, !tbaa !429
  %mul28 = fmul double %mul16, %10
  %add29 = fadd double %add27, %mul28
  %mul30 = fmul double %mul16, %add29
  %add31 = fadd double %add23, %mul30
  %mul32 = fmul double %mul16, %add31
  %add33 = fadd double %add19, %mul32
  %mul34 = fmul double %mul16, %add33
  %mul35 = fmul double %sub15, 0x41A0000000000000
  %add37 = fadd double %sub15, %mul35
  %sub38 = fsub double %add37, %mul35
  %sub40 = fsub double %sub15, %sub38
  %mul41 = fmul double %sub38, %sub38
  %11 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 3, i32 0), align 4, !tbaa !429
  %mul42 = fmul double %mul41, %11
  %add43 = fadd double %sub15, %mul42
  %sub44 = fsub double %sub15, %add43
  %add45 = fadd double %mul42, %sub44
  %mul46 = fmul double %sub40, %11
  %add47 = fadd double %sub15, %sub38
  %mul48 = fmul double %add47, %mul46
  %add49 = fadd double %mul48, %add45
  %add50 = fadd double %add49, %mul34
  %add51 = fadd double %add43, %add50
  br label %return

if.end52:                                         ; preds = %entry
  %sub53 = add nsw i32 %conv.i, -16
  %cmp54 = icmp ugt i32 %sub53, 32735
  br i1 %cmp54, label %if.then58, label %if.end80, !prof !418

if.then58:                                        ; preds = %if.end52
  %mul59.mask = and i64 %0, 9223372036854775807
  %cmp60 = icmp eq i64 %mul59.mask, 0
  br i1 %cmp60, label %if.then62, label %if.end64

if.then62:                                        ; preds = %if.then58
  %call63 = tail call double @__math_divzero(i32 1) #8
  br label %return

if.end64:                                         ; preds = %if.then58
  %cmp66 = icmp eq i64 %0, 9218868437227405312
  br i1 %cmp66, label %return, label %if.end69

if.end69:                                         ; preds = %if.end64
  %and = and i32 %conv.i, 32768
  %tobool70 = icmp ne i32 %and, 0
  %and71 = and i32 %conv.i, 32752
  %cmp72 = icmp eq i32 %and71, 32752
  %or.cond = or i1 %tobool70, %cmp72
  br i1 %or.cond, label %if.then74, label %if.end76

if.then74:                                        ; preds = %if.end69
  %call75 = tail call double @__math_invalid(double %x) #8
  br label %return

if.end76:                                         ; preds = %if.end69
  %mul77 = fmul double %x, 0x4330000000000000
  %12 = bitcast double %mul77 to i64
  %sub79 = add i64 %12, -234187180623265792
  br label %if.end80

if.end80:                                         ; preds = %if.end76, %if.end52
  %ix.0 = phi i64 [ %sub79, %if.end76 ], [ %0, %if.end52 ]
  %sub81 = add i64 %ix.0, -4604367669032910848
  %shr = lshr i64 %sub81, 45
  %shr.tr = trunc i64 %shr to i32
  %conv82 = and i32 %shr.tr, 127
  %shr83 = ashr i64 %sub81, 52
  %conv84 = trunc i64 %shr83 to i32
  %and85 = and i64 %sub81, -4503599627370496
  %sub86 = sub i64 %ix.0, %and85
  %invc87 = getelementptr inbounds %struct.log_data* @__log_data, i32 0, i32 4, i32 %conv82, i32 0
  %13 = load double* %invc87, align 4, !tbaa !450
  %logc89 = getelementptr inbounds %struct.log_data* @__log_data, i32 0, i32 4, i32 %conv82, i32 1
  %14 = load double* %logc89, align 4, !tbaa !452
  %15 = bitcast i64 %sub86 to double
  %chi = getelementptr inbounds %struct.log_data* @__log_data, i32 0, i32 5, i32 %conv82, i32 0
  %16 = load double* %chi, align 4, !tbaa !450
  %sub92 = fsub double %15, %16
  %clo = getelementptr inbounds %struct.log_data* @__log_data, i32 0, i32 5, i32 %conv82, i32 1
  %17 = load double* %clo, align 4, !tbaa !452
  %sub94 = fsub double %sub92, %17
  %mul95 = fmul double %13, %sub94
  %conv96 = sitofp i32 %conv84 to double
  %18 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 0), align 4, !tbaa !453
  %mul97 = fmul double %conv96, %18
  %add98 = fadd double %14, %mul97
  %add99 = fadd double %add98, %mul95
  %sub100 = fsub double %add98, %add99
  %add101 = fadd double %mul95, %sub100
  %19 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 1), align 4, !tbaa !455
  %mul102 = fmul double %conv96, %19
  %add103 = fadd double %mul102, %add101
  %mul104 = fmul double %mul95, %mul95
  %20 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 2, i32 0), align 4, !tbaa !429
  %mul105 = fmul double %20, %mul104
  %add106 = fadd double %mul105, %add103
  %mul107 = fmul double %mul95, %mul104
  %21 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 2, i32 1), align 4, !tbaa !429
  %22 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 2, i32 2), align 4, !tbaa !429
  %mul108 = fmul double %mul95, %22
  %add109 = fadd double %21, %mul108
  %23 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 2, i32 3), align 4, !tbaa !429
  %24 = load double* getelementptr inbounds (%struct.log_data* @__log_data, i32 0, i32 2, i32 4), align 4, !tbaa !429
  %mul110 = fmul double %mul95, %24
  %add111 = fadd double %23, %mul110
  %mul112 = fmul double %mul104, %add111
  %add113 = fadd double %add109, %mul112
  %mul114 = fmul double %mul107, %add113
  %add115 = fadd double %add106, %mul114
  %add116 = fadd double %add99, %add115
  br label %return

return:                                           ; preds = %if.end80, %if.then74, %if.end64, %if.then62, %if.end, %if.then
  %retval.0 = phi double [ %add51, %if.end ], [ %call63, %if.then62 ], [ %call75, %if.then74 ], [ %add116, %if.end80 ], [ 0.000000e+00, %if.then ], [ %x, %if.end64 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define hidden double @__math_uflow(i32 %sign) #2 {
entry:
  %call = tail call fastcc double @xflow(i32 %sign, double 0x1000000000000000) #9
  ret double %call
}

; Function Attrs: nounwind
define hidden double @__math_oflow(i32 %sign) #2 {
entry:
  %call = tail call fastcc double @xflow(i32 %sign, double 0x7000000000000000) #9
  ret double %call
}

; Function Attrs: nounwind
define hidden double @__math_divzero(i32 %sign) #2 {
entry:
  %y.i = alloca double, align 8
  %tobool = icmp ne i32 %sign, 0
  %cond = select i1 %tobool, double -1.000000e+00, double 1.000000e+00
  %y.i.0..sroa_cast = bitcast double* %y.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %y.i.0..sroa_cast)
  store volatile double %cond, double* %y.i, align 8, !tbaa !429
  %y.i.0.y.0.y.0..i = load volatile double* %y.i, align 8
  call void @llvm.lifetime.end(i64 8, i8* %y.i.0..sroa_cast)
  %div = fdiv double %y.i.0.y.0.y.0..i, 0.000000e+00
  ret double %div
}

; Function Attrs: nounwind
define hidden double @__math_invalid(double %x) #2 {
entry:
  %sub = fsub double %x, %x
  %div = fdiv double %sub, %sub
  %call = tail call i32 @__fpclassifyd(double %x) #8
  ret double %div
}

; Function Attrs: nounwind readnone
define hidden double @__math_check_uflow(double %y) #3 {
entry:
  ret double %y
}

; Function Attrs: nounwind
define hidden double @__math_check_oflow(double %y) #2 {
entry:
  %call = tail call i32 @__fpclassifyd(double %y) #8
  ret double %y
}

; Function Attrs: nounwind readnone
define hidden float @__math_uflowf(i32 %sign) #3 {
entry:
  %call = tail call fastcc float @xflowf(i32 %sign, float 0x3A00000000000000) #9
  ret float %call
}

; Function Attrs: nounwind readnone
define hidden float @__math_oflowf(i32 %sign) #3 {
entry:
  %call = tail call fastcc float @xflowf(i32 %sign, float 0x4600000000000000) #9
  ret float %call
}

; Function Attrs: nounwind readnone
define hidden float @__math_divzerof(i32 %sign) #3 {
entry:
  %tobool = icmp ne i32 %sign, 0
  %div = select i1 %tobool, float 0xFFF0000000000000, float 0x7FF0000000000000
  ret float %div
}

; Function Attrs: nounwind
define hidden float @__math_invalidf(float %x) #2 {
entry:
  %sub = fsub float %x, %x
  %div = fdiv float %sub, %sub
  %call = tail call i32 @__fpclassifyf(float %x) #8
  ret float %div
}

; Function Attrs: nounwind readnone
define x86_fp80 @nanl(i8* nocapture readnone %tagp) #3 {
entry:
  ret x86_fp80 0xK7FFFC000000000000000
}

; Function Attrs: nounwind
define double @pow(double %x, double %y) #2 {
entry:
  %y.i = alloca double, align 8
  %y.i60.i.i = alloca double, align 8
  %y.i.i.i = alloca double, align 8
  %0 = bitcast double %x to i64
  %1 = bitcast double %y to i64
  %shr.i = lshr i64 %0, 52
  %conv.i = trunc i64 %shr.i to i32
  %shr.i200 = lshr i64 %1, 52
  %conv.i201 = trunc i64 %shr.i200 to i32
  %sub = add nsw i32 %conv.i, -1
  %cmp = icmp ugt i32 %sub, 2045
  br i1 %cmp, label %if.then, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %and = and i32 %conv.i201, 2047
  %sub4 = add nsw i32 %and, -958
  %cmp5 = icmp ugt i32 %sub4, 127
  br i1 %cmp5, label %if.then, label %if.end136, !prof !418

if.then:                                          ; preds = %lor.rhs, %entry
  %mul.i256 = shl i64 %1, 1
  %sub.i257 = add i64 %mul.i256, -1
  %cmp.i258 = icmp ugt i64 %sub.i257, -9007199254740994
  br i1 %cmp.i258, label %if.then9, label %if.end52, !prof !418

if.then9:                                         ; preds = %if.then
  %cmp10 = icmp eq i64 %mul.i256, 0
  br i1 %cmp10, label %if.then11, label %if.end

if.then11:                                        ; preds = %if.then9
  %xor.i252 = shl i64 %0, 1
  %mul.i253 = xor i64 %xor.i252, 4503599627370496
  %cmp.i254 = icmp ugt i64 %mul.i253, -4503599627370496
  br i1 %cmp.i254, label %cond.true, label %return

cond.true:                                        ; preds = %if.then11
  %add = fadd double %x, %y
  br label %return

if.end:                                           ; preds = %if.then9
  %cmp15 = icmp eq i64 %0, 4607182418800017408
  br i1 %cmp15, label %if.then16, label %if.end24

if.then16:                                        ; preds = %if.end
  %mul.i249 = xor i64 %mul.i256, 4503599627370496
  %cmp.i250 = icmp ugt i64 %mul.i249, -4503599627370496
  br i1 %cmp.i250, label %cond.true19, label %return

cond.true19:                                      ; preds = %if.then16
  %add20 = fadd double %x, %y
  br label %return

if.end24:                                         ; preds = %if.end
  %mul25 = shl i64 %0, 1
  %cmp28 = icmp ugt i64 %mul25, -9007199254740992
  %cmp32 = icmp ugt i64 %mul.i256, -9007199254740992
  %or.cond = or i1 %cmp28, %cmp32
  br i1 %or.cond, label %if.then33, label %if.end35

if.then33:                                        ; preds = %if.end24
  %add34 = fadd double %x, %y
  br label %return

if.end35:                                         ; preds = %if.end24
  %cmp39 = icmp eq i64 %mul25, 9214364837600034816
  br i1 %cmp39, label %return, label %if.end41

if.end41:                                         ; preds = %if.end35
  %cmp45 = icmp ult i64 %mul25, 9214364837600034816
  %conv = zext i1 %cmp45 to i32
  %call1.lobit = lshr i64 %1, 63
  %2 = trunc i64 %call1.lobit to i32
  %.not = xor i32 %2, 1
  %cmp47 = icmp eq i32 %conv, %.not
  br i1 %cmp47, label %return, label %if.end50

if.end50:                                         ; preds = %if.end41
  %mul51 = fmul double %y, %y
  br label %return

if.end52:                                         ; preds = %if.then
  %mul.i245 = shl i64 %0, 1
  %sub.i246 = add i64 %mul.i245, -1
  %cmp.i247 = icmp ugt i64 %sub.i246, -9007199254740994
  br i1 %cmp.i247, label %if.then56, label %if.end73, !prof !418

if.then56:                                        ; preds = %if.end52
  %mul57 = fmul double %x, %x
  %tobool59 = icmp slt i64 %0, 0
  br i1 %tobool59, label %land.lhs.true, label %if.end65

land.lhs.true:                                    ; preds = %if.then56
  %conv.i228 = and i32 %conv.i201, 2047
  %conv.i228.off = add nsw i32 %conv.i228, -1023
  %3 = icmp ugt i32 %conv.i228.off, 52
  br i1 %3, label %if.end65, label %if.end5.i238

if.end5.i238:                                     ; preds = %land.lhs.true
  %sub.i232 = sub nsw i32 1075, %conv.i228
  %sh_prom.i233 = zext i32 %sub.i232 to i64
  %shl.i234 = shl i64 1, %sh_prom.i233
  %sub6.i235 = add i64 %shl.i234, -1
  %and7.i236 = and i64 %sub6.i235, %1
  %tobool.i237 = icmp ne i64 %and7.i236, 0
  %and13.i239 = and i64 %shl.i234, %1
  %tobool14.i240 = icmp eq i64 %and13.i239, 0
  %or.cond268 = or i1 %tobool.i237, %tobool14.i240
  br i1 %or.cond268, label %if.end65, label %if.then63

if.then63:                                        ; preds = %if.end5.i238
  %sub64 = fsub double -0.000000e+00, %mul57
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %if.end5.i238, %land.lhs.true, %if.then56
  %x2.0 = phi double [ %sub64, %if.then63 ], [ %mul57, %if.then56 ], [ %mul57, %land.lhs.true ], [ %mul57, %if.end5.i238 ]
  %tobool67 = icmp slt i64 %1, 0
  br i1 %tobool67, label %cond.true68, label %return

cond.true68:                                      ; preds = %if.end65
  %div = fdiv double 1.000000e+00, %x2.0
  %y.i.0..sroa_cast = bitcast double* %y.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %y.i.0..sroa_cast)
  store volatile double %div, double* %y.i, align 8, !tbaa !429
  %y.i.0.y.0.y.0..i = load volatile double* %y.i, align 8
  call void @llvm.lifetime.end(i64 8, i8* %y.i.0..sroa_cast)
  br label %return

if.end73:                                         ; preds = %if.end52
  %tobool75 = icmp slt i64 %0, 0
  %conv.i219 = and i32 %conv.i201, 2047
  br i1 %tobool75, label %if.then76, label %if.end89

if.then76:                                        ; preds = %if.end73
  %cmp.i220 = icmp ult i32 %conv.i219, 1023
  br i1 %cmp.i220, label %if.then80, label %if.end.i221

if.end.i221:                                      ; preds = %if.then76
  %cmp2.i = icmp ugt i32 %conv.i219, 1075
  br i1 %cmp2.i, label %if.end86, label %if.end5.i

if.end5.i:                                        ; preds = %if.end.i221
  %sub.i222 = sub nsw i32 1075, %conv.i219
  %sh_prom.i = zext i32 %sub.i222 to i64
  %shl.i223 = shl i64 1, %sh_prom.i
  %sub6.i = add i64 %shl.i223, -1
  %and7.i = and i64 %sub6.i, %1
  %tobool.i = icmp eq i64 %and7.i, 0
  br i1 %tobool.i, label %checkint.exit, label %if.then80

checkint.exit:                                    ; preds = %if.end5.i
  %and13.i224 = and i64 %shl.i223, %1
  %tobool14.i = icmp eq i64 %and13.i224, 0
  %. = select i1 %tobool14.i, i32 0, i32 262144
  br label %if.end86

if.then80:                                        ; preds = %if.end5.i, %if.then76
  %call81 = tail call double @__math_invalid(double %x) #8
  br label %return

if.end86:                                         ; preds = %checkint.exit, %if.end.i221
  %sign_bias.0 = phi i32 [ 0, %if.end.i221 ], [ %., %checkint.exit ]
  %and87 = and i64 %0, 9223372036854775807
  %and88 = and i32 %conv.i, 2047
  br label %if.end89

if.end89:                                         ; preds = %if.end86, %if.end73
  %topx.0 = phi i32 [ %and88, %if.end86 ], [ %conv.i, %if.end73 ]
  %ix.0 = phi i64 [ %and87, %if.end86 ], [ %0, %if.end73 ]
  %sign_bias.1 = phi i32 [ %sign_bias.0, %if.end86 ], [ 0, %if.end73 ]
  %sub91 = add nsw i32 %conv.i219, -958
  %cmp92 = icmp ugt i32 %sub91, 127
  br i1 %cmp92, label %if.then94, label %if.end127

if.then94:                                        ; preds = %if.end89
  %cmp96 = icmp eq i64 %ix.0, 4607182418800017408
  br i1 %cmp96, label %return, label %if.end99

if.end99:                                         ; preds = %if.then94
  %cmp101 = icmp ult i32 %conv.i219, 958
  %cmp105 = icmp ugt i64 %ix.0, 4607182418800017408
  br i1 %cmp101, label %if.then103, label %if.end113

if.then103:                                       ; preds = %if.end99
  br i1 %cmp105, label %cond.true107, label %cond.false109

cond.true107:                                     ; preds = %if.then103
  %add108 = fadd double %y, 1.000000e+00
  br label %return

cond.false109:                                    ; preds = %if.then103
  %sub110 = fsub double 1.000000e+00, %y
  br label %return

if.end113:                                        ; preds = %if.end99
  %cmp117 = icmp ult i32 %conv.i201, 2048
  %cmp119tmp = xor i1 %cmp105, %cmp117
  br i1 %cmp119tmp, label %cond.false123, label %cond.true121

cond.true121:                                     ; preds = %if.end113
  %call122 = tail call double @__math_oflow(i32 0) #8
  br label %return

cond.false123:                                    ; preds = %if.end113
  %call124 = tail call double @__math_uflow(i32 0) #8
  br label %return

if.end127:                                        ; preds = %if.end89
  %cmp128 = icmp eq i32 %topx.0, 0
  br i1 %cmp128, label %if.then130, label %if.end136

if.then130:                                       ; preds = %if.end127
  %mul131 = fmul double %x, 0x4330000000000000
  %4 = bitcast double %mul131 to i64
  %and133 = and i64 %4, 9223372036854775807
  %sub134 = add nsw i64 %and133, -234187180623265792
  br label %if.end136

if.end136:                                        ; preds = %if.then130, %if.end127, %lor.rhs
  %ix.1 = phi i64 [ %sub134, %if.then130 ], [ %ix.0, %if.end127 ], [ %0, %lor.rhs ]
  %sign_bias.2 = phi i32 [ %sign_bias.1, %if.then130 ], [ %sign_bias.1, %if.end127 ], [ 0, %lor.rhs ]
  %sub.i202 = add i64 %ix.1, -4604531861337669632
  %shr.i203 = lshr i64 %sub.i202, 45
  %shr.tr.i = trunc i64 %shr.i203 to i32
  %conv.i204 = and i32 %shr.tr.i, 127
  %shr3.i = ashr i64 %sub.i202, 52
  %conv4.i = trunc i64 %shr3.i to i32
  %and.i205 = and i64 %sub.i202, -4503599627370496
  %sub5.i = sub i64 %ix.1, %and.i205
  %5 = bitcast i64 %sub5.i to double
  %conv6.i = sitofp i32 %conv4.i to double
  %invc7.i = getelementptr inbounds %struct.pow_log_data* @__pow_log_data, i32 0, i32 3, i32 %conv.i204, i32 0
  %6 = load double* %invc7.i, align 4, !tbaa !456
  %logc9.i = getelementptr inbounds %struct.pow_log_data* @__pow_log_data, i32 0, i32 3, i32 %conv.i204, i32 2
  %7 = load double* %logc9.i, align 4, !tbaa !458
  %logctail11.i = getelementptr inbounds %struct.pow_log_data* @__pow_log_data, i32 0, i32 3, i32 %conv.i204, i32 3
  %8 = load double* %logctail11.i, align 4, !tbaa !459
  %add.i206 = add i64 %sub5.i, 2147483648
  %and13.i = and i64 %add.i206, -4294967296
  %9 = bitcast i64 %and13.i to double
  %sub16.i = fsub double %5, %9
  %mul.i207 = fmul double %6, %9
  %sub18.i = fadd double %mul.i207, -1.000000e+00
  %mul20.i = fmul double %6, %sub16.i
  %add21.i = fadd double %mul20.i, %sub18.i
  %10 = load double* getelementptr inbounds (%struct.pow_log_data* @__pow_log_data, i32 0, i32 0), align 4, !tbaa !460
  %mul22.i = fmul double %conv6.i, %10
  %add23.i = fadd double %7, %mul22.i
  %add24.i208 = fadd double %add23.i, %add21.i
  %11 = load double* getelementptr inbounds (%struct.pow_log_data* @__pow_log_data, i32 0, i32 1), align 4, !tbaa !462
  %mul25.i = fmul double %conv6.i, %11
  %add26.i = fadd double %8, %mul25.i
  %sub27.i209 = fsub double %add23.i, %add24.i208
  %add28.i = fadd double %add21.i, %sub27.i209
  %12 = load double* getelementptr inbounds (%struct.pow_log_data* @__pow_log_data, i32 0, i32 2, i32 0), align 4, !tbaa !429
  %mul34.i = fmul double %12, %add21.i
  %mul35.i = fmul double %add21.i, %mul34.i
  %mul36.i = fmul double %add21.i, %mul35.i
  %mul38.i = fmul double %12, %sub18.i
  %mul40.i = fmul double %sub18.i, %mul38.i
  %add41.i = fadd double %add24.i208, %mul40.i
  %add42.i210 = fadd double %mul38.i, %mul34.i
  %mul43.i211 = fmul double %mul20.i, %add42.i210
  %sub44.i = fsub double %add24.i208, %add41.i
  %add45.i = fadd double %mul40.i, %sub44.i
  %13 = load double* getelementptr inbounds (%struct.pow_log_data* @__pow_log_data, i32 0, i32 2, i32 1), align 4, !tbaa !429
  %14 = load double* getelementptr inbounds (%struct.pow_log_data* @__pow_log_data, i32 0, i32 2, i32 2), align 4, !tbaa !429
  %mul46.i = fmul double %add21.i, %14
  %add47.i = fadd double %13, %mul46.i
  %15 = load double* getelementptr inbounds (%struct.pow_log_data* @__pow_log_data, i32 0, i32 2, i32 3), align 4, !tbaa !429
  %16 = load double* getelementptr inbounds (%struct.pow_log_data* @__pow_log_data, i32 0, i32 2, i32 4), align 4, !tbaa !429
  %mul48.i212 = fmul double %add21.i, %16
  %add49.i213 = fadd double %15, %mul48.i212
  %17 = load double* getelementptr inbounds (%struct.pow_log_data* @__pow_log_data, i32 0, i32 2, i32 5), align 4, !tbaa !429
  %18 = load double* getelementptr inbounds (%struct.pow_log_data* @__pow_log_data, i32 0, i32 2, i32 6), align 4, !tbaa !429
  %mul50.i214 = fmul double %add21.i, %18
  %add51.i215 = fadd double %17, %mul50.i214
  %mul52.i = fmul double %mul35.i, %add51.i215
  %add53.i = fadd double %add49.i213, %mul52.i
  %mul54.i = fmul double %mul35.i, %add53.i
  %add55.i = fadd double %add47.i, %mul54.i
  %mul56.i = fmul double %mul36.i, %add55.i
  %add57.i = fadd double %add26.i, %add28.i
  %add58.i = fadd double %mul43.i211, %add57.i
  %add59.i = fadd double %add45.i, %add58.i
  %add60.i = fadd double %add59.i, %mul56.i
  %add61.i216 = fadd double %add41.i, %add60.i
  %sub62.i = fsub double %add41.i, %add61.i216
  %add63.i = fadd double %add60.i, %sub62.i
  %and138 = and i64 %1, -134217728
  %19 = bitcast i64 %and138 to double
  %sub140 = fsub double %y, %19
  %20 = bitcast double %add61.i216 to i64
  %and142 = and i64 %20, -134217728
  %21 = bitcast i64 %and142 to double
  %sub144 = fsub double %add61.i216, %21
  %add145 = fadd double %add63.i, %sub144
  %mul146 = fmul double %19, %21
  %mul147 = fmul double %sub140, %21
  %mul148 = fmul double %add145, %y
  %add149 = fadd double %mul147, %mul148
  %22 = bitcast double %mul146 to i64
  %shr.i.i = lshr i64 %22, 52
  %conv.i.i = trunc i64 %shr.i.i to i32
  %and.i = and i32 %conv.i.i, 2047
  %sub.i = add nsw i32 %and.i, -969
  %cmp.i = icmp ult i32 %sub.i, 63
  br i1 %cmp.i, label %if.end23.i, label %if.then.i, !prof !426

if.then.i:                                        ; preds = %if.end136
  %cmp7.i = icmp slt i32 %sub.i, 0
  br i1 %cmp7.i, label %if.then9.i, label %if.end.i

if.then9.i:                                       ; preds = %if.then.i
  %add.i = fadd double %mul146, 1.000000e+00
  %tobool11.i = icmp eq i32 %sign_bias.2, 0
  br i1 %tobool11.i, label %return, label %cond.true.i

cond.true.i:                                      ; preds = %if.then9.i
  %sub12.i = fsub double -0.000000e+00, %add.i
  br label %return

if.end.i:                                         ; preds = %if.then.i
  %cmp14.i = icmp ult i32 %and.i, 1033
  br i1 %cmp14.i, label %if.end23.i, label %if.then16.i

if.then16.i:                                      ; preds = %if.end.i
  %tobool18.i = icmp slt i64 %22, 0
  br i1 %tobool18.i, label %if.then19.i, label %if.else.i

if.then19.i:                                      ; preds = %if.then16.i
  %call20.i = tail call double @__math_uflow(i32 %sign_bias.2) #8, !parents_inline !463
  br label %return

if.else.i:                                        ; preds = %if.then16.i
  %call21.i = tail call double @__math_oflow(i32 %sign_bias.2) #8, !parents_inline !463
  br label %return

if.end23.i:                                       ; preds = %if.end.i, %if.end136
  %abstop.0.i = phi i32 [ %and.i, %if.end136 ], [ 0, %if.end.i ]
  %23 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 0), align 4, !tbaa !443
  %mul.i = fmul double %mul146, %23
  %24 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 1), align 4, !tbaa !444
  %add24.i = fadd double %mul.i, %24
  %25 = bitcast double %add24.i to i64
  %sub27.i = fsub double %add24.i, %24
  %26 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 2), align 4, !tbaa !445
  %mul28.i = fmul double %26, %sub27.i
  %add29.i = fadd double %mul146, %mul28.i
  %27 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 3), align 4, !tbaa !446
  %mul30.i = fmul double %sub27.i, %27
  %add31.i = fadd double %mul30.i, %add29.i
  %add32.i = fadd double %add149, %add31.i
  %rem.i = shl i64 %25, 1
  %mul33.i = and i64 %rem.i, 254
  %conv34.i = zext i32 %sign_bias.2 to i64
  %add35.i = add i64 %25, %conv34.i
  %shl.i = shl i64 %add35.i, 45
  %idxprom.i = trunc i64 %mul33.i to i32
  %arrayidx.i = getelementptr inbounds %struct.exp_data* @__exp_data, i32 0, i32 7, i32 %idxprom.i
  %28 = load i64* %arrayidx.i, align 4, !tbaa !441
  %29 = bitcast i64 %28 to double
  %add3787.i = or i64 %mul33.i, 1
  %idxprom38.i = trunc i64 %add3787.i to i32
  %arrayidx39.i = getelementptr inbounds %struct.exp_data* @__exp_data, i32 0, i32 7, i32 %idxprom38.i
  %30 = load i64* %arrayidx39.i, align 4, !tbaa !441
  %add40.i = add i64 %30, %shl.i
  %mul41.i = fmul double %add32.i, %add32.i
  %add42.i = fadd double %29, %add32.i
  %31 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 4, i32 0), align 4, !tbaa !429
  %32 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 4, i32 1), align 4, !tbaa !429
  %mul43.i = fmul double %add32.i, %32
  %add44.i = fadd double %31, %mul43.i
  %mul45.i = fmul double %mul41.i, %add44.i
  %add46.i = fadd double %add42.i, %mul45.i
  %mul47.i = fmul double %mul41.i, %mul41.i
  %33 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 4, i32 2), align 4, !tbaa !429
  %34 = load double* getelementptr inbounds (%struct.exp_data* @__exp_data, i32 0, i32 4, i32 3), align 4, !tbaa !429
  %mul48.i = fmul double %add32.i, %34
  %add49.i = fadd double %33, %mul48.i
  %mul50.i = fmul double %mul47.i, %add49.i
  %add51.i = fadd double %add46.i, %mul50.i
  %cmp52.i = icmp eq i32 %abstop.0.i, 0
  br i1 %cmp52.i, label %if.then56.i, label %if.end58.i, !prof !418

if.then56.i:                                      ; preds = %if.end23.i
  %and.i.i = and i64 %25, 2147483648
  %cmp.i.i = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %if.then56.i
  %sub.i.i = add i64 %add40.i, -4544132024016830464
  %35 = bitcast i64 %sub.i.i to double
  %mul.i.i = fmul double %35, %add51.i
  %add.i.i = fadd double %35, %mul.i.i
  %mul3.i.i = fmul double %add.i.i, 0x7F00000000000000
  br label %return

if.end.i.i:                                       ; preds = %if.then56.i
  %add5.i.i = add i64 %add40.i, 4602678819172646912
  %36 = bitcast i64 %add5.i.i to double
  %mul7.i.i = fmul double %36, %add51.i
  %add8.i.i = fadd double %36, %mul7.i.i
  %call9.i.i = tail call double @fabs(double %add8.i.i) #8, !parents_inline !464
  %cmp10.i.i = fcmp olt double %call9.i.i, 1.000000e+00
  br i1 %cmp10.i.i, label %if.then11.i.i, label %if.end35.i.i

if.then11.i.i:                                    ; preds = %if.end.i.i
  %cmp15.i.i = fcmp olt double %add8.i.i, 0.000000e+00
  %one.0.i.i = select i1 %cmp15.i.i, double -1.000000e+00, double 1.000000e+00
  %sub18.i.i = fsub double %36, %add8.i.i
  %add20.i.i = fadd double %mul7.i.i, %sub18.i.i
  %add21.i.i = fadd double %add8.i.i, %one.0.i.i
  %sub22.i.i = fsub double %one.0.i.i, %add21.i.i
  %add23.i.i = fadd double %add8.i.i, %sub22.i.i
  %add24.i.i = fadd double %add20.i.i, %add23.i.i
  %add25.i.i = fadd double %add21.i.i, %add24.i.i
  %sub27.i.i = fsub double %add25.i.i, %one.0.i.i
  %cmp28.i.i = fcmp oeq double %sub27.i.i, 0.000000e+00
  br i1 %cmp28.i.i, label %if.then29.i.i, label %if.end32.i.i

if.then29.i.i:                                    ; preds = %if.then11.i.i
  %and30.i.i = and i64 %add5.i.i, -9223372036854775808
  %37 = bitcast i64 %and30.i.i to double
  br label %if.end32.i.i

if.end32.i.i:                                     ; preds = %if.then29.i.i, %if.then11.i.i
  %y.0.i.i = phi double [ %37, %if.then29.i.i ], [ %sub27.i.i, %if.then11.i.i ]
  %y.i60.i.i.0.y.i60.i.0.y.i60.0..sroa_cast = bitcast double* %y.i60.i.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %y.i60.i.i.0.y.i60.i.0.y.i60.0..sroa_cast)
  store volatile double 0x10000000000000, double* %y.i60.i.i, align 8, !tbaa !429
  %y.i60.i.i.0.y.i60.i.0.y.i60.0.y.0.y.0..i.i.i = load volatile double* %y.i60.i.i, align 8
  call void @llvm.lifetime.end(i64 8, i8* %y.i60.i.i.0.y.i60.i.0.y.i60.0..sroa_cast)
  %mul34.i.i = fmul double %y.i60.i.i.0.y.i60.i.0.y.i60.0.y.0.y.0..i.i.i, 0x10000000000000
  %y.i.i.i.0.y.i.i.0.y.i.0..sroa_cast = bitcast double* %y.i.i.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %y.i.i.i.0.y.i.i.0.y.i.0..sroa_cast)
  store volatile double %mul34.i.i, double* %y.i.i.i, align 8, !tbaa !429
  call void @llvm.lifetime.end(i64 8, i8* %y.i.i.i.0.y.i.i.0.y.i.0..sroa_cast)
  br label %if.end35.i.i

if.end35.i.i:                                     ; preds = %if.end32.i.i, %if.end.i.i
  %y.1.i.i = phi double [ %y.0.i.i, %if.end32.i.i ], [ %add8.i.i, %if.end.i.i ]
  %mul36.i.i = fmul double %y.1.i.i, 0x10000000000000
  br label %return

if.end58.i:                                       ; preds = %if.end23.i
  %38 = bitcast i64 %add40.i to double
  %mul60.i = fmul double %38, %add51.i
  %add61.i = fadd double %38, %mul60.i
  br label %return

return:                                           ; preds = %if.end58.i, %if.end35.i.i, %if.then.i.i, %if.else.i, %if.then19.i, %cond.true.i, %if.then9.i, %cond.false123, %cond.true121, %cond.false109, %cond.true107, %if.then94, %if.then80, %cond.true68, %if.end65, %if.end50, %if.end41, %if.end35, %if.then33, %cond.true19, %if.then16, %cond.true, %if.then11
  %retval.0 = phi double [ %add34, %if.then33 ], [ %mul51, %if.end50 ], [ %call81, %if.then80 ], [ %add, %cond.true ], [ 1.000000e+00, %if.then11 ], [ %add20, %cond.true19 ], [ 1.000000e+00, %if.then16 ], [ 1.000000e+00, %if.end35 ], [ 0.000000e+00, %if.end41 ], [ %y.i.0.y.0.y.0..i, %cond.true68 ], [ %x2.0, %if.end65 ], [ 1.000000e+00, %if.then94 ], [ %add108, %cond.true107 ], [ %sub110, %cond.false109 ], [ %call122, %cond.true121 ], [ %call124, %cond.false123 ], [ %call20.i, %if.then19.i ], [ %call21.i, %if.else.i ], [ %add61.i, %if.end58.i ], [ %sub12.i, %cond.true.i ], [ %add.i, %if.then9.i ], [ %mul3.i.i, %if.then.i.i ], [ %mul36.i.i, %if.end35.i.i ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @asinh(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %add = fadd double %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp ult i32 %and, 1043333120
  %add3 = fadd double %x, 1.000000e+300
  %cmp4 = fcmp ogt double %add3, 1.000000e+00
  %or.cond = and i1 %cmp1, %cmp4
  br i1 %or.cond, label %return, label %if.end7

if.end7:                                          ; preds = %if.end
  %cmp8 = icmp ugt i32 %and, 1102053376
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end7
  %call = tail call double @fabs(double %x) #8
  %call10 = tail call double @log(double %call) #8
  %add11 = fadd double %call10, 0x3FE62E42FEFA39EF
  br label %if.end31

if.else:                                          ; preds = %if.end7
  %cmp12 = icmp ugt i32 %and, 1073741824
  br i1 %cmp12, label %if.then13, label %if.else21

if.then13:                                        ; preds = %if.else
  %call14 = tail call double @fabs(double %x) #8
  %mul = fmul double %call14, 2.000000e+00
  %mul15 = fmul double %x, %x
  %add16 = fadd double %mul15, 1.000000e+00
  %call17 = tail call double @__ieee754_sqrt(double %add16) #8
  %add18 = fadd double %call14, %call17
  %div = fdiv double 1.000000e+00, %add18
  %add19 = fadd double %mul, %div
  %call20 = tail call double @log(double %add19) #8
  br label %if.end31

if.else21:                                        ; preds = %if.else
  %mul22 = fmul double %x, %x
  %call23 = tail call double @fabs(double %x) #8
  %add24 = fadd double %mul22, 1.000000e+00
  %call25 = tail call double @__ieee754_sqrt(double %add24) #8
  %add26 = fadd double %call25, 1.000000e+00
  %div27 = fdiv double %mul22, %add26
  %add28 = fadd double %call23, %div27
  %call29 = tail call double @log1p(double %add28) #8
  br label %if.end31

if.end31:                                         ; preds = %if.else21, %if.then13, %if.then9
  %w.0 = phi double [ %add11, %if.then9 ], [ %call20, %if.then13 ], [ %call29, %if.else21 ]
  %cmp32 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp32, label %return, label %if.else34

if.else34:                                        ; preds = %if.end31
  %sub = fsub double -0.000000e+00, %w.0
  br label %return

return:                                           ; preds = %if.else34, %if.end31, %if.end, %if.then
  %retval.0 = phi double [ %add, %if.then ], [ %sub, %if.else34 ], [ %x, %if.end ], [ %w.0, %if.end31 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @atan(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 1141899263
  br i1 %cmp, label %do.body1, label %if.end13

do.body1:                                         ; preds = %entry
  %cmp5 = icmp ugt i32 %and, 2146435072
  br i1 %cmp5, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body1
  %gl_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %cmp6 = icmp eq i32 %and, 2146435072
  %cmp7 = icmp ne i32 %gl_u.sroa.0.0.extract.trunc, 0
  %or.cond = and i1 %cmp6, %cmp7
  br i1 %or.cond, label %if.then8, label %if.end

if.then8:                                         ; preds = %lor.lhs.false, %do.body1
  %add = fadd double %x, %x
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %cmp9 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, 0
  %. = select i1 %cmp9, double 0x3FF921FB54442D18, double 0xBFF921FB54442D18
  br label %return

if.end13:                                         ; preds = %entry
  %cmp14 = icmp ult i32 %and, 1071382528
  br i1 %cmp14, label %if.then15, label %if.else23

if.then15:                                        ; preds = %if.end13
  %cmp16 = icmp ult i32 %and, 1042284544
  %add18 = fadd double %x, 1.000000e+300
  %cmp19 = fcmp ogt double %add18, 1.000000e+00
  %or.cond126 = and i1 %cmp16, %cmp19
  br i1 %or.cond126, label %return, label %if.end46

if.else23:                                        ; preds = %if.end13
  %call = tail call double @fabs(double %x) #8
  %cmp24 = icmp ult i32 %and, 1072889856
  br i1 %cmp24, label %if.then25, label %if.else35

if.then25:                                        ; preds = %if.else23
  %cmp26 = icmp ult i32 %and, 1072037888
  br i1 %cmp26, label %if.then27, label %if.else30

if.then27:                                        ; preds = %if.then25
  %mul = fmul double %call, 2.000000e+00
  %sub28 = fadd double %mul, -1.000000e+00
  %add29 = fadd double %call, 2.000000e+00
  %div = fdiv double %sub28, %add29
  br label %if.end46

if.else30:                                        ; preds = %if.then25
  %sub31 = fadd double %call, -1.000000e+00
  %add32 = fadd double %call, 1.000000e+00
  %div33 = fdiv double %sub31, %add32
  br label %if.end46

if.else35:                                        ; preds = %if.else23
  %cmp36 = icmp ult i32 %and, 1073971200
  br i1 %cmp36, label %if.then37, label %if.else42

if.then37:                                        ; preds = %if.else35
  %sub38 = fadd double %call, -1.500000e+00
  %mul39 = fmul double %call, 1.500000e+00
  %add40 = fadd double %mul39, 1.000000e+00
  %div41 = fdiv double %sub38, %add40
  br label %if.end46

if.else42:                                        ; preds = %if.else35
  %div43 = fdiv double -1.000000e+00, %call
  br label %if.end46

if.end46:                                         ; preds = %if.else42, %if.then37, %if.else30, %if.then27, %if.then15
  %id.0 = phi i32 [ 0, %if.then27 ], [ 1, %if.else30 ], [ 2, %if.then37 ], [ 3, %if.else42 ], [ -1, %if.then15 ]
  %x.addr.0 = phi double [ %div, %if.then27 ], [ %div33, %if.else30 ], [ %div41, %if.then37 ], [ %div43, %if.else42 ], [ %x, %if.then15 ]
  %mul47 = fmul double %x.addr.0, %x.addr.0
  %mul48 = fmul double %mul47, %mul47
  %mul49 = fmul double %mul48, 0x3F90AD3AE322DA11
  %add50 = fadd double %mul49, 0x3FA97B4B24760DEB
  %mul51 = fmul double %mul48, %add50
  %add52 = fadd double %mul51, 0x3FB10D66A0D03D51
  %mul53 = fmul double %mul48, %add52
  %add54 = fadd double %mul53, 0x3FB745CDC54C206E
  %mul55 = fmul double %mul48, %add54
  %add56 = fadd double %mul55, 0x3FC24924920083FF
  %mul57 = fmul double %mul48, %add56
  %add58 = fadd double %mul57, 0x3FD555555555550D
  %mul59 = fmul double %mul47, %add58
  %mul60 = fmul double %mul48, 0xBFA2B4442C6A6C2F
  %add61 = fadd double %mul60, 0xBFADDE2D52DEFD9A
  %mul62 = fmul double %mul48, %add61
  %add63 = fadd double %mul62, 0xBFB3B0F2AF749A6D
  %mul64 = fmul double %mul48, %add63
  %add65 = fadd double %mul64, 0xBFBC71C6FE231671
  %mul66 = fmul double %mul48, %add65
  %add67 = fadd double %mul66, 0xBFC999999998EBC4
  %mul68 = fmul double %mul48, %add67
  %cmp69 = icmp slt i32 %id.0, 0
  br i1 %cmp69, label %if.then70, label %if.else74

if.then70:                                        ; preds = %if.end46
  %add71 = fadd double %mul68, %mul59
  %mul72 = fmul double %x.addr.0, %add71
  %sub73 = fsub double %x.addr.0, %mul72
  br label %return

if.else74:                                        ; preds = %if.end46
  %arrayidx = getelementptr inbounds [4 x double]* @atanhi, i32 0, i32 %id.0
  %1 = load double* %arrayidx, align 8, !tbaa !429
  %add75 = fadd double %mul68, %mul59
  %mul76 = fmul double %x.addr.0, %add75
  %arrayidx77 = getelementptr inbounds [4 x double]* @atanlo, i32 0, i32 %id.0
  %2 = load double* %arrayidx77, align 8, !tbaa !429
  %sub78 = fsub double %mul76, %2
  %sub79 = fsub double %sub78, %x.addr.0
  %sub80 = fsub double %1, %sub79
  %cmp81 = icmp slt i32 %gh_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp81, label %cond.true, label %return

cond.true:                                        ; preds = %if.else74
  %sub82 = fsub double -0.000000e+00, %sub80
  br label %return

return:                                           ; preds = %cond.true, %if.else74, %if.then70, %if.then15, %if.end, %if.then8
  %retval.0 = phi double [ %add, %if.then8 ], [ %sub73, %if.then70 ], [ %., %if.end ], [ %x, %if.then15 ], [ %sub82, %cond.true ], [ %sub80, %if.else74 ]
  ret double %retval.0
}

; Function Attrs: nounwind readnone
define double @cbrt(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, -2147483648
  %xor = xor i32 %and, %gh_u.sroa.0.4.extract.trunc
  %cmp = icmp sgt i32 %xor, 2146435071
  br i1 %cmp, label %if.then, label %do.body1

if.then:                                          ; preds = %entry
  %add = fadd double %x, %x
  br label %return

do.body1:                                         ; preds = %entry
  %gl_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %or = or i32 %xor, %gl_u.sroa.0.0.extract.trunc
  %cmp5 = icmp eq i32 %or, 0
  br i1 %cmp5, label %return, label %do.body8

do.body8:                                         ; preds = %do.body1
  %sh_u.sroa.0.4.insert.ext = zext i32 %xor to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %0, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %1 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  %cmp14 = icmp slt i32 %xor, 1048576
  br i1 %cmp14, label %do.body16, label %do.body37

do.body16:                                        ; preds = %do.body8
  %mul = fmul double %1, 0x4350000000000000
  %2 = bitcast double %mul to i64
  %gh_u24.sroa.0.4.extract.shift = lshr i64 %2, 32
  %gh_u24.sroa.0.4.extract.trunc = trunc i64 %gh_u24.sroa.0.4.extract.shift to i32
  %div = udiv i32 %gh_u24.sroa.0.4.extract.trunc, 3
  %add32 = add nuw i32 %div, 696219795
  %sh_u30.sroa.0.4.insert.ext = zext i32 %add32 to i64
  %sh_u30.sroa.0.4.insert.shift = shl nuw i64 %sh_u30.sroa.0.4.insert.ext, 32
  %sh_u30.sroa.0.4.insert.mask = and i64 %2, 4294967295
  %sh_u30.sroa.0.4.insert.insert = or i64 %sh_u30.sroa.0.4.insert.shift, %sh_u30.sroa.0.4.insert.mask
  br label %if.end46

do.body37:                                        ; preds = %do.body8
  %div40 = sdiv i32 %xor, 3
  %add41 = add i32 %div40, 715094163
  %sh_u38.sroa.0.4.insert.ext = zext i32 %add41 to i64
  %sh_u38.sroa.0.4.insert.shift = shl nuw i64 %sh_u38.sroa.0.4.insert.ext, 32
  br label %if.end46

if.end46:                                         ; preds = %do.body37, %do.body16
  %t.0.in = phi i64 [ %sh_u30.sroa.0.4.insert.insert, %do.body16 ], [ %sh_u38.sroa.0.4.insert.shift, %do.body37 ]
  %t.0 = bitcast i64 %t.0.in to double
  %mul47 = fmul double %t.0, %t.0
  %div48 = fdiv double %mul47, %1
  %mul49 = fmul double %div48, %t.0
  %add50 = fadd double %mul49, 0x3FE15F15F15F15F1
  %add51 = fadd double %add50, 0x3FF6A0EA0EA0EA0F
  %div52 = fdiv double 0xBFE691DE2532C834, %add50
  %add53 = fadd double %div52, %add51
  %div54 = fdiv double 0x3FF9B6DB6DB6DB6E, %add53
  %add55 = fadd double %div54, 0x3FD6DB6DB6DB6DB7
  %mul56 = fmul double %t.0, %add55
  %3 = bitcast double %mul56 to i64
  %gh_u58.sroa.0.4.extract.shift = lshr i64 %3, 32
  %gh_u58.sroa.0.4.extract.trunc = trunc i64 %gh_u58.sroa.0.4.extract.shift to i32
  %add64 = add i32 %gh_u58.sroa.0.4.extract.trunc, 1
  %iw_u.sroa.0.4.insert.ext = zext i32 %add64 to i64
  %iw_u.sroa.0.4.insert.shift = shl nuw i64 %iw_u.sroa.0.4.insert.ext, 32
  %4 = bitcast i64 %iw_u.sroa.0.4.insert.shift to double
  %mul71 = fmul double %4, %4
  %div72 = fdiv double %1, %mul71
  %add73 = fadd double %4, %4
  %sub = fsub double %div72, %4
  %add74 = fadd double %div72, %add73
  %div75 = fdiv double %sub, %add74
  %mul76 = fmul double %div75, %4
  %add77 = fadd double %4, %mul76
  %5 = bitcast double %add77 to i64
  %gh_u79.sroa.0.4.extract.shift = lshr i64 %5, 32
  %gh_u79.sroa.0.4.extract.trunc = trunc i64 %gh_u79.sroa.0.4.extract.shift to i32
  %or87 = or i32 %gh_u79.sroa.0.4.extract.trunc, %and
  %sh_u85.sroa.0.4.insert.ext = zext i32 %or87 to i64
  %sh_u85.sroa.0.4.insert.shift = shl nuw i64 %sh_u85.sroa.0.4.insert.ext, 32
  %sh_u85.sroa.0.4.insert.mask = and i64 %5, 4294967295
  %sh_u85.sroa.0.4.insert.insert = or i64 %sh_u85.sroa.0.4.insert.shift, %sh_u85.sroa.0.4.insert.mask
  %6 = bitcast i64 %sh_u85.sroa.0.4.insert.insert to double
  br label %return

return:                                           ; preds = %if.end46, %do.body1, %if.then
  %retval.0 = phi double [ %add, %if.then ], [ %6, %if.end46 ], [ %x, %do.body1 ]
  ret double %retval.0
}

; Function Attrs: nounwind readnone
define double @ceil(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %shr105106 = lshr i64 %0, 52
  %shr105 = trunc i64 %shr105106 to i32
  %and = and i32 %shr105, 2047
  %sub = add nsw i32 %and, -1023
  %cmp = icmp slt i32 %sub, 20
  br i1 %cmp, label %if.then, label %if.else30

if.then:                                          ; preds = %entry
  %cmp2 = icmp slt i32 %sub, 0
  br i1 %cmp2, label %if.then3, label %if.else12

if.then3:                                         ; preds = %if.then
  %add = fadd double %x, 1.000000e+300
  %cmp4 = fcmp ogt double %add, 0.000000e+00
  br i1 %cmp4, label %if.then5, label %do.body66

if.then5:                                         ; preds = %if.then3
  %cmp6 = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp6, label %do.body66, label %if.else

if.else:                                          ; preds = %if.then5
  %or108 = or i64 %ew_u.sroa.0.4.extract.shift, %0
  %or = trunc i64 %or108 to i32
  %cmp8 = icmp eq i32 %or, 0
  %ew_u.sroa.0.0.extract.trunc. = select i1 %cmp8, i32 %ew_u.sroa.0.0.extract.trunc, i32 0
  %ew_u.sroa.0.4.extract.trunc. = select i1 %cmp8, i32 %ew_u.sroa.0.4.extract.trunc, i32 1072693248
  br label %do.body66

if.else12:                                        ; preds = %if.then
  %shr13 = lshr i32 1048575, %sub
  %and14 = and i32 %shr13, %ew_u.sroa.0.4.extract.trunc
  %or15 = or i32 %and14, %ew_u.sroa.0.0.extract.trunc
  %cmp16 = icmp eq i32 %or15, 0
  br i1 %cmp16, label %return, label %if.end18

if.end18:                                         ; preds = %if.else12
  %add19 = fadd double %x, 1.000000e+300
  %cmp20 = fcmp ogt double %add19, 0.000000e+00
  br i1 %cmp20, label %if.then21, label %do.body66

if.then21:                                        ; preds = %if.end18
  %cmp22 = icmp sgt i32 %ew_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp22, label %if.then23, label %if.end26

if.then23:                                        ; preds = %if.then21
  %shr24 = lshr i32 1048576, %sub
  %add25 = add nsw i32 %shr24, %ew_u.sroa.0.4.extract.trunc
  br label %if.end26

if.end26:                                         ; preds = %if.then23, %if.then21
  %i0.0 = phi i32 [ %add25, %if.then23 ], [ %ew_u.sroa.0.4.extract.trunc, %if.then21 ]
  %neg = xor i32 %shr13, -1
  %and27 = and i32 %i0.0, %neg
  br label %do.body66

if.else30:                                        ; preds = %entry
  %cmp31 = icmp sgt i32 %sub, 51
  br i1 %cmp31, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else30
  %cmp33 = icmp eq i32 %sub, 1024
  br i1 %cmp33, label %if.then34, label %return

if.then34:                                        ; preds = %if.then32
  %add35 = fadd double %x, %x
  br label %return

if.else37:                                        ; preds = %if.else30
  %sub38 = add nsw i32 %and, -1043
  %shr39 = lshr i32 -1, %sub38
  %and40 = and i32 %shr39, %ew_u.sroa.0.0.extract.trunc
  %cmp41 = icmp eq i32 %and40, 0
  br i1 %cmp41, label %return, label %if.end43

if.end43:                                         ; preds = %if.else37
  %add44 = fadd double %x, 1.000000e+300
  %cmp45 = fcmp ogt double %add44, 0.000000e+00
  br i1 %cmp45, label %if.then46, label %do.body66

if.then46:                                        ; preds = %if.end43
  %cmp47 = icmp sgt i32 %ew_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp47, label %if.then48, label %if.end60

if.then48:                                        ; preds = %if.then46
  %cmp49 = icmp eq i32 %sub, 20
  br i1 %cmp49, label %if.then50, label %if.else52

if.then50:                                        ; preds = %if.then48
  %add51 = add nsw i32 %ew_u.sroa.0.4.extract.trunc, 1
  br label %if.end60

if.else52:                                        ; preds = %if.then48
  %sub53 = sub i32 1075, %and
  %shl = shl i32 1, %sub53
  %uadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %ew_u.sroa.0.0.extract.trunc, i32 %shl)
  %1 = extractvalue { i32, i1 } %uadd, 0
  %cmp55 = extractvalue { i32, i1 } %uadd, 1
  %add57 = zext i1 %cmp55 to i32
  %add57.ew_u.sroa.0.4.extract.trunc = add nsw i32 %add57, %ew_u.sroa.0.4.extract.trunc
  br label %if.end60

if.end60:                                         ; preds = %if.else52, %if.then50, %if.then46
  %i1.0 = phi i32 [ %ew_u.sroa.0.0.extract.trunc, %if.then50 ], [ %1, %if.else52 ], [ %ew_u.sroa.0.0.extract.trunc, %if.then46 ]
  %i0.2 = phi i32 [ %add51, %if.then50 ], [ %add57.ew_u.sroa.0.4.extract.trunc, %if.else52 ], [ %ew_u.sroa.0.4.extract.trunc, %if.then46 ]
  %neg61 = xor i32 %shr39, -1
  %and62 = and i32 %i1.0, %neg61
  br label %do.body66

do.body66:                                        ; preds = %if.end60, %if.end43, %if.end26, %if.end18, %if.else, %if.then5, %if.then3
  %i1.1 = phi i32 [ %ew_u.sroa.0.0.extract.trunc, %if.then3 ], [ 0, %if.end26 ], [ %ew_u.sroa.0.0.extract.trunc, %if.end18 ], [ %and62, %if.end60 ], [ %ew_u.sroa.0.0.extract.trunc, %if.end43 ], [ 0, %if.then5 ], [ %ew_u.sroa.0.0.extract.trunc., %if.else ]
  %i0.3 = phi i32 [ %ew_u.sroa.0.4.extract.trunc, %if.then3 ], [ %and27, %if.end26 ], [ %ew_u.sroa.0.4.extract.trunc, %if.end18 ], [ %i0.2, %if.end60 ], [ %ew_u.sroa.0.4.extract.trunc, %if.end43 ], [ -2147483648, %if.then5 ], [ %ew_u.sroa.0.4.extract.trunc., %if.else ]
  %iw_u.sroa.0.4.insert.ext = zext i32 %i0.3 to i64
  %iw_u.sroa.0.4.insert.shift = shl nuw i64 %iw_u.sroa.0.4.insert.ext, 32
  %iw_u.sroa.0.0.insert.ext = zext i32 %i1.1 to i64
  %iw_u.sroa.0.0.insert.insert = or i64 %iw_u.sroa.0.4.insert.shift, %iw_u.sroa.0.0.insert.ext
  %2 = bitcast i64 %iw_u.sroa.0.0.insert.insert to double
  br label %return

return:                                           ; preds = %do.body66, %if.else37, %if.then34, %if.then32, %if.else12
  %retval.0 = phi double [ %2, %do.body66 ], [ %add35, %if.then34 ], [ %x, %if.else12 ], [ %x, %if.then32 ], [ %x, %if.else37 ]
  ret double %retval.0
}

; Function Attrs: nounwind readnone
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #1

; Function Attrs: nounwind readnone
define double @copysign(double %x, double %y) #3 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %1 = bitcast double %y to i64
  %gh_u2.sroa.0.4.extract.shift = lshr i64 %1, 32
  %gh_u2.sroa.0.4.extract.trunc = trunc i64 %gh_u2.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %and9 = and i32 %gh_u2.sroa.0.4.extract.trunc, -2147483648
  %or = or i32 %and9, %and
  %sh_u.sroa.0.4.insert.ext = zext i32 %or to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %0, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %2 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  ret double %2
}

; Function Attrs: nounwind
define double @cos(double %x) #2 {
entry:
  %y = alloca [2 x double], align 8
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ult i32 %and, 1072243196
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = tail call double @__kernel_cos(double %x, double 0.000000e+00) #8
  br label %return

if.else:                                          ; preds = %entry
  %cmp1 = icmp ugt i32 %and, 2146435071
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  %sub = fsub double %x, %x
  br label %return

if.else3:                                         ; preds = %if.else
  %arraydecay = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %call4 = call i32 @__ieee754_rem_pio2(double %x, double* %arraydecay) #8
  %and5 = and i32 %call4, 3
  switch i32 %and5, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb8
    i32 2, label %sw.bb13
  ]

sw.bb:                                            ; preds = %if.else3
  %1 = load double* %arraydecay, align 8, !tbaa !429
  %arrayidx6 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %2 = load double* %arrayidx6, align 8, !tbaa !429
  %call7 = call double @__kernel_cos(double %1, double %2) #8
  br label %return

sw.bb8:                                           ; preds = %if.else3
  %3 = load double* %arraydecay, align 8, !tbaa !429
  %arrayidx10 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %4 = load double* %arrayidx10, align 8, !tbaa !429
  %call11 = call double @__kernel_sin(double %3, double %4, i32 1) #8
  %sub12 = fsub double -0.000000e+00, %call11
  br label %return

sw.bb13:                                          ; preds = %if.else3
  %5 = load double* %arraydecay, align 8, !tbaa !429
  %arrayidx15 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %6 = load double* %arrayidx15, align 8, !tbaa !429
  %call16 = call double @__kernel_cos(double %5, double %6) #8
  %sub17 = fsub double -0.000000e+00, %call16
  br label %return

sw.default:                                       ; preds = %if.else3
  %7 = load double* %arraydecay, align 8, !tbaa !429
  %arrayidx19 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %8 = load double* %arrayidx19, align 8, !tbaa !429
  %call20 = call double @__kernel_sin(double %7, double %8, i32 1) #8
  br label %return

return:                                           ; preds = %sw.default, %sw.bb13, %sw.bb8, %sw.bb, %if.then2, %if.then
  %retval.0 = phi double [ %call, %if.then ], [ %sub, %if.then2 ], [ %call20, %sw.default ], [ %sub17, %sw.bb13 ], [ %sub12, %sw.bb8 ], [ %call7, %sw.bb ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @erf(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = lshr i64 %0, 62
  %.tr = trunc i64 %1 to i32
  %shl = and i32 %.tr, 2
  %sub = sub nsw i32 1, %shl
  %conv = sitofp i32 %sub to double
  %div = fdiv double 1.000000e+00, %x
  %add = fadd double %conv, %div
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp ult i32 %and, 1072365568
  br i1 %cmp1, label %if.then3, label %if.end39

if.then3:                                         ; preds = %if.end
  %cmp4 = icmp ult i32 %and, 1043333120
  br i1 %cmp4, label %if.then6, label %if.end16

if.then6:                                         ; preds = %if.then3
  %cmp7 = icmp ult i32 %and, 8388608
  br i1 %cmp7, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.then6
  %mul = fmul double %x, 8.000000e+00
  %mul10 = fmul double %x, 0x3FF06EBA8214DB69
  %add11 = fadd double %mul, %mul10
  %mul12 = fmul double %add11, 1.250000e-01
  br label %return

if.end13:                                         ; preds = %if.then6
  %mul14 = fmul double %x, 0x3FC06EBA8214DB69
  %add15 = fadd double %mul14, %x
  br label %return

if.end16:                                         ; preds = %if.then3
  %mul17 = fmul double %x, %x
  %mul18 = fmul double %mul17, 0xBEF8EAD6120016AC
  %add19 = fadd double %mul18, 0xBF77A291236668E4
  %mul20 = fmul double %mul17, %add19
  %add21 = fadd double %mul20, 0xBF9D2A51DBD7194F
  %mul22 = fmul double %mul17, %add21
  %add23 = fadd double %mul22, 0xBFD4CD7D691CB913
  %mul24 = fmul double %mul17, %add23
  %add25 = fadd double %mul24, 0x3FC06EBA8214DB68
  %mul26 = fmul double %mul17, 0xBED09C4342A26120
  %add27 = fadd double %mul26, 0x3F215DC9221C1A10
  %mul28 = fmul double %mul17, %add27
  %add29 = fadd double %mul28, 0x3F74D022C4D36B0F
  %mul30 = fmul double %mul17, %add29
  %add31 = fadd double %mul30, 0x3FB0A54C5536CEBA
  %mul32 = fmul double %mul17, %add31
  %add33 = fadd double %mul32, 0x3FD97779CDDADC09
  %mul34 = fmul double %mul17, %add33
  %add35 = fadd double %mul34, 1.000000e+00
  %div36 = fdiv double %add25, %add35
  %mul37 = fmul double %div36, %x
  %add38 = fadd double %mul37, %x
  br label %return

if.end39:                                         ; preds = %if.end
  %cmp40 = icmp ult i32 %and, 1072955392
  br i1 %cmp40, label %if.then42, label %if.end75

if.then42:                                        ; preds = %if.end39
  %call = tail call double @fabs(double %x) #8
  %sub43 = fadd double %call, -1.000000e+00
  %mul44 = fmul double %sub43, 0xBF61BF380A96073F
  %add45 = fadd double %mul44, 0x3FA22A36599795EB
  %mul46 = fmul double %sub43, %add45
  %add47 = fadd double %mul46, 0xBFBC63983D3E28EC
  %mul48 = fmul double %sub43, %add47
  %add49 = fadd double %mul48, 0x3FD45FCA805120E4
  %mul50 = fmul double %sub43, %add49
  %add51 = fadd double %mul50, 0xBFD7D240FBB8C3F1
  %mul52 = fmul double %sub43, %add51
  %add53 = fadd double %mul52, 0x3FDA8D00AD92B34D
  %mul54 = fmul double %sub43, %add53
  %add55 = fadd double %mul54, 0xBF6359B8BEF77538
  %mul56 = fmul double %sub43, 0x3F888B545735151D
  %add57 = fadd double %mul56, 0x3F8BEDC26B51DD1C
  %mul58 = fmul double %sub43, %add57
  %add59 = fadd double %mul58, 0x3FC02660E763351F
  %mul60 = fmul double %sub43, %add59
  %add61 = fadd double %mul60, 0x3FB2635CD99FE9A7
  %mul62 = fmul double %sub43, %add61
  %add63 = fadd double %mul62, 0x3FE14AF092EB6F33
  %mul64 = fmul double %sub43, %add63
  %add65 = fadd double %mul64, 0x3FBB3E6618EEE323
  %mul66 = fmul double %sub43, %add65
  %add67 = fadd double %mul66, 1.000000e+00
  %cmp68 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, -1
  %div71 = fdiv double %add55, %add67
  br i1 %cmp68, label %if.then70, label %if.else

if.then70:                                        ; preds = %if.then42
  %add72 = fadd double %div71, 0x3FEB0AC160000000
  br label %return

if.else:                                          ; preds = %if.then42
  %sub74 = fsub double 0xBFEB0AC160000000, %div71
  br label %return

if.end75:                                         ; preds = %if.end39
  %cmp76 = icmp ugt i32 %and, 1075314687
  br i1 %cmp76, label %if.then78, label %if.end83

if.then78:                                        ; preds = %if.end75
  %cmp79 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, -1
  %. = select i1 %cmp79, double 1.000000e+00, double -1.000000e+00
  br label %return

if.end83:                                         ; preds = %if.end75
  %call84 = tail call double @fabs(double %x) #8
  %mul85 = fmul double %call84, %call84
  %div86 = fdiv double 1.000000e+00, %mul85
  %cmp87 = icmp ult i32 %and, 1074191214
  br i1 %cmp87, label %if.then89, label %if.else120

if.then89:                                        ; preds = %if.end83
  %mul90 = fmul double %div86, 0xC023A0EFC69AC25C
  %add91 = fadd double %mul90, 0xC054526557E4D2F2
  %mul92 = fmul double %div86, %add91
  %add93 = fadd double %mul92, 0xC067135CEBCCABB2
  %mul94 = fmul double %div86, %add93
  %add95 = fadd double %mul94, 0xC0644CB184282266
  %mul96 = fmul double %div86, %add95
  %add97 = fadd double %mul96, 0xC04F300AE4CBA38D
  %mul98 = fmul double %div86, %add97
  %add99 = fadd double %mul98, 0xC0251E0441B0E726
  %mul100 = fmul double %div86, %add99
  %add101 = fadd double %mul100, 0xBFE63416E4BA7360
  %mul102 = fmul double %div86, %add101
  %add103 = fadd double %mul102, 0xBF843412600D6435
  %mul104 = fmul double %div86, 0xBFAEEFF2EE749A62
  %add105 = fadd double %mul104, 0x401A47EF8E484A93
  %mul106 = fmul double %div86, %add105
  %add107 = fadd double %mul106, 0x405B28A3EE48AE2C
  %mul108 = fmul double %div86, %add107
  %add109 = fadd double %mul108, 0x407AD02157700314
  %mul110 = fmul double %div86, %add109
  %add111 = fadd double %mul110, 0x40842B1921EC2868
  %mul112 = fmul double %div86, %add111
  %add113 = fadd double %mul112, 0x407B290DD58A1A71
  %mul114 = fmul double %div86, %add113
  %add115 = fadd double %mul114, 0x4061350C526AE721
  %mul116 = fmul double %div86, %add115
  %add117 = fadd double %mul116, 0x4033A6B9BD707687
  br label %if.end147

if.else120:                                       ; preds = %if.end83
  %mul121 = fmul double %div86, 0xC07E384E9BDC383F
  %add122 = fadd double %mul121, 0xC09004616A2E5992
  %mul123 = fmul double %div86, %add122
  %add124 = fadd double %mul123, 0xC083EC881375F228
  %mul125 = fmul double %div86, %add124
  %add126 = fadd double %mul125, 0xC064145D43C5ED98
  %mul127 = fmul double %div86, %add126
  %add128 = fadd double %mul127, 0xC031C209555F995A
  %mul129 = fmul double %div86, %add128
  %add130 = fadd double %mul129, 0xBFE993BA70C285DE
  %mul131 = fmul double %div86, %add130
  %add132 = fadd double %mul131, 0xBF84341239E86F4A
  %mul133 = fmul double %div86, 0xC03670E242712D62
  %add134 = fadd double %mul133, 0x407DA874E79FE763
  %mul135 = fmul double %div86, %add134
  %add136 = fadd double %mul135, 0x40A3F219CEDF3BE6
  %mul137 = fmul double %div86, %add136
  %add138 = fadd double %mul137, 0x40A8FFB7688C246A
  %mul139 = fmul double %div86, %add138
  %add140 = fadd double %mul139, 0x409802EB189D5118
  %mul141 = fmul double %div86, %add140
  %add142 = fadd double %mul141, 0x40745CAE221B9F0A
  %mul143 = fmul double %div86, %add142
  %add144 = fadd double %mul143, 0x403E568B261D5190
  br label %if.end147

if.end147:                                        ; preds = %if.else120, %if.then89
  %add117.pn = phi double [ %add117, %if.then89 ], [ %add144, %if.else120 ]
  %R.0 = phi double [ %add103, %if.then89 ], [ %add132, %if.else120 ]
  %S.0.in = fmul double %div86, %add117.pn
  %S.0 = fadd double %S.0.in, 1.000000e+00
  %2 = bitcast double %call84 to i64
  %sl_u.sroa.0.0.insert.mask = and i64 %2, -4294967296
  %3 = bitcast i64 %sl_u.sroa.0.0.insert.mask to double
  %4 = fmul double %3, %3
  %sub155 = fsub double -5.625000e-01, %4
  %call156 = tail call double @exp(double %sub155) #8
  %sub157 = fsub double %3, %call84
  %add158 = fadd double %call84, %3
  %mul159 = fmul double %sub157, %add158
  %div160 = fdiv double %R.0, %S.0
  %add161 = fadd double %mul159, %div160
  %call162 = tail call double @exp(double %add161) #8
  %mul163 = fmul double %call156, %call162
  %cmp164 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, -1
  %div167 = fdiv double %mul163, %call84
  br i1 %cmp164, label %if.then166, label %if.else169

if.then166:                                       ; preds = %if.end147
  %sub168 = fsub double 1.000000e+00, %div167
  br label %return

if.else169:                                       ; preds = %if.end147
  %sub171 = fadd double %div167, -1.000000e+00
  br label %return

return:                                           ; preds = %if.else169, %if.then166, %if.then78, %if.else, %if.then70, %if.end16, %if.end13, %if.then9, %if.then
  %retval.0 = phi double [ %add, %if.then ], [ %mul12, %if.then9 ], [ %add15, %if.end13 ], [ %add38, %if.end16 ], [ %add72, %if.then70 ], [ %sub74, %if.else ], [ %sub168, %if.then166 ], [ %sub171, %if.else169 ], [ %., %if.then78 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @erfc(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = lshr i64 %0, 62
  %.tr = trunc i64 %1 to i32
  %shl = and i32 %.tr, 2
  %conv = uitofp i32 %shl to double
  %div = fdiv double 1.000000e+00, %x
  %add = fadd double %conv, %div
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp ult i32 %and, 1072365568
  br i1 %cmp1, label %if.then3, label %if.end37

if.then3:                                         ; preds = %if.end
  %cmp4 = icmp ult i32 %and, 1013972992
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.then3
  %sub = fsub double 1.000000e+00, %x
  br label %return

if.end7:                                          ; preds = %if.then3
  %mul = fmul double %x, %x
  %mul8 = fmul double %mul, 0xBEF8EAD6120016AC
  %add9 = fadd double %mul8, 0xBF77A291236668E4
  %mul10 = fmul double %mul, %add9
  %add11 = fadd double %mul10, 0xBF9D2A51DBD7194F
  %mul12 = fmul double %mul, %add11
  %add13 = fadd double %mul12, 0xBFD4CD7D691CB913
  %mul14 = fmul double %mul, %add13
  %add15 = fadd double %mul14, 0x3FC06EBA8214DB68
  %mul16 = fmul double %mul, 0xBED09C4342A26120
  %add17 = fadd double %mul16, 0x3F215DC9221C1A10
  %mul18 = fmul double %mul, %add17
  %add19 = fadd double %mul18, 0x3F74D022C4D36B0F
  %mul20 = fmul double %mul, %add19
  %add21 = fadd double %mul20, 0x3FB0A54C5536CEBA
  %mul22 = fmul double %mul, %add21
  %add23 = fadd double %mul22, 0x3FD97779CDDADC09
  %mul24 = fmul double %mul, %add23
  %add25 = fadd double %mul24, 1.000000e+00
  %div26 = fdiv double %add15, %add25
  %cmp27 = icmp slt i32 %gh_u.sroa.0.4.extract.trunc, 1070596096
  %mul30 = fmul double %div26, %x
  br i1 %cmp27, label %if.then29, label %if.else

if.then29:                                        ; preds = %if.end7
  %add31 = fadd double %mul30, %x
  %sub32 = fsub double 1.000000e+00, %add31
  br label %return

if.else:                                          ; preds = %if.end7
  %sub34 = fadd double %x, -5.000000e-01
  %add35 = fadd double %sub34, %mul30
  %sub36 = fsub double 5.000000e-01, %add35
  br label %return

if.end37:                                         ; preds = %if.end
  %cmp38 = icmp ult i32 %and, 1072955392
  br i1 %cmp38, label %if.then40, label %if.end75

if.then40:                                        ; preds = %if.end37
  %call = tail call double @fabs(double %x) #8
  %sub41 = fadd double %call, -1.000000e+00
  %mul42 = fmul double %sub41, 0xBF61BF380A96073F
  %add43 = fadd double %mul42, 0x3FA22A36599795EB
  %mul44 = fmul double %sub41, %add43
  %add45 = fadd double %mul44, 0xBFBC63983D3E28EC
  %mul46 = fmul double %sub41, %add45
  %add47 = fadd double %mul46, 0x3FD45FCA805120E4
  %mul48 = fmul double %sub41, %add47
  %add49 = fadd double %mul48, 0xBFD7D240FBB8C3F1
  %mul50 = fmul double %sub41, %add49
  %add51 = fadd double %mul50, 0x3FDA8D00AD92B34D
  %mul52 = fmul double %sub41, %add51
  %add53 = fadd double %mul52, 0xBF6359B8BEF77538
  %mul54 = fmul double %sub41, 0x3F888B545735151D
  %add55 = fadd double %mul54, 0x3F8BEDC26B51DD1C
  %mul56 = fmul double %sub41, %add55
  %add57 = fadd double %mul56, 0x3FC02660E763351F
  %mul58 = fmul double %sub41, %add57
  %add59 = fadd double %mul58, 0x3FB2635CD99FE9A7
  %mul60 = fmul double %sub41, %add59
  %add61 = fadd double %mul60, 0x3FE14AF092EB6F33
  %mul62 = fmul double %sub41, %add61
  %add63 = fadd double %mul62, 0x3FBB3E6618EEE323
  %mul64 = fmul double %sub41, %add63
  %add65 = fadd double %mul64, 1.000000e+00
  %cmp66 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, -1
  %div69 = fdiv double %add53, %add65
  br i1 %cmp66, label %if.then68, label %if.else71

if.then68:                                        ; preds = %if.then40
  %sub70 = fsub double 0x3FC3D4FA80000000, %div69
  br label %return

if.else71:                                        ; preds = %if.then40
  %add73 = fadd double %div69, 0x3FEB0AC160000000
  %add74 = fadd double %add73, 1.000000e+00
  br label %return

if.end75:                                         ; preds = %if.end37
  %cmp76 = icmp ult i32 %and, 1077673984
  br i1 %cmp76, label %if.then78, label %if.else172

if.then78:                                        ; preds = %if.end75
  %call79 = tail call double @fabs(double %x) #8
  %mul80 = fmul double %call79, %call79
  %div81 = fdiv double 1.000000e+00, %mul80
  %cmp82 = icmp ult i32 %and, 1074191213
  br i1 %cmp82, label %if.then84, label %if.else115

if.then84:                                        ; preds = %if.then78
  %mul85 = fmul double %div81, 0xC023A0EFC69AC25C
  %add86 = fadd double %mul85, 0xC054526557E4D2F2
  %mul87 = fmul double %div81, %add86
  %add88 = fadd double %mul87, 0xC067135CEBCCABB2
  %mul89 = fmul double %div81, %add88
  %add90 = fadd double %mul89, 0xC0644CB184282266
  %mul91 = fmul double %div81, %add90
  %add92 = fadd double %mul91, 0xC04F300AE4CBA38D
  %mul93 = fmul double %div81, %add92
  %add94 = fadd double %mul93, 0xC0251E0441B0E726
  %mul95 = fmul double %div81, %add94
  %add96 = fadd double %mul95, 0xBFE63416E4BA7360
  %mul97 = fmul double %div81, %add96
  %add98 = fadd double %mul97, 0xBF843412600D6435
  %mul99 = fmul double %div81, 0xBFAEEFF2EE749A62
  %add100 = fadd double %mul99, 0x401A47EF8E484A93
  %mul101 = fmul double %div81, %add100
  %add102 = fadd double %mul101, 0x405B28A3EE48AE2C
  %mul103 = fmul double %div81, %add102
  %add104 = fadd double %mul103, 0x407AD02157700314
  %mul105 = fmul double %div81, %add104
  %add106 = fadd double %mul105, 0x40842B1921EC2868
  %mul107 = fmul double %div81, %add106
  %add108 = fadd double %mul107, 0x407B290DD58A1A71
  %mul109 = fmul double %div81, %add108
  %add110 = fadd double %mul109, 0x4061350C526AE721
  %mul111 = fmul double %div81, %add110
  %add112 = fadd double %mul111, 0x4033A6B9BD707687
  br label %if.end148

if.else115:                                       ; preds = %if.then78
  %cmp116 = icmp slt i32 %gh_u.sroa.0.4.extract.trunc, 0
  %cmp118 = icmp ugt i32 %and, 1075314687
  %or.cond = and i1 %cmp116, %cmp118
  br i1 %or.cond, label %return, label %if.end121

if.end121:                                        ; preds = %if.else115
  %mul122 = fmul double %div81, 0xC07E384E9BDC383F
  %add123 = fadd double %mul122, 0xC09004616A2E5992
  %mul124 = fmul double %div81, %add123
  %add125 = fadd double %mul124, 0xC083EC881375F228
  %mul126 = fmul double %div81, %add125
  %add127 = fadd double %mul126, 0xC064145D43C5ED98
  %mul128 = fmul double %div81, %add127
  %add129 = fadd double %mul128, 0xC031C209555F995A
  %mul130 = fmul double %div81, %add129
  %add131 = fadd double %mul130, 0xBFE993BA70C285DE
  %mul132 = fmul double %div81, %add131
  %add133 = fadd double %mul132, 0xBF84341239E86F4A
  %mul134 = fmul double %div81, 0xC03670E242712D62
  %add135 = fadd double %mul134, 0x407DA874E79FE763
  %mul136 = fmul double %div81, %add135
  %add137 = fadd double %mul136, 0x40A3F219CEDF3BE6
  %mul138 = fmul double %div81, %add137
  %add139 = fadd double %mul138, 0x40A8FFB7688C246A
  %mul140 = fmul double %div81, %add139
  %add141 = fadd double %mul140, 0x409802EB189D5118
  %mul142 = fmul double %div81, %add141
  %add143 = fadd double %mul142, 0x40745CAE221B9F0A
  %mul144 = fmul double %div81, %add143
  %add145 = fadd double %mul144, 0x403E568B261D5190
  br label %if.end148

if.end148:                                        ; preds = %if.end121, %if.then84
  %add112.pn = phi double [ %add112, %if.then84 ], [ %add145, %if.end121 ]
  %R.0 = phi double [ %add98, %if.then84 ], [ %add133, %if.end121 ]
  %S.0.in = fmul double %div81, %add112.pn
  %S.0 = fadd double %S.0.in, 1.000000e+00
  %2 = bitcast double %call79 to i64
  %sl_u.sroa.0.0.insert.mask = and i64 %2, -4294967296
  %3 = bitcast i64 %sl_u.sroa.0.0.insert.mask to double
  %4 = fmul double %3, %3
  %sub156 = fsub double -5.625000e-01, %4
  %call157 = tail call double @exp(double %sub156) #8
  %sub158 = fsub double %3, %call79
  %add159 = fadd double %call79, %3
  %mul160 = fmul double %sub158, %add159
  %div161 = fdiv double %R.0, %S.0
  %add162 = fadd double %mul160, %div161
  %call163 = tail call double @exp(double %add162) #8
  %mul164 = fmul double %call157, %call163
  %cmp165 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, 0
  %div168 = fdiv double %mul164, %call79
  br i1 %cmp165, label %return, label %if.else169

if.else169:                                       ; preds = %if.end148
  %sub171 = fsub double 2.000000e+00, %div168
  br label %return

if.else172:                                       ; preds = %if.end75
  %cmp173 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp173, label %if.then175, label %return

if.then175:                                       ; preds = %if.else172
  %call176 = tail call double @__math_uflow(i32 0) #8
  br label %return

return:                                           ; preds = %if.then175, %if.else172, %if.else169, %if.end148, %if.else115, %if.else71, %if.then68, %if.else, %if.then29, %if.then6, %if.then
  %retval.0 = phi double [ %add, %if.then ], [ %sub, %if.then6 ], [ %sub32, %if.then29 ], [ %sub36, %if.else ], [ %sub70, %if.then68 ], [ %add74, %if.else71 ], [ %sub171, %if.else169 ], [ %call176, %if.then175 ], [ 2.000000e+00, %if.else115 ], [ %div168, %if.end148 ], [ 2.000000e+00, %if.else172 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @exp10(double %x) #2 {
entry:
  %call = tail call double @pow(double 1.000000e+01, double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @expm1(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, -2147483648
  %cmp = icmp eq i32 %and, 0
  %and1 = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp2 = icmp ugt i32 %and1, 1078159481
  br i1 %cmp2, label %if.then3, label %if.end29

if.then3:                                         ; preds = %entry
  %cmp4 = icmp ugt i32 %and1, 1082535489
  br i1 %cmp4, label %if.then5, label %if.end21

if.then5:                                         ; preds = %if.then3
  %cmp6 = icmp ugt i32 %and1, 2146435071
  br i1 %cmp6, label %do.body8, label %if.end17

do.body8:                                         ; preds = %if.then5
  %gl_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and12 = and i32 %gh_u.sroa.0.4.extract.trunc, 1048575
  %or = or i32 %and12, %gl_u.sroa.0.0.extract.trunc
  %cmp13 = icmp eq i32 %or, 0
  br i1 %cmp13, label %if.else15, label %if.then14

if.then14:                                        ; preds = %do.body8
  %add = fadd double %x, %x
  br label %return

if.else15:                                        ; preds = %do.body8
  %cond = select i1 %cmp, double %x, double -1.000000e+00
  br label %return

if.end17:                                         ; preds = %if.then5
  %cmp18 = fcmp ogt double %x, 0x40862E42FEFA39EF
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end17
  %call = tail call double @__math_oflow(i32 0) #8
  br label %return

if.end21:                                         ; preds = %if.end17, %if.then3
  %cmp22 = icmp ne i32 %and, 0
  %add24 = fadd double %x, 1.000000e-300
  %cmp25 = fcmp olt double %add24, 0.000000e+00
  %or.cond = and i1 %cmp22, %cmp25
  br i1 %or.cond, label %return, label %if.end29

if.end29:                                         ; preds = %if.end21, %entry
  %cmp30 = icmp ugt i32 %and1, 1071001154
  br i1 %cmp30, label %if.then31, label %if.else52

if.then31:                                        ; preds = %if.end29
  %cmp32 = icmp ult i32 %and1, 1072734898
  br i1 %cmp32, label %if.then33, label %if.else40

if.then33:                                        ; preds = %if.then31
  br i1 %cmp, label %if.then35, label %if.else37

if.then35:                                        ; preds = %if.then33
  %sub36 = fadd double %x, 0xBFE62E42FEE00000
  br label %if.end48

if.else37:                                        ; preds = %if.then33
  %add38 = fadd double %x, 0x3FE62E42FEE00000
  br label %if.end48

if.else40:                                        ; preds = %if.then31
  %mul = fmul double %x, 0x3FF71547652B82FE
  %cond42 = select i1 %cmp, double 5.000000e-01, double -5.000000e-01
  %add43 = fadd double %mul, %cond42
  %conv = fptosi double %add43 to i32
  %conv44 = sitofp i32 %conv to double
  %mul45 = fmul double %conv44, 0x3FE62E42FEE00000
  %sub46 = fsub double %x, %mul45
  %mul47 = fmul double %conv44, 0x3DEA39EF35793C76
  br label %if.end48

if.end48:                                         ; preds = %if.else40, %if.else37, %if.then35
  %k.0 = phi i32 [ 1, %if.then35 ], [ -1, %if.else37 ], [ %conv, %if.else40 ]
  %lo.0 = phi double [ 0x3DEA39EF35793C76, %if.then35 ], [ 0xBDEA39EF35793C76, %if.else37 ], [ %mul47, %if.else40 ]
  %hi.0 = phi double [ %sub36, %if.then35 ], [ %add38, %if.else37 ], [ %sub46, %if.else40 ]
  %sub49 = fsub double %hi.0, %lo.0
  %sub50 = fsub double %hi.0, %sub49
  %sub51 = fsub double %sub50, %lo.0
  br label %if.end62

if.else52:                                        ; preds = %if.end29
  %cmp53 = icmp ult i32 %and1, 1016070144
  br i1 %cmp53, label %if.then55, label %if.end62

if.then55:                                        ; preds = %if.else52
  %add56 = fadd double %x, 1.000000e+300
  %sub58 = fsub double %add56, %add56
  %sub59 = fsub double %x, %sub58
  br label %return

if.end62:                                         ; preds = %if.else52, %if.end48
  %k.1 = phi i32 [ %k.0, %if.end48 ], [ 0, %if.else52 ]
  %c.0 = phi double [ %sub51, %if.end48 ], [ undef, %if.else52 ]
  %x.addr.0 = phi double [ %sub49, %if.end48 ], [ %x, %if.else52 ]
  %mul63 = fmul double %x.addr.0, 5.000000e-01
  %mul64 = fmul double %x.addr.0, %mul63
  %mul65 = fmul double %mul64, 0xBE8AFDB76E09C32D
  %add66 = fadd double %mul65, 0x3ED0CFCA86E65239
  %mul67 = fmul double %mul64, %add66
  %add68 = fadd double %mul67, 0xBF14CE199EAADBB7
  %mul69 = fmul double %mul64, %add68
  %add70 = fadd double %mul69, 0x3F5A01A019FE5585
  %mul71 = fmul double %mul64, %add70
  %add72 = fadd double %mul71, 0xBFA11111111110F4
  %mul73 = fmul double %mul64, %add72
  %add74 = fadd double %mul73, 1.000000e+00
  %mul75 = fmul double %mul63, %add74
  %sub76 = fsub double 3.000000e+00, %mul75
  %sub77 = fsub double %add74, %sub76
  %mul78 = fmul double %x.addr.0, %sub76
  %sub79 = fsub double 6.000000e+00, %mul78
  %div = fdiv double %sub77, %sub79
  %mul80 = fmul double %div, %mul64
  %cmp81 = icmp eq i32 %k.1, 0
  br i1 %cmp81, label %if.then83, label %if.else87

if.then83:                                        ; preds = %if.end62
  %mul84 = fmul double %x.addr.0, %mul80
  %sub85 = fsub double %mul84, %mul64
  %sub86 = fsub double %x.addr.0, %sub85
  br label %return

if.else87:                                        ; preds = %if.end62
  %sub88 = fsub double %mul80, %c.0
  %mul89 = fmul double %x.addr.0, %sub88
  %sub90 = fsub double %mul89, %c.0
  %sub91 = fsub double %sub90, %mul64
  switch i32 %k.1, label %if.end112 [
    i32 -1, label %if.then94
    i32 1, label %if.then101
  ]

if.then94:                                        ; preds = %if.else87
  %sub95 = fsub double %x.addr.0, %sub91
  %mul96 = fmul double %sub95, 5.000000e-01
  %sub97 = fadd double %mul96, -5.000000e-01
  br label %return

if.then101:                                       ; preds = %if.else87
  %cmp102 = fcmp olt double %x.addr.0, -2.500000e-01
  br i1 %cmp102, label %if.then104, label %if.else108

if.then104:                                       ; preds = %if.then101
  %add105 = fadd double %x.addr.0, 5.000000e-01
  %sub106 = fsub double %sub91, %add105
  %mul107 = fmul double %sub106, -2.000000e+00
  br label %return

if.else108:                                       ; preds = %if.then101
  %sub109 = fsub double %x.addr.0, %sub91
  %mul110 = fmul double %sub109, 2.000000e+00
  %add111 = fadd double %mul110, 1.000000e+00
  br label %return

if.end112:                                        ; preds = %if.else87
  %k.1.off = add i32 %k.1, 1
  %1 = icmp ugt i32 %k.1.off, 57
  br i1 %1, label %if.then117, label %if.end134

if.then117:                                       ; preds = %if.end112
  %sub118 = fsub double %sub91, %x.addr.0
  %sub119 = fsub double 1.000000e+00, %sub118
  %2 = bitcast double %sub119 to i64
  %gh_u121.sroa.0.4.extract.shift = lshr i64 %2, 32
  %gh_u121.sroa.0.4.extract.trunc = trunc i64 %gh_u121.sroa.0.4.extract.shift to i32
  %shl = shl i32 %k.1, 20
  %add128 = add i32 %gh_u121.sroa.0.4.extract.trunc, %shl
  %sh_u.sroa.0.4.insert.ext = zext i32 %add128 to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %2, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %3 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  %sub133 = fadd double %3, -1.000000e+00
  br label %return

if.end134:                                        ; preds = %if.end112
  %cmp135 = icmp slt i32 %k.1, 20
  br i1 %cmp135, label %do.body139, label %do.body166

do.body139:                                       ; preds = %if.end134
  %shr = lshr i32 2097152, %k.1
  %sub142 = sub nsw i32 1072693248, %shr
  %sh_u140.sroa.0.4.insert.ext = zext i32 %sub142 to i64
  %sh_u140.sroa.0.4.insert.shift = shl nuw i64 %sh_u140.sroa.0.4.insert.ext, 32
  %4 = bitcast i64 %sh_u140.sroa.0.4.insert.shift to double
  %sub147 = fsub double %sub91, %x.addr.0
  %sub148 = fsub double %4, %sub147
  %5 = bitcast double %sub148 to i64
  %gh_u150.sroa.0.4.extract.shift = lshr i64 %5, 32
  %gh_u150.sroa.0.4.extract.trunc = trunc i64 %gh_u150.sroa.0.4.extract.shift to i32
  %shl158 = shl i32 %k.1, 20
  %add159 = add i32 %gh_u150.sroa.0.4.extract.trunc, %shl158
  %sh_u156.sroa.0.4.insert.ext = zext i32 %add159 to i64
  %sh_u156.sroa.0.4.insert.shift = shl nuw i64 %sh_u156.sroa.0.4.insert.ext, 32
  %sh_u156.sroa.0.4.insert.mask = and i64 %5, 4294967295
  %sh_u156.sroa.0.4.insert.insert = or i64 %sh_u156.sroa.0.4.insert.shift, %sh_u156.sroa.0.4.insert.mask
  br label %if.end194

do.body166:                                       ; preds = %if.end134
  %sub169 = sub nsw i32 1023, %k.1
  %shl170 = shl i32 %sub169, 20
  %sh_u167.sroa.0.4.insert.ext = zext i32 %shl170 to i64
  %sh_u167.sroa.0.4.insert.shift = shl nuw i64 %sh_u167.sroa.0.4.insert.ext, 32
  %6 = bitcast i64 %sh_u167.sroa.0.4.insert.shift to double
  %add175 = fadd double %6, %sub91
  %sub176 = fsub double %x.addr.0, %add175
  %add177 = fadd double %sub176, 1.000000e+00
  %7 = bitcast double %add177 to i64
  %gh_u179.sroa.0.4.extract.shift = lshr i64 %7, 32
  %gh_u179.sroa.0.4.extract.trunc = trunc i64 %gh_u179.sroa.0.4.extract.shift to i32
  %shl187 = shl i32 %k.1, 20
  %add188 = add i32 %gh_u179.sroa.0.4.extract.trunc, %shl187
  %sh_u185.sroa.0.4.insert.ext = zext i32 %add188 to i64
  %sh_u185.sroa.0.4.insert.shift = shl nuw i64 %sh_u185.sroa.0.4.insert.ext, 32
  %sh_u185.sroa.0.4.insert.mask = and i64 %7, 4294967295
  %sh_u185.sroa.0.4.insert.insert = or i64 %sh_u185.sroa.0.4.insert.shift, %sh_u185.sroa.0.4.insert.mask
  br label %if.end194

if.end194:                                        ; preds = %do.body166, %do.body139
  %y.0.in = phi i64 [ %sh_u156.sroa.0.4.insert.insert, %do.body139 ], [ %sh_u185.sroa.0.4.insert.insert, %do.body166 ]
  %y.0 = bitcast i64 %y.0.in to double
  br label %return

return:                                           ; preds = %if.end194, %if.then117, %if.else108, %if.then104, %if.then94, %if.then83, %if.then55, %if.end21, %if.then19, %if.else15, %if.then14
  %retval.0 = phi double [ %add, %if.then14 ], [ %cond, %if.else15 ], [ %call, %if.then19 ], [ %sub86, %if.then83 ], [ %sub97, %if.then94 ], [ %mul107, %if.then104 ], [ %add111, %if.else108 ], [ %sub133, %if.then117 ], [ %y.0, %if.end194 ], [ %sub59, %if.then55 ], [ -1.000000e+00, %if.end21 ]
  ret double %retval.0
}

; Function Attrs: nounwind readnone
define double @fabs(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %sh_u.sroa.0.4.insert.insert = and i64 %0, 9223372036854775807
  %1 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  ret double %1
}

; Function Attrs: nounwind
define float @asinhf(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %add = fadd float %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp ult i32 %and, 830472192
  %add3 = fadd float %x, 0x46293E5940000000
  %cmp4 = fcmp ogt float %add3, 1.000000e+00
  %or.cond = and i1 %cmp1, %cmp4
  br i1 %or.cond, label %return, label %if.end7

if.end7:                                          ; preds = %if.end
  %cmp8 = icmp ugt i32 %and, 1300234240
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end7
  %call = tail call float @fabsf(float %x) #8
  %call10 = tail call float @logf(float %call) #8
  %add11 = fadd float %call10, 0x3FE62E4300000000
  br label %if.end31

if.else:                                          ; preds = %if.end7
  %cmp12 = icmp ugt i32 %and, 1073741824
  br i1 %cmp12, label %if.then13, label %if.else21

if.then13:                                        ; preds = %if.else
  %call14 = tail call float @fabsf(float %x) #8
  %mul = fmul float %call14, 2.000000e+00
  %mul15 = fmul float %x, %x
  %add16 = fadd float %mul15, 1.000000e+00
  %call17 = tail call float @__ieee754_sqrtf(float %add16) #8
  %add18 = fadd float %call14, %call17
  %div = fdiv float 1.000000e+00, %add18
  %add19 = fadd float %mul, %div
  %call20 = tail call float @logf(float %add19) #8
  br label %if.end31

if.else21:                                        ; preds = %if.else
  %mul22 = fmul float %x, %x
  %call23 = tail call float @fabsf(float %x) #8
  %add24 = fadd float %mul22, 1.000000e+00
  %call25 = tail call float @__ieee754_sqrtf(float %add24) #8
  %add26 = fadd float %call25, 1.000000e+00
  %div27 = fdiv float %mul22, %add26
  %add28 = fadd float %call23, %div27
  %call29 = tail call float @log1pf(float %add28) #8
  br label %if.end31

if.end31:                                         ; preds = %if.else21, %if.then13, %if.then9
  %w.0 = phi float [ %add11, %if.then9 ], [ %call20, %if.then13 ], [ %call29, %if.else21 ]
  %cmp32 = icmp sgt i32 %0, 0
  br i1 %cmp32, label %return, label %if.else34

if.else34:                                        ; preds = %if.end31
  %sub = fsub float -0.000000e+00, %w.0
  br label %return

return:                                           ; preds = %if.else34, %if.end31, %if.end, %if.then
  %retval.0 = phi float [ %sub, %if.else34 ], [ %add, %if.then ], [ %x, %if.end ], [ %w.0, %if.end31 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @atanf(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ugt i32 %and, 1350565887
  br i1 %cmp, label %if.then, label %if.end7

if.then:                                          ; preds = %entry
  %cmp1 = icmp ugt i32 %and, 2139095040
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %add = fadd float %x, %x
  br label %return

if.end:                                           ; preds = %if.then
  %cmp3 = icmp sgt i32 %0, 0
  %. = select i1 %cmp3, float 0x3FF921FB60000000, float 0xBFF921FB60000000
  br label %return

if.end7:                                          ; preds = %entry
  %cmp8 = icmp ult i32 %and, 1054867456
  br i1 %cmp8, label %if.then9, label %if.else17

if.then9:                                         ; preds = %if.end7
  %cmp10 = icmp ult i32 %and, 822083584
  %add12 = fadd float %x, 0x46293E5940000000
  %cmp13 = fcmp ogt float %add12, 1.000000e+00
  %or.cond = and i1 %cmp10, %cmp13
  br i1 %or.cond, label %return, label %if.end40

if.else17:                                        ; preds = %if.end7
  %call = tail call float @fabsf(float %x) #8
  %cmp18 = icmp ult i32 %and, 1066926080
  br i1 %cmp18, label %if.then19, label %if.else29

if.then19:                                        ; preds = %if.else17
  %cmp20 = icmp ult i32 %and, 1060110336
  br i1 %cmp20, label %if.then21, label %if.else24

if.then21:                                        ; preds = %if.then19
  %mul = fmul float %call, 2.000000e+00
  %sub22 = fadd float %mul, -1.000000e+00
  %add23 = fadd float %call, 2.000000e+00
  %div = fdiv float %sub22, %add23
  br label %if.end40

if.else24:                                        ; preds = %if.then19
  %sub25 = fadd float %call, -1.000000e+00
  %add26 = fadd float %call, 1.000000e+00
  %div27 = fdiv float %sub25, %add26
  br label %if.end40

if.else29:                                        ; preds = %if.else17
  %cmp30 = icmp ult i32 %and, 1075576832
  br i1 %cmp30, label %if.then31, label %if.else36

if.then31:                                        ; preds = %if.else29
  %sub32 = fadd float %call, -1.500000e+00
  %mul33 = fmul float %call, 1.500000e+00
  %add34 = fadd float %mul33, 1.000000e+00
  %div35 = fdiv float %sub32, %add34
  br label %if.end40

if.else36:                                        ; preds = %if.else29
  %div37 = fdiv float -1.000000e+00, %call
  br label %if.end40

if.end40:                                         ; preds = %if.else36, %if.then31, %if.else24, %if.then21, %if.then9
  %x.addr.0 = phi float [ %div, %if.then21 ], [ %div27, %if.else24 ], [ %div35, %if.then31 ], [ %div37, %if.else36 ], [ %x, %if.then9 ]
  %id.0 = phi i32 [ 0, %if.then21 ], [ 1, %if.else24 ], [ 2, %if.then31 ], [ 3, %if.else36 ], [ -1, %if.then9 ]
  %mul41 = fmul float %x.addr.0, %x.addr.0
  %mul42 = fmul float %mul41, %mul41
  %mul43 = fmul float %mul42, 0x3F90AD3AE0000000
  %add44 = fadd float %mul43, 0x3FA97B4B20000000
  %mul45 = fmul float %mul42, %add44
  %add46 = fadd float %mul45, 0x3FB10D66A0000000
  %mul47 = fmul float %mul42, %add46
  %add48 = fadd float %mul47, 0x3FB745CDC0000000
  %mul49 = fmul float %mul42, %add48
  %add50 = fadd float %mul49, 0x3FC24924A0000000
  %mul51 = fmul float %mul42, %add50
  %add52 = fadd float %mul51, 0x3FD5555560000000
  %mul53 = fmul float %mul41, %add52
  %mul54 = fmul float %mul42, 0xBFA2B44420000000
  %add55 = fadd float %mul54, 0xBFADDE2D60000000
  %mul56 = fmul float %mul42, %add55
  %add57 = fadd float %mul56, 0xBFB3B0F2A0000000
  %mul58 = fmul float %mul42, %add57
  %add59 = fadd float %mul58, 0xBFBC71C700000000
  %mul60 = fmul float %mul42, %add59
  %add61 = fadd float %mul60, 0xBFC99999A0000000
  %mul62 = fmul float %mul42, %add61
  %cmp63 = icmp slt i32 %id.0, 0
  br i1 %cmp63, label %if.then64, label %if.else68

if.then64:                                        ; preds = %if.end40
  %add65 = fadd float %mul62, %mul53
  %mul66 = fmul float %x.addr.0, %add65
  %sub67 = fsub float %x.addr.0, %mul66
  br label %return

if.else68:                                        ; preds = %if.end40
  %arrayidx = getelementptr inbounds [4 x float]* @atanhi90, i32 0, i32 %id.0
  %1 = load float* %arrayidx, align 4, !tbaa !435
  %add69 = fadd float %mul62, %mul53
  %mul70 = fmul float %x.addr.0, %add69
  %arrayidx71 = getelementptr inbounds [4 x float]* @atanlo91, i32 0, i32 %id.0
  %2 = load float* %arrayidx71, align 4, !tbaa !435
  %sub72 = fsub float %mul70, %2
  %sub73 = fsub float %sub72, %x.addr.0
  %sub74 = fsub float %1, %sub73
  %cmp75 = icmp slt i32 %0, 0
  br i1 %cmp75, label %cond.true, label %return

cond.true:                                        ; preds = %if.else68
  %sub76 = fsub float -0.000000e+00, %sub74
  br label %return

return:                                           ; preds = %cond.true, %if.else68, %if.then64, %if.then9, %if.end, %if.then2
  %retval.0 = phi float [ %add, %if.then2 ], [ %sub67, %if.then64 ], [ %., %if.end ], [ %x, %if.then9 ], [ %sub76, %cond.true ], [ %sub74, %if.else68 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define float @cbrtf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, -2147483648
  %xor = xor i32 %and, %0
  %cmp = icmp slt i32 %xor, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %add = fadd float %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq i32 %0, %and
  br i1 %cmp1, label %return, label %do.body4

do.body4:                                         ; preds = %if.end
  %1 = bitcast i32 %xor to float
  %cmp8 = icmp slt i32 %xor, 8388608
  br i1 %cmp8, label %do.body10, label %do.body26

do.body10:                                        ; preds = %do.body4
  %mul = fmul float %1, 0x4170000000000000
  %2 = bitcast float %mul to i32
  %div = udiv i32 %2, 3
  %add22 = add nuw i32 %div, 642849266
  br label %if.end33

do.body26:                                        ; preds = %do.body4
  %div28 = sdiv i32 %xor, 3
  %add29 = add i32 %div28, 709958130
  br label %if.end33

if.end33:                                         ; preds = %do.body26, %do.body10
  %t.0.in = phi i32 [ %add22, %do.body10 ], [ %add29, %do.body26 ]
  %t.0 = bitcast i32 %t.0.in to float
  %mul34 = fmul float %t.0, %t.0
  %div35 = fdiv float %mul34, %1
  %mul36 = fmul float %div35, %t.0
  %add37 = fadd float %mul36, 0x3FE15F1600000000
  %add38 = fadd float %add37, 0x3FF6A0EA00000000
  %div39 = fdiv float 0xBFE691DE20000000, %add37
  %add40 = fadd float %div39, %add38
  %div41 = fdiv float 0x3FF9B6DB60000000, %add40
  %add42 = fadd float %div41, 0x3FD6DB6DC0000000
  %mul43 = fmul float %t.0, %add42
  %3 = bitcast float %mul43 to i32
  %or = or i32 %3, %and
  %4 = bitcast i32 %or to float
  br label %return

return:                                           ; preds = %if.end33, %if.end, %if.then
  %retval.0 = phi float [ %4, %if.end33 ], [ %add, %if.then ], [ %x, %if.end ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define float @ceilf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %shr = lshr i32 %and, 23
  %sub = add nsw i32 %shr, -127
  %cmp = icmp slt i32 %sub, 23
  br i1 %cmp, label %if.then, label %if.else28

if.then:                                          ; preds = %entry
  %cmp1 = icmp slt i32 %sub, 0
  br i1 %cmp1, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %add = fadd float %x, 0x46293E5940000000
  %cmp3 = fcmp ogt float %add, 0.000000e+00
  br i1 %cmp3, label %if.then4, label %do.body34

if.then4:                                         ; preds = %if.then2
  %cmp5 = icmp slt i32 %0, 0
  br i1 %cmp5, label %do.body34, label %if.else

if.else:                                          ; preds = %if.then4
  %cmp7 = icmp eq i32 %and, 0
  %. = select i1 %cmp7, i32 %0, i32 1065353216
  br label %do.body34

if.else11:                                        ; preds = %if.then
  %shr12 = lshr i32 8388607, %sub
  %and13 = and i32 %shr12, %0
  %cmp14 = icmp eq i32 %and13, 0
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.else11
  %add17 = fadd float %x, 0x46293E5940000000
  %cmp18 = fcmp ogt float %add17, 0.000000e+00
  br i1 %cmp18, label %if.then19, label %do.body34

if.then19:                                        ; preds = %if.end16
  %cmp20 = icmp sgt i32 %0, 0
  br i1 %cmp20, label %if.then21, label %if.end24

if.then21:                                        ; preds = %if.then19
  %shr22 = lshr i32 8388608, %sub
  %add23 = add nsw i32 %shr22, %0
  br label %if.end24

if.end24:                                         ; preds = %if.then21, %if.then19
  %i0.0 = phi i32 [ %add23, %if.then21 ], [ %0, %if.then19 ]
  %neg = xor i32 %shr12, -1
  %and25 = and i32 %i0.0, %neg
  br label %do.body34

if.else28:                                        ; preds = %entry
  %cmp29 = icmp ult i32 %and, 2139095040
  br i1 %cmp29, label %return, label %if.then30

if.then30:                                        ; preds = %if.else28
  %add31 = fadd float %x, %x
  br label %return

do.body34:                                        ; preds = %if.end24, %if.end16, %if.else, %if.then4, %if.then2
  %i0.1 = phi i32 [ %0, %if.then2 ], [ %and25, %if.end24 ], [ %0, %if.end16 ], [ -2147483648, %if.then4 ], [ %., %if.else ]
  %1 = bitcast i32 %i0.1 to float
  br label %return

return:                                           ; preds = %do.body34, %if.then30, %if.else28, %if.else11
  %retval.0 = phi float [ %1, %do.body34 ], [ %add31, %if.then30 ], [ %x, %if.else11 ], [ %x, %if.else28 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define float @copysignf(float %x, float %y) #3 {
entry:
  %0 = bitcast float %x to i32
  %1 = bitcast float %y to i32
  %and = and i32 %0, 2147483647
  %and7 = and i32 %1, -2147483648
  %or = or i32 %and7, %and
  %2 = bitcast i32 %or to float
  ret float %2
}

; Function Attrs: nounwind
define double @fdim(double %x, double %y) #2 {
entry:
  %call = tail call i32 @__fpclassifyd(double %x) #8
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call1 = tail call i32 @__fpclassifyd(double %y) #8
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %cmp5 = fcmp ogt double %x, %y
  br i1 %cmp5, label %cond.true, label %return

cond.true:                                        ; preds = %if.end4
  %sub = fsub double %x, %y
  br label %return

return:                                           ; preds = %cond.true, %if.end4, %if.end, %entry
  %retval.0 = phi double [ %x, %entry ], [ %y, %if.end ], [ %sub, %cond.true ], [ 0.000000e+00, %if.end4 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define float @erff(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %shr = lshr i32 %0, 31
  %shl = shl nuw nsw i32 %shr, 1
  %sub = sub nsw i32 1, %shl
  %conv = sitofp i32 %sub to float
  %div = fdiv float 1.000000e+00, %x
  %add = fadd float %conv, %div
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp ult i32 %and, 1062731776
  br i1 %cmp1, label %if.then3, label %if.end39

if.then3:                                         ; preds = %if.end
  %cmp4 = icmp ult i32 %and, 830472192
  br i1 %cmp4, label %if.then6, label %if.end16

if.then6:                                         ; preds = %if.then3
  %cmp7 = icmp ult i32 %and, 67108864
  br i1 %cmp7, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.then6
  %mul = fmul float %x, 8.000000e+00
  %mul10 = fmul float %x, 0x3FF06EBA80000000
  %add11 = fadd float %mul, %mul10
  %mul12 = fmul float %add11, 1.250000e-01
  br label %return

if.end13:                                         ; preds = %if.then6
  %mul14 = fmul float %x, 0x3FC06EBA80000000
  %add15 = fadd float %mul14, %x
  br label %return

if.end16:                                         ; preds = %if.then3
  %mul17 = fmul float %x, %x
  %mul18 = fmul float %mul17, 0xBEF8EAD620000000
  %add19 = fadd float %mul18, 0xBF77A29120000000
  %mul20 = fmul float %mul17, %add19
  %add21 = fadd float %mul20, 0xBF9D2A51E0000000
  %mul22 = fmul float %mul17, %add21
  %add23 = fadd float %mul22, 0xBFD4CD7D60000000
  %mul24 = fmul float %mul17, %add23
  %add25 = fadd float %mul24, 0x3FC06EBA80000000
  %mul26 = fmul float %mul17, 0xBED09C4340000000
  %add27 = fadd float %mul26, 0x3F215DC920000000
  %mul28 = fmul float %mul17, %add27
  %add29 = fadd float %mul28, 0x3F74D022C0000000
  %mul30 = fmul float %mul17, %add29
  %add31 = fadd float %mul30, 0x3FB0A54C60000000
  %mul32 = fmul float %mul17, %add31
  %add33 = fadd float %mul32, 0x3FD97779C0000000
  %mul34 = fmul float %mul17, %add33
  %add35 = fadd float %mul34, 1.000000e+00
  %div36 = fdiv float %add25, %add35
  %mul37 = fmul float %div36, %x
  %add38 = fadd float %mul37, %x
  br label %return

if.end39:                                         ; preds = %if.end
  %cmp40 = icmp ult i32 %and, 1067450368
  br i1 %cmp40, label %if.then42, label %if.end75

if.then42:                                        ; preds = %if.end39
  %call = tail call float @fabsf(float %x) #8
  %sub43 = fadd float %call, -1.000000e+00
  %mul44 = fmul float %sub43, 0xBF61BF3800000000
  %add45 = fadd float %mul44, 0x3FA22A3660000000
  %mul46 = fmul float %sub43, %add45
  %add47 = fadd float %mul46, 0xBFBC639840000000
  %mul48 = fmul float %sub43, %add47
  %add49 = fadd float %mul48, 0x3FD45FCA80000000
  %mul50 = fmul float %sub43, %add49
  %add51 = fadd float %mul50, 0xBFD7D24100000000
  %mul52 = fmul float %sub43, %add51
  %add53 = fadd float %mul52, 0x3FDA8D00A0000000
  %mul54 = fmul float %sub43, %add53
  %add55 = fadd float %mul54, 0xBF6359B8C0000000
  %mul56 = fmul float %sub43, 0x3F888B5460000000
  %add57 = fadd float %mul56, 0x3F8BEDC260000000
  %mul58 = fmul float %sub43, %add57
  %add59 = fadd float %mul58, 0x3FC02660E0000000
  %mul60 = fmul float %sub43, %add59
  %add61 = fadd float %mul60, 0x3FB2635CE0000000
  %mul62 = fmul float %sub43, %add61
  %add63 = fadd float %mul62, 0x3FE14AF0A0000000
  %mul64 = fmul float %sub43, %add63
  %add65 = fadd float %mul64, 0x3FBB3E6620000000
  %mul66 = fmul float %sub43, %add65
  %add67 = fadd float %mul66, 1.000000e+00
  %cmp68 = icmp sgt i32 %0, -1
  %div71 = fdiv float %add55, %add67
  br i1 %cmp68, label %if.then70, label %if.else

if.then70:                                        ; preds = %if.then42
  %add72 = fadd float %div71, 0x3FEB0AC160000000
  br label %return

if.else:                                          ; preds = %if.then42
  %sub74 = fsub float 0xBFEB0AC160000000, %div71
  br label %return

if.end75:                                         ; preds = %if.end39
  %cmp76 = icmp ugt i32 %and, 1086324735
  br i1 %cmp76, label %if.then78, label %if.end83

if.then78:                                        ; preds = %if.end75
  %cmp79 = icmp sgt i32 %0, -1
  %. = select i1 %cmp79, float 1.000000e+00, float -1.000000e+00
  br label %return

if.end83:                                         ; preds = %if.end75
  %call84 = tail call float @fabsf(float %x) #8
  %mul85 = fmul float %call84, %call84
  %div86 = fdiv float 1.000000e+00, %mul85
  %cmp87 = icmp ult i32 %and, 1077336942
  br i1 %cmp87, label %if.then89, label %if.else120

if.then89:                                        ; preds = %if.end83
  %mul90 = fmul float %div86, 0xC023A0EFC0000000
  %add91 = fadd float %mul90, 0xC054526560000000
  %mul92 = fmul float %div86, %add91
  %add93 = fadd float %mul92, 0xC067135CE0000000
  %mul94 = fmul float %div86, %add93
  %add95 = fadd float %mul94, 0xC0644CB180000000
  %mul96 = fmul float %div86, %add95
  %add97 = fadd float %mul96, 0xC04F300AE0000000
  %mul98 = fmul float %div86, %add97
  %add99 = fadd float %mul98, 0xC0251E0440000000
  %mul100 = fmul float %div86, %add99
  %add101 = fadd float %mul100, 0xBFE63416E0000000
  %mul102 = fmul float %div86, %add101
  %add103 = fadd float %mul102, 0xBF84341260000000
  %mul104 = fmul float %div86, 0xBFAEEFF2E0000000
  %add105 = fadd float %mul104, 0x401A47EF80000000
  %mul106 = fmul float %div86, %add105
  %add107 = fadd float %mul106, 0x405B28A3E0000000
  %mul108 = fmul float %div86, %add107
  %add109 = fadd float %mul108, 0x407AD02160000000
  %mul110 = fmul float %div86, %add109
  %add111 = fadd float %mul110, 0x40842B1920000000
  %mul112 = fmul float %div86, %add111
  %add113 = fadd float %mul112, 0x407B290DE0000000
  %mul114 = fmul float %div86, %add113
  %add115 = fadd float %mul114, 0x4061350C60000000
  %mul116 = fmul float %div86, %add115
  %add117 = fadd float %mul116, 0x4033A6B9C0000000
  br label %do.body148

if.else120:                                       ; preds = %if.end83
  %mul121 = fmul float %div86, 0xC07E384EA0000000
  %add122 = fadd float %mul121, 0xC090046160000000
  %mul123 = fmul float %div86, %add122
  %add124 = fadd float %mul123, 0xC083EC8820000000
  %mul125 = fmul float %div86, %add124
  %add126 = fadd float %mul125, 0xC064145D40000000
  %mul127 = fmul float %div86, %add126
  %add128 = fadd float %mul127, 0xC031C20960000000
  %mul129 = fmul float %div86, %add128
  %add130 = fadd float %mul129, 0xBFE993BA80000000
  %mul131 = fmul float %div86, %add130
  %add132 = fadd float %mul131, 0xBF84341240000000
  %mul133 = fmul float %div86, 0xC03670E240000000
  %add134 = fadd float %mul133, 0x407DA874E0000000
  %mul135 = fmul float %div86, %add134
  %add136 = fadd float %mul135, 0x40A3F219C0000000
  %mul137 = fmul float %div86, %add136
  %add138 = fadd float %mul137, 0x40A8FFB760000000
  %mul139 = fmul float %div86, %add138
  %add140 = fadd float %mul139, 0x409802EB20000000
  %mul141 = fmul float %div86, %add140
  %add142 = fadd float %mul141, 0x40745CAE20000000
  %mul143 = fmul float %div86, %add142
  %add144 = fadd float %mul143, 0x403E568B20000000
  br label %do.body148

do.body148:                                       ; preds = %if.else120, %if.then89
  %add117.pn = phi float [ %add117, %if.then89 ], [ %add144, %if.else120 ]
  %R.0 = phi float [ %add103, %if.then89 ], [ %add132, %if.else120 ]
  %S.0.in = fmul float %div86, %add117.pn
  %S.0 = fadd float %S.0.in, 1.000000e+00
  %1 = bitcast float %call84 to i32
  %and154 = and i32 %1, -4096
  %2 = bitcast i32 %and154 to float
  %3 = fmul float %2, %2
  %sub160 = fsub float -5.625000e-01, %3
  %call161 = tail call float @expf(float %sub160) #8
  %sub162 = fsub float %2, %call84
  %add163 = fadd float %call84, %2
  %mul164 = fmul float %sub162, %add163
  %div165 = fdiv float %R.0, %S.0
  %add166 = fadd float %mul164, %div165
  %call167 = tail call float @expf(float %add166) #8
  %mul168 = fmul float %call161, %call167
  %cmp169 = icmp sgt i32 %0, -1
  %div172 = fdiv float %mul168, %call84
  br i1 %cmp169, label %if.then171, label %if.else174

if.then171:                                       ; preds = %do.body148
  %sub173 = fsub float 1.000000e+00, %div172
  br label %return

if.else174:                                       ; preds = %do.body148
  %sub176 = fadd float %div172, -1.000000e+00
  br label %return

return:                                           ; preds = %if.else174, %if.then171, %if.then78, %if.else, %if.then70, %if.end16, %if.end13, %if.then9, %if.then
  %retval.0 = phi float [ %mul12, %if.then9 ], [ %add15, %if.end13 ], [ %add38, %if.end16 ], [ %add72, %if.then70 ], [ %sub74, %if.else ], [ %sub173, %if.then171 ], [ %sub176, %if.else174 ], [ %add, %if.then ], [ %., %if.then78 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @erfcf(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %shr = lshr i32 %0, 31
  %shl = shl nuw nsw i32 %shr, 1
  %conv = uitofp i32 %shl to float
  %div = fdiv float 1.000000e+00, %x
  %add = fadd float %conv, %div
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp ult i32 %and, 1062731776
  br i1 %cmp1, label %if.then3, label %if.end37

if.then3:                                         ; preds = %if.end
  %cmp4 = icmp ult i32 %and, 595591168
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.then3
  %sub = fsub float 1.000000e+00, %x
  br label %return

if.end7:                                          ; preds = %if.then3
  %mul = fmul float %x, %x
  %mul8 = fmul float %mul, 0xBEF8EAD620000000
  %add9 = fadd float %mul8, 0xBF77A29120000000
  %mul10 = fmul float %mul, %add9
  %add11 = fadd float %mul10, 0xBF9D2A51E0000000
  %mul12 = fmul float %mul, %add11
  %add13 = fadd float %mul12, 0xBFD4CD7D60000000
  %mul14 = fmul float %mul, %add13
  %add15 = fadd float %mul14, 0x3FC06EBA80000000
  %mul16 = fmul float %mul, 0xBED09C4340000000
  %add17 = fadd float %mul16, 0x3F215DC920000000
  %mul18 = fmul float %mul, %add17
  %add19 = fadd float %mul18, 0x3F74D022C0000000
  %mul20 = fmul float %mul, %add19
  %add21 = fadd float %mul20, 0x3FB0A54C60000000
  %mul22 = fmul float %mul, %add21
  %add23 = fadd float %mul22, 0x3FD97779C0000000
  %mul24 = fmul float %mul, %add23
  %add25 = fadd float %mul24, 1.000000e+00
  %div26 = fdiv float %add15, %add25
  %cmp27 = icmp slt i32 %0, 1048576000
  %mul30 = fmul float %div26, %x
  br i1 %cmp27, label %if.then29, label %if.else

if.then29:                                        ; preds = %if.end7
  %add31 = fadd float %mul30, %x
  %sub32 = fsub float 1.000000e+00, %add31
  br label %return

if.else:                                          ; preds = %if.end7
  %sub34 = fadd float %x, -5.000000e-01
  %add35 = fadd float %sub34, %mul30
  %sub36 = fsub float 5.000000e-01, %add35
  br label %return

if.end37:                                         ; preds = %if.end
  %cmp38 = icmp ult i32 %and, 1067450368
  br i1 %cmp38, label %if.then40, label %if.end75

if.then40:                                        ; preds = %if.end37
  %call = tail call float @fabsf(float %x) #8
  %sub41 = fadd float %call, -1.000000e+00
  %mul42 = fmul float %sub41, 0xBF61BF3800000000
  %add43 = fadd float %mul42, 0x3FA22A3660000000
  %mul44 = fmul float %sub41, %add43
  %add45 = fadd float %mul44, 0xBFBC639840000000
  %mul46 = fmul float %sub41, %add45
  %add47 = fadd float %mul46, 0x3FD45FCA80000000
  %mul48 = fmul float %sub41, %add47
  %add49 = fadd float %mul48, 0xBFD7D24100000000
  %mul50 = fmul float %sub41, %add49
  %add51 = fadd float %mul50, 0x3FDA8D00A0000000
  %mul52 = fmul float %sub41, %add51
  %add53 = fadd float %mul52, 0xBF6359B8C0000000
  %mul54 = fmul float %sub41, 0x3F888B5460000000
  %add55 = fadd float %mul54, 0x3F8BEDC260000000
  %mul56 = fmul float %sub41, %add55
  %add57 = fadd float %mul56, 0x3FC02660E0000000
  %mul58 = fmul float %sub41, %add57
  %add59 = fadd float %mul58, 0x3FB2635CE0000000
  %mul60 = fmul float %sub41, %add59
  %add61 = fadd float %mul60, 0x3FE14AF0A0000000
  %mul62 = fmul float %sub41, %add61
  %add63 = fadd float %mul62, 0x3FBB3E6620000000
  %mul64 = fmul float %sub41, %add63
  %add65 = fadd float %mul64, 1.000000e+00
  %cmp66 = icmp sgt i32 %0, -1
  %div69 = fdiv float %add53, %add65
  br i1 %cmp66, label %if.then68, label %if.else71

if.then68:                                        ; preds = %if.then40
  %sub70 = fsub float 0x3FC3D4FA80000000, %div69
  br label %return

if.else71:                                        ; preds = %if.then40
  %add73 = fadd float %div69, 0x3FEB0AC160000000
  %add74 = fadd float %add73, 1.000000e+00
  br label %return

if.end75:                                         ; preds = %if.end37
  %cmp76 = icmp ult i32 %and, 1105199104
  br i1 %cmp76, label %if.then78, label %if.else177

if.then78:                                        ; preds = %if.end75
  %call79 = tail call float @fabsf(float %x) #8
  %mul80 = fmul float %call79, %call79
  %div81 = fdiv float 1.000000e+00, %mul80
  %cmp82 = icmp ult i32 %and, 1077336941
  br i1 %cmp82, label %if.then84, label %if.else115

if.then84:                                        ; preds = %if.then78
  %mul85 = fmul float %div81, 0xC023A0EFC0000000
  %add86 = fadd float %mul85, 0xC054526560000000
  %mul87 = fmul float %div81, %add86
  %add88 = fadd float %mul87, 0xC067135CE0000000
  %mul89 = fmul float %div81, %add88
  %add90 = fadd float %mul89, 0xC0644CB180000000
  %mul91 = fmul float %div81, %add90
  %add92 = fadd float %mul91, 0xC04F300AE0000000
  %mul93 = fmul float %div81, %add92
  %add94 = fadd float %mul93, 0xC0251E0440000000
  %mul95 = fmul float %div81, %add94
  %add96 = fadd float %mul95, 0xBFE63416E0000000
  %mul97 = fmul float %div81, %add96
  %add98 = fadd float %mul97, 0xBF84341260000000
  %mul99 = fmul float %div81, 0xBFAEEFF2E0000000
  %add100 = fadd float %mul99, 0x401A47EF80000000
  %mul101 = fmul float %div81, %add100
  %add102 = fadd float %mul101, 0x405B28A3E0000000
  %mul103 = fmul float %div81, %add102
  %add104 = fadd float %mul103, 0x407AD02160000000
  %mul105 = fmul float %div81, %add104
  %add106 = fadd float %mul105, 0x40842B1920000000
  %mul107 = fmul float %div81, %add106
  %add108 = fadd float %mul107, 0x407B290DE0000000
  %mul109 = fmul float %div81, %add108
  %add110 = fadd float %mul109, 0x4061350C60000000
  %mul111 = fmul float %div81, %add110
  %add112 = fadd float %mul111, 0x4033A6B9C0000000
  br label %do.body149

if.else115:                                       ; preds = %if.then78
  %cmp116 = icmp slt i32 %0, 0
  %cmp118 = icmp ugt i32 %and, 1086324735
  %or.cond = and i1 %cmp116, %cmp118
  br i1 %or.cond, label %return, label %if.end121

if.end121:                                        ; preds = %if.else115
  %mul122 = fmul float %div81, 0xC07E384EA0000000
  %add123 = fadd float %mul122, 0xC090046160000000
  %mul124 = fmul float %div81, %add123
  %add125 = fadd float %mul124, 0xC083EC8820000000
  %mul126 = fmul float %div81, %add125
  %add127 = fadd float %mul126, 0xC064145D40000000
  %mul128 = fmul float %div81, %add127
  %add129 = fadd float %mul128, 0xC031C20960000000
  %mul130 = fmul float %div81, %add129
  %add131 = fadd float %mul130, 0xBFE993BA80000000
  %mul132 = fmul float %div81, %add131
  %add133 = fadd float %mul132, 0xBF84341240000000
  %mul134 = fmul float %div81, 0xC03670E240000000
  %add135 = fadd float %mul134, 0x407DA874E0000000
  %mul136 = fmul float %div81, %add135
  %add137 = fadd float %mul136, 0x40A3F219C0000000
  %mul138 = fmul float %div81, %add137
  %add139 = fadd float %mul138, 0x40A8FFB760000000
  %mul140 = fmul float %div81, %add139
  %add141 = fadd float %mul140, 0x409802EB20000000
  %mul142 = fmul float %div81, %add141
  %add143 = fadd float %mul142, 0x40745CAE20000000
  %mul144 = fmul float %div81, %add143
  %add145 = fadd float %mul144, 0x403E568B20000000
  br label %do.body149

do.body149:                                       ; preds = %if.end121, %if.then84
  %add112.pn = phi float [ %add112, %if.then84 ], [ %add145, %if.end121 ]
  %R.0 = phi float [ %add98, %if.then84 ], [ %add133, %if.end121 ]
  %S.0.in = fmul float %div81, %add112.pn
  %S.0 = fadd float %S.0.in, 1.000000e+00
  %1 = bitcast float %call79 to i32
  %and155 = and i32 %1, -4096
  %2 = bitcast i32 %and155 to float
  %3 = fmul float %2, %2
  %sub161 = fsub float -5.625000e-01, %3
  %call162 = tail call float @expf(float %sub161) #8
  %sub163 = fsub float %2, %call79
  %add164 = fadd float %call79, %2
  %mul165 = fmul float %sub163, %add164
  %div166 = fdiv float %R.0, %S.0
  %add167 = fadd float %mul165, %div166
  %call168 = tail call float @expf(float %add167) #8
  %mul169 = fmul float %call162, %call168
  %cmp170 = icmp sgt i32 %0, 0
  %div173 = fdiv float %mul169, %call79
  br i1 %cmp170, label %return, label %if.else174

if.else174:                                       ; preds = %do.body149
  %sub176 = fsub float 2.000000e+00, %div173
  br label %return

if.else177:                                       ; preds = %if.end75
  %cmp178 = icmp sgt i32 %0, 0
  br i1 %cmp178, label %if.then180, label %return

if.then180:                                       ; preds = %if.else177
  %call181 = tail call double @__math_uflow(i32 0) #8
  %conv182 = fptrunc double %call181 to float
  br label %return

return:                                           ; preds = %if.then180, %if.else177, %if.else174, %do.body149, %if.else115, %if.else71, %if.then68, %if.else, %if.then29, %if.then6, %if.then
  %retval.0 = phi float [ %sub, %if.then6 ], [ %sub32, %if.then29 ], [ %sub36, %if.else ], [ %sub70, %if.then68 ], [ %add74, %if.else71 ], [ %sub176, %if.else174 ], [ %conv182, %if.then180 ], [ %add, %if.then ], [ 2.000000e+00, %if.else115 ], [ %div173, %do.body149 ], [ 2.000000e+00, %if.else177 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @exp10f(float %x) #2 {
entry:
  %call = tail call float @powf(float 1.000000e+01, float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @exp2f(float %x) #2 {
entry:
  %conv = fpext float %x to double
  %0 = bitcast float %x to i32
  %shr.i = lshr i32 %0, 20
  %and = and i32 %shr.i, 2047
  %cmp = icmp ult i32 %and, 1072
  br i1 %cmp, label %if.end23, label %if.then, !prof !426

if.then:                                          ; preds = %entry
  %cmp5 = icmp eq i32 %0, -8388608
  br i1 %cmp5, label %return, label %if.end

if.end:                                           ; preds = %if.then
  %cmp9 = icmp ult i32 %and, 2040
  br i1 %cmp9, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end
  %add = fadd float %x, %x
  br label %return

if.end12:                                         ; preds = %if.end
  %cmp13 = fcmp ogt float %x, 0.000000e+00
  br i1 %cmp13, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end12
  %call16 = tail call float @__math_oflowf(i32 0) #8
  br label %return

if.end17:                                         ; preds = %if.end12
  %cmp18 = fcmp ugt float %x, -1.500000e+02
  br i1 %cmp18, label %if.end23, label %if.then20

if.then20:                                        ; preds = %if.end17
  %call21 = tail call float @__math_uflowf(i32 0) #8
  br label %return

if.end23:                                         ; preds = %if.end17, %entry
  %1 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 1), align 4, !tbaa !465
  %add24 = fadd double %conv, %1
  %2 = bitcast double %add24 to i64
  %sub = fsub double %add24, %1
  %sub26 = fsub double %conv, %sub
  %call25.tr = trunc i64 %2 to i32
  %idxprom = and i32 %call25.tr, 31
  %arrayidx = getelementptr inbounds %struct.exp2f_data* @__exp2f_data, i32 0, i32 0, i32 %idxprom
  %3 = load i64* %arrayidx, align 4, !tbaa !441
  %shl = shl i64 %2, 47
  %add27 = add i64 %shl, %3
  %4 = bitcast i64 %add27 to double
  %5 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 2, i32 0), align 4, !tbaa !429
  %mul = fmul double %5, %sub26
  %6 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 2, i32 1), align 4, !tbaa !429
  %add29 = fadd double %6, %mul
  %mul30 = fmul double %sub26, %sub26
  %7 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 2, i32 2), align 4, !tbaa !429
  %mul31 = fmul double %sub26, %7
  %add32 = fadd double %mul31, 1.000000e+00
  %mul33 = fmul double %mul30, %add29
  %add34 = fadd double %mul33, %add32
  %mul35 = fmul double %4, %add34
  %conv36 = fptrunc double %mul35 to float
  br label %return

return:                                           ; preds = %if.end23, %if.then20, %if.then15, %if.then11, %if.then
  %retval.0 = phi float [ %add, %if.then11 ], [ %call16, %if.then15 ], [ %call21, %if.then20 ], [ %conv36, %if.end23 ], [ 0.000000e+00, %if.then ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @expf(float %x) #2 {
entry:
  %conv = fpext float %x to double
  %0 = bitcast float %x to i32
  %shr.i = lshr i32 %0, 20
  %and = and i32 %shr.i, 2047
  %cmp = icmp ult i32 %and, 1067
  br i1 %cmp, label %if.end23, label %if.then, !prof !426

if.then:                                          ; preds = %entry
  %cmp5 = icmp eq i32 %0, -8388608
  br i1 %cmp5, label %return, label %if.end

if.end:                                           ; preds = %if.then
  %cmp9 = icmp ult i32 %and, 2040
  br i1 %cmp9, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end
  %add = fadd float %x, %x
  br label %return

if.end12:                                         ; preds = %if.end
  %cmp13 = fcmp ogt float %x, 0x40562E42E0000000
  br i1 %cmp13, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end12
  %call16 = tail call float @__math_oflowf(i32 0) #8
  br label %return

if.end17:                                         ; preds = %if.end12
  %cmp18 = fcmp olt float %x, 0xC059FE3680000000
  br i1 %cmp18, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end17
  %call21 = tail call float @__math_uflowf(i32 0) #8
  br label %return

if.end23:                                         ; preds = %if.end17, %entry
  %1 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 4), align 4, !tbaa !467
  %mul = fmul double %conv, %1
  %2 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 3), align 4, !tbaa !468
  %add24 = fadd double %mul, %2
  %3 = bitcast double %add24 to i64
  %sub = fsub double %add24, %2
  %sub26 = fsub double %mul, %sub
  %call25.tr = trunc i64 %3 to i32
  %idxprom = and i32 %call25.tr, 31
  %arrayidx = getelementptr inbounds %struct.exp2f_data* @__exp2f_data, i32 0, i32 0, i32 %idxprom
  %4 = load i64* %arrayidx, align 4, !tbaa !441
  %shl = shl i64 %3, 47
  %add27 = add i64 %shl, %4
  %5 = bitcast i64 %add27 to double
  %6 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 5, i32 0), align 4, !tbaa !429
  %mul29 = fmul double %6, %sub26
  %7 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 5, i32 1), align 4, !tbaa !429
  %add30 = fadd double %7, %mul29
  %mul31 = fmul double %sub26, %sub26
  %8 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 5, i32 2), align 4, !tbaa !429
  %mul32 = fmul double %sub26, %8
  %add33 = fadd double %mul32, 1.000000e+00
  %mul34 = fmul double %mul31, %add30
  %add35 = fadd double %mul34, %add33
  %mul36 = fmul double %5, %add35
  %conv37 = fptrunc double %mul36 to float
  br label %return

return:                                           ; preds = %if.end23, %if.then20, %if.then15, %if.then11, %if.then
  %retval.0 = phi float [ %add, %if.then11 ], [ %call16, %if.then15 ], [ %call21, %if.then20 ], [ %conv37, %if.end23 ], [ 0.000000e+00, %if.then ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @expm1f(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, -2147483648
  %cmp = icmp eq i32 %and, 0
  %and1 = and i32 %0, 2147483647
  %cmp2 = icmp ugt i32 %and1, 1100331075
  br i1 %cmp2, label %if.then3, label %if.end27

if.then3:                                         ; preds = %entry
  %cmp4 = icmp ugt i32 %and1, 2139095040
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then3
  %add = fadd float %x, %x
  br label %return

if.end6:                                          ; preds = %if.then3
  %cmp7 = icmp eq i32 %and1, 2139095040
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.end6
  %x. = select i1 %cmp, float %x, float -1.000000e+00
  br label %return

if.end11:                                         ; preds = %if.end6
  %cmp14 = icmp ugt i32 %and1, 1118925335
  %or.cond = and i1 %cmp, %cmp14
  br i1 %or.cond, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end11
  %call = tail call float @__math_oflowf(i32 0) #8
  br label %return

if.end17:                                         ; preds = %if.end11
  %cmp18 = icmp ne i32 %and, 0
  %add21 = fadd float %x, 0x39B4484C00000000
  %cmp22 = fcmp olt float %add21, 0.000000e+00
  %or.cond262 = and i1 %cmp18, %cmp22
  br i1 %or.cond262, label %return, label %if.end27

if.end27:                                         ; preds = %if.end17, %entry
  %cmp28 = icmp ugt i32 %and1, 1051816472
  br i1 %cmp28, label %if.then30, label %if.else55

if.then30:                                        ; preds = %if.end27
  %cmp31 = icmp ult i32 %and1, 1065686418
  br i1 %cmp31, label %if.then33, label %if.else41

if.then33:                                        ; preds = %if.then30
  br i1 %cmp, label %if.then36, label %if.else38

if.then36:                                        ; preds = %if.then33
  %sub37 = fadd float %x, 0xBFE62E3000000000
  br label %if.end51

if.else38:                                        ; preds = %if.then33
  %add39 = fadd float %x, 0x3FE62E3000000000
  br label %if.end51

if.else41:                                        ; preds = %if.then30
  %mul = fmul float %x, 0x3FF7154760000000
  %cond44 = select i1 %cmp, float 5.000000e-01, float -5.000000e-01
  %add45 = fadd float %mul, %cond44
  %conv46 = fptosi float %add45 to i32
  %conv47 = sitofp i32 %conv46 to float
  %mul48 = fmul float %conv47, 0x3FE62E3000000000
  %sub49 = fsub float %x, %mul48
  %mul50 = fmul float %conv47, 0x3EE2FEFA20000000
  br label %if.end51

if.end51:                                         ; preds = %if.else41, %if.else38, %if.then36
  %k.0 = phi i32 [ 1, %if.then36 ], [ -1, %if.else38 ], [ %conv46, %if.else41 ]
  %lo.0 = phi float [ 0x3EE2FEFA20000000, %if.then36 ], [ 0xBEE2FEFA20000000, %if.else38 ], [ %mul50, %if.else41 ]
  %hi.0 = phi float [ %sub37, %if.then36 ], [ %add39, %if.else38 ], [ %sub49, %if.else41 ]
  %sub52 = fsub float %hi.0, %lo.0
  %sub53 = fsub float %hi.0, %sub52
  %sub54 = fsub float %sub53, %lo.0
  br label %if.end65

if.else55:                                        ; preds = %if.end27
  %cmp56 = icmp ult i32 %and1, 855638016
  br i1 %cmp56, label %if.then58, label %if.end65

if.then58:                                        ; preds = %if.else55
  %add59 = fadd float %x, 0x46293E5940000000
  %sub61 = fsub float %add59, %add59
  %sub62 = fsub float %x, %sub61
  br label %return

if.end65:                                         ; preds = %if.else55, %if.end51
  %k.1 = phi i32 [ %k.0, %if.end51 ], [ 0, %if.else55 ]
  %c.0 = phi float [ %sub54, %if.end51 ], [ undef, %if.else55 ]
  %x.addr.0 = phi float [ %sub52, %if.end51 ], [ %x, %if.else55 ]
  %mul66 = fmul float %x.addr.0, 5.000000e-01
  %mul67 = fmul float %x.addr.0, %mul66
  %mul68 = fmul float %mul67, 0xBE8AFDB760000000
  %add69 = fadd float %mul68, 0x3ED0CFCA80000000
  %mul70 = fmul float %mul67, %add69
  %add71 = fadd float %mul70, 0xBF14CE19A0000000
  %mul72 = fmul float %mul67, %add71
  %add73 = fadd float %mul72, 0x3F5A01A020000000
  %mul74 = fmul float %mul67, %add73
  %add75 = fadd float %mul74, 0xBFA1111120000000
  %mul76 = fmul float %mul67, %add75
  %add77 = fadd float %mul76, 1.000000e+00
  %mul78 = fmul float %mul66, %add77
  %sub79 = fsub float 3.000000e+00, %mul78
  %sub80 = fsub float %add77, %sub79
  %mul81 = fmul float %x.addr.0, %sub79
  %sub82 = fsub float 6.000000e+00, %mul81
  %div = fdiv float %sub80, %sub82
  %mul83 = fmul float %div, %mul67
  %cmp84 = icmp eq i32 %k.1, 0
  br i1 %cmp84, label %if.then86, label %if.else90

if.then86:                                        ; preds = %if.end65
  %mul87 = fmul float %x.addr.0, %mul83
  %sub88 = fsub float %mul87, %mul67
  %sub89 = fsub float %x.addr.0, %sub88
  br label %return

if.else90:                                        ; preds = %if.end65
  %sub91 = fsub float %mul83, %c.0
  %mul92 = fmul float %x.addr.0, %sub91
  %sub93 = fsub float %mul92, %c.0
  %sub94 = fsub float %sub93, %mul67
  switch i32 %k.1, label %if.end115 [
    i32 -1, label %if.then97
    i32 1, label %if.then104
  ]

if.then97:                                        ; preds = %if.else90
  %sub98 = fsub float %x.addr.0, %sub94
  %mul99 = fmul float %sub98, 5.000000e-01
  %sub100 = fadd float %mul99, -5.000000e-01
  br label %return

if.then104:                                       ; preds = %if.else90
  %cmp105 = fcmp olt float %x.addr.0, -2.500000e-01
  br i1 %cmp105, label %if.then107, label %if.else111

if.then107:                                       ; preds = %if.then104
  %add108 = fadd float %x.addr.0, 5.000000e-01
  %sub109 = fsub float %sub94, %add108
  %mul110 = fmul float %sub109, -2.000000e+00
  br label %return

if.else111:                                       ; preds = %if.then104
  %sub112 = fsub float %x.addr.0, %sub94
  %mul113 = fmul float %sub112, 2.000000e+00
  %add114 = fadd float %mul113, 1.000000e+00
  br label %return

if.end115:                                        ; preds = %if.else90
  %k.1.off = add i32 %k.1, 1
  %1 = icmp ugt i32 %k.1.off, 57
  br i1 %1, label %if.then120, label %if.end134

if.then120:                                       ; preds = %if.end115
  %sub121 = fsub float %sub94, %x.addr.0
  %sub122 = fsub float 1.000000e+00, %sub121
  %2 = bitcast float %sub122 to i32
  %shl = shl i32 %k.1, 23
  %add129 = add nsw i32 %2, %shl
  %3 = bitcast i32 %add129 to float
  %sub133 = fadd float %3, -1.000000e+00
  br label %return

if.end134:                                        ; preds = %if.end115
  %cmp135 = icmp slt i32 %k.1, 23
  br i1 %cmp135, label %do.body139, label %do.body161

do.body139:                                       ; preds = %if.end134
  %shr = lshr i32 16777216, %k.1
  %sub141 = sub nsw i32 1065353216, %shr
  %4 = bitcast i32 %sub141 to float
  %sub145 = fsub float %sub94, %x.addr.0
  %sub146 = fsub float %4, %sub145
  %5 = bitcast float %sub146 to i32
  %shl154 = shl i32 %k.1, 23
  %add155 = add nsw i32 %5, %shl154
  br label %if.end184

do.body161:                                       ; preds = %if.end134
  %sub163 = sub nsw i32 127, %k.1
  %shl164 = shl i32 %sub163, 23
  %6 = bitcast i32 %shl164 to float
  %add168 = fadd float %6, %sub94
  %sub169 = fsub float %x.addr.0, %add168
  %add170 = fadd float %sub169, 1.000000e+00
  %7 = bitcast float %add170 to i32
  %shl178 = shl i32 %k.1, 23
  %add179 = add nsw i32 %7, %shl178
  br label %if.end184

if.end184:                                        ; preds = %do.body161, %do.body139
  %y.0.in = phi i32 [ %add155, %do.body139 ], [ %add179, %do.body161 ]
  %y.0 = bitcast i32 %y.0.in to float
  br label %return

return:                                           ; preds = %if.end184, %if.then120, %if.else111, %if.then107, %if.then97, %if.then86, %if.then58, %if.end17, %if.then16, %if.then8, %if.then5
  %retval.0 = phi float [ %add, %if.then5 ], [ %x., %if.then8 ], [ %call, %if.then16 ], [ %sub89, %if.then86 ], [ %sub100, %if.then97 ], [ %mul110, %if.then107 ], [ %add114, %if.else111 ], [ %sub133, %if.then120 ], [ %y.0, %if.end184 ], [ %sub62, %if.then58 ], [ -1.000000e+00, %if.end17 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define float @fabsf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %1 = bitcast i32 %and to float
  ret float %1
}

; Function Attrs: nounwind
define float @fdimf(float %x, float %y) #2 {
entry:
  %call = tail call i32 @__fpclassifyf(float %x) #8
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call1 = tail call i32 @__fpclassifyf(float %y) #8
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %cmp5 = fcmp ogt float %x, %y
  br i1 %cmp5, label %cond.true, label %return

cond.true:                                        ; preds = %if.end4
  %sub = fsub float %x, %y
  br label %return

return:                                           ; preds = %cond.true, %if.end4, %if.end, %entry
  %retval.0 = phi float [ %x, %entry ], [ %y, %if.end ], [ %sub, %cond.true ], [ 0.000000e+00, %if.end4 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define i32 @finitef(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2139095040
  %cmp = icmp ult i32 %and, 2139095040
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
define float @floorf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %shr = lshr i32 %and, 23
  %sub = add nsw i32 %shr, -127
  %cmp = icmp slt i32 %sub, 23
  br i1 %cmp, label %if.then, label %if.else28

if.then:                                          ; preds = %entry
  %cmp1 = icmp slt i32 %sub, 0
  br i1 %cmp1, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %add = fadd float %x, 0x46293E5940000000
  %cmp3 = fcmp ogt float %add, 0.000000e+00
  br i1 %cmp3, label %if.then4, label %do.body34

if.then4:                                         ; preds = %if.then2
  %cmp5 = icmp sgt i32 %0, -1
  br i1 %cmp5, label %do.body34, label %if.else

if.else:                                          ; preds = %if.then4
  %cmp7 = icmp eq i32 %and, 0
  %. = select i1 %cmp7, i32 %0, i32 -1082130432
  br label %do.body34

if.else11:                                        ; preds = %if.then
  %shr12 = lshr i32 8388607, %sub
  %and13 = and i32 %shr12, %0
  %cmp14 = icmp eq i32 %and13, 0
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.else11
  %add17 = fadd float %x, 0x46293E5940000000
  %cmp18 = fcmp ogt float %add17, 0.000000e+00
  br i1 %cmp18, label %if.then19, label %do.body34

if.then19:                                        ; preds = %if.end16
  %cmp20 = icmp slt i32 %0, 0
  br i1 %cmp20, label %if.then21, label %if.end24

if.then21:                                        ; preds = %if.then19
  %shr22 = lshr i32 8388608, %sub
  %add23 = add nsw i32 %shr22, %0
  br label %if.end24

if.end24:                                         ; preds = %if.then21, %if.then19
  %i0.0 = phi i32 [ %add23, %if.then21 ], [ %0, %if.then19 ]
  %neg = xor i32 %shr12, -1
  %and25 = and i32 %i0.0, %neg
  br label %do.body34

if.else28:                                        ; preds = %entry
  %cmp29 = icmp ult i32 %and, 2139095040
  br i1 %cmp29, label %return, label %if.then30

if.then30:                                        ; preds = %if.else28
  %add31 = fadd float %x, %x
  br label %return

do.body34:                                        ; preds = %if.end24, %if.end16, %if.else, %if.then4, %if.then2
  %i0.1 = phi i32 [ %0, %if.then2 ], [ %and25, %if.end24 ], [ %0, %if.end16 ], [ 0, %if.then4 ], [ %., %if.else ]
  %1 = bitcast i32 %i0.1 to float
  br label %return

return:                                           ; preds = %do.body34, %if.then30, %if.else28, %if.else11
  %retval.0 = phi float [ %1, %do.body34 ], [ %add31, %if.then30 ], [ %x, %if.else11 ], [ %x, %if.else28 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define float @fmaf(float %x, float %y, float %z) #3 {
entry:
  %conv = fpext float %x to double
  %conv1 = fpext float %y to double
  %mul = fmul double %conv, %conv1
  %conv2 = fpext float %z to double
  %add = fadd double %mul, %conv2
  %conv3 = fptrunc double %add to float
  ret float %conv3
}

; Function Attrs: nounwind
define float @fmaxf(float %x, float %y) #2 {
entry:
  %call = tail call i32 @__fpclassifyf(float %x) #8
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call1 = tail call i32 @__fpclassifyf(float %y) #8
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %cmp5 = fcmp ogt float %x, %y
  %cond = select i1 %cmp5, float %x, float %y
  br label %return

return:                                           ; preds = %if.end4, %if.end, %entry
  %retval.0 = phi float [ %cond, %if.end4 ], [ %y, %entry ], [ %x, %if.end ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @fminf(float %x, float %y) #2 {
entry:
  %call = tail call i32 @__fpclassifyf(float %x) #8
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call1 = tail call i32 @__fpclassifyf(float %y) #8
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %cmp5 = fcmp olt float %x, %y
  %cond = select i1 %cmp5, float %x, float %y
  br label %return

return:                                           ; preds = %if.end4, %if.end, %entry
  %retval.0 = phi float [ %cond, %if.end4 ], [ %y, %entry ], [ %x, %if.end ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define i32 @__fpclassifyf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %1 = and i32 %0, 2147483647
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %return, label %if.else

if.else:                                          ; preds = %entry
  %.off = add i32 %0, -8388608
  %3 = icmp ult i32 %.off, 2130706432
  %.off40 = add i32 %0, 2139095040
  %4 = icmp ult i32 %.off40, 2130706432
  %or.cond = or i1 %3, %4
  br i1 %or.cond, label %return, label %if.else9

if.else9:                                         ; preds = %if.else
  %cmp10 = icmp ne i32 %0, 0
  %cmp12 = icmp ult i32 %0, 8388608
  %or.cond26 = and i1 %cmp10, %cmp12
  %.off41 = add i32 %0, 2147483647
  %5 = icmp ult i32 %.off41, 8388607
  %or.cond44 = or i1 %or.cond26, %5
  br i1 %or.cond44, label %return, label %if.else18

if.else18:                                        ; preds = %if.else9
  %6 = icmp eq i32 %1, 2139095040
  %. = zext i1 %6 to i32
  br label %return

return:                                           ; preds = %if.else18, %if.else9, %if.else, %entry
  %retval.0 = phi i32 [ 2, %entry ], [ 4, %if.else ], [ 3, %if.else9 ], [ %., %if.else18 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define float @frexpf(float %x, i32* nocapture %eptr) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  store i32 0, i32* %eptr, align 4, !tbaa !433
  %1 = add nsw i32 %and, -1
  %2 = icmp ugt i32 %1, 2139095038
  br i1 %2, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp2 = icmp ult i32 %and, 8388608
  br i1 %cmp2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %if.end
  %mul = fmul float %x, 0x4180000000000000
  %3 = bitcast float %mul to i32
  %and9 = and i32 %3, 2147483647
  store i32 -25, i32* %eptr, align 4, !tbaa !433
  br label %if.end10

if.end10:                                         ; preds = %if.then3, %if.end
  %4 = phi i32 [ -25, %if.then3 ], [ 0, %if.end ]
  %ix.0 = phi i32 [ %and9, %if.then3 ], [ %and, %if.end ]
  %hx.0 = phi i32 [ %3, %if.then3 ], [ %0, %if.end ]
  %shr28 = lshr i32 %ix.0, 23
  %sub = add nsw i32 %shr28, -126
  %add = add nsw i32 %sub, %4
  store i32 %add, i32* %eptr, align 4, !tbaa !433
  %and11 = and i32 %hx.0, -2139095041
  %or = or i32 %and11, 1056964608
  %5 = bitcast i32 %or to float
  br label %return

return:                                           ; preds = %if.end10, %entry
  %retval.0 = phi float [ %5, %if.end10 ], [ %x, %entry ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define i32 @ilogbf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1 = icmp ult i32 %and, 8388608
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %shl = shl i32 %0, 8
  %cmp317 = icmp sgt i32 %shl, 0
  br i1 %cmp317, label %for.body.preheader, label %return

for.body.preheader:                               ; preds = %if.then2
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %ix.019 = phi i32 [ %sub, %for.body ], [ -126, %for.body.preheader ]
  %hx.018 = phi i32 [ %shl4, %for.body ], [ %shl, %for.body.preheader ]
  %sub = add nsw i32 %ix.019, -1
  %shl4 = shl i32 %hx.018, 1
  %cmp3 = icmp sgt i32 %shl4, 0
  br i1 %cmp3, label %for.body, label %return.loopexit

if.else:                                          ; preds = %if.end
  %cmp5 = icmp ult i32 %and, 2139095040
  br i1 %cmp5, label %if.else7, label %return

if.else7:                                         ; preds = %if.else
  %shr16 = lshr i32 %and, 23
  %sub8 = add nsw i32 %shr16, -127
  br label %return

return.loopexit:                                  ; preds = %for.body
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  br label %return

return:                                           ; preds = %return.loopexit, %if.else7, %if.else, %if.then2, %entry
  %retval.0 = phi i32 [ %sub8, %if.else7 ], [ -2147483647, %entry ], [ 2147483647, %if.else ], [ -126, %if.then2 ], [ %sub.lcssa, %return.loopexit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readnone
define float @infinityf() #3 {
entry:
  ret float 0x7FF0000000000000
}

; Function Attrs: nounwind readnone
define i32 @finite(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %sub = add nsw i32 %and, -2146435072
  %shr = lshr i32 %sub, 31
  ret i32 %shr
}

; Function Attrs: nounwind readnone
define i32 @isinff(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp eq i32 %and, 2139095040
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
define i32 @__isinff(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp eq i32 %and, 2139095040
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
define i32 @isnanf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ugt i32 %and, 2139095040
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
define i32 @__isnanf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ugt i32 %and, 2139095040
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
define float @ldexpf(float %value, i32 %exp) #2 {
entry:
  %call = tail call i32 @finitef(float %value) #8
  %tobool = icmp eq i32 %call, 0
  %cmp = fcmp oeq float %value, 0.000000e+00
  %or.cond = or i1 %tobool, %cmp
  br i1 %or.cond, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call1 = tail call float @scalbnf(float %value, i32 %exp) #8
  %call2 = tail call i32 @finitef(float %call1) #8
  %tobool3 = icmp eq i32 %call2, 0
  %cmp5 = fcmp oeq float %call1, 0.000000e+00
  %or.cond9 = or i1 %tobool3, %cmp5
  br i1 %or.cond9, label %if.then6, label %return

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32* @__errno() #8
  store i32 34, i32* %call7, align 4, !tbaa !433
  br label %return

return:                                           ; preds = %if.then6, %if.end, %entry
  %retval.0 = phi float [ %value, %entry ], [ %call1, %if.end ], [ %call1, %if.then6 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define i64 @llrintf(float %x) #2 {
entry:
  %w = alloca float, align 4
  %0 = bitcast float %x to i32
  %shr = lshr i32 %0, 31
  %and = lshr i32 %0, 23
  %shr1 = and i32 %and, 255
  %sub = add nsw i32 %shr1, -127
  %cmp = icmp slt i32 %sub, 63
  br i1 %cmp, label %if.then, label %if.else30

if.then:                                          ; preds = %entry
  %cmp2 = icmp slt i32 %sub, -1
  br i1 %cmp2, label %return, label %if.else

if.else:                                          ; preds = %if.then
  %cmp4 = icmp sgt i32 %sub, 22
  br i1 %cmp4, label %if.then5, label %if.else8

if.then5:                                         ; preds = %if.else
  %and6 = and i32 %0, 8388607
  %or = or i32 %and6, 8388608
  %conv = zext i32 %or to i64
  %sub7 = add nsw i32 %shr1, -150
  %sh_prom = zext i32 %sub7 to i64
  %shl = shl i64 %conv, %sh_prom
  br label %if.end32

if.else8:                                         ; preds = %if.else
  %arrayidx = getelementptr inbounds [2 x float]* @TWO23, i32 0, i32 %shr
  %1 = load float* %arrayidx, align 4, !tbaa !435
  %add = fadd float %1, %x
  store volatile float %add, float* %w, align 4, !tbaa !435
  %w.0.w.0. = load volatile float* %w, align 4
  %2 = load float* %arrayidx, align 4, !tbaa !435
  %sub10 = fsub float %w.0.w.0., %2
  %3 = bitcast float %sub10 to i32
  %and16 = and i32 %3, 2147483647
  %cmp17 = icmp eq i32 %and16, 0
  br i1 %cmp17, label %return, label %if.end

if.end:                                           ; preds = %if.else8
  %shr20 = lshr i32 %3, 23
  %and21 = and i32 %shr20, 255
  %and23 = and i32 %3, 8388607
  %or24 = or i32 %and23, 8388608
  %sub25 = sub i32 150, %and21
  %shr26 = lshr i32 %or24, %sub25
  %conv27 = zext i32 %shr26 to i64
  br label %if.end32

if.else30:                                        ; preds = %entry
  %conv31 = fptosi float %x to i64
  br label %return

if.end32:                                         ; preds = %if.end, %if.then5
  %result.0 = phi i64 [ %shl, %if.then5 ], [ %conv27, %if.end ]
  %tobool = icmp ne i32 %shr, 0
  %sub33 = sub nsw i64 0, %result.0
  %cond = select i1 %tobool, i64 %sub33, i64 %result.0
  br label %return

return:                                           ; preds = %if.end32, %if.else30, %if.else8, %if.then
  %retval.0 = phi i64 [ %cond, %if.end32 ], [ %conv31, %if.else30 ], [ 0, %if.then ], [ 0, %if.else8 ]
  ret i64 %retval.0
}

; Function Attrs: nounwind readnone
define i64 @llroundf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = lshr i32 %0, 23
  %shr = and i32 %and, 255
  %sub = add nsw i32 %shr, -127
  %1 = ashr i32 %0, 31
  %2 = or i32 %1, 1
  %and2 = and i32 %0, 8388607
  %or = or i32 %and2, 8388608
  %cmp3 = icmp slt i32 %sub, 63
  br i1 %cmp3, label %if.then, label %if.else19

if.then:                                          ; preds = %entry
  %cmp4 = icmp slt i32 %sub, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %cmp6 = icmp slt i32 %sub, -1
  %3 = sext i32 %2 to i64
  %conv = select i1 %cmp6, i64 0, i64 %3
  br label %return

if.else:                                          ; preds = %if.then
  %cmp8 = icmp sgt i32 %sub, 22
  br i1 %cmp8, label %if.then10, label %if.else13

if.then10:                                        ; preds = %if.else
  %conv11 = zext i32 %or to i64
  %sub12 = add nsw i32 %shr, -150
  %sh_prom = zext i32 %sub12 to i64
  %shl = shl i64 %conv11, %sh_prom
  br label %if.end21

if.else13:                                        ; preds = %if.else
  %shr14 = lshr i32 4194304, %sub
  %add = add i32 %shr14, %or
  %sub15 = sub i32 150, %shr
  %shr16 = lshr i32 %add, %sub15
  %conv17 = zext i32 %shr16 to i64
  br label %if.end21

if.else19:                                        ; preds = %entry
  %conv20 = fptosi float %x to i64
  br label %return

if.end21:                                         ; preds = %if.else13, %if.then10
  %result.0 = phi i64 [ %shl, %if.then10 ], [ %conv17, %if.else13 ]
  %conv22 = sext i32 %2 to i64
  %mul = mul nsw i64 %result.0, %conv22
  br label %return

return:                                           ; preds = %if.end21, %if.else19, %if.then5
  %retval.0 = phi i64 [ %conv, %if.then5 ], [ %mul, %if.end21 ], [ %conv20, %if.else19 ]
  ret i64 %retval.0
}

; Function Attrs: nounwind
define float @log1pf(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp slt i32 %0, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %add = fadd float %x, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp slt i32 %0, 1054086103
  br i1 %cmp1, label %if.then2, label %if.then24

if.then2:                                         ; preds = %if.end
  %cmp3 = icmp ugt i32 %and, 1065353215
  br i1 %cmp3, label %if.then4, label %if.end8

if.then4:                                         ; preds = %if.then2
  %cmp5 = fcmp oeq float %x, -1.000000e+00
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then4
  %call = tail call float @__math_divzerof(i32 1) #8
  br label %return

if.else:                                          ; preds = %if.then4
  %call7 = tail call float @__math_invalidf(float %x) #8
  br label %return

if.end8:                                          ; preds = %if.then2
  %cmp9 = icmp ult i32 %and, 822083584
  br i1 %cmp9, label %if.then10, label %if.end17

if.then10:                                        ; preds = %if.end8
  %add11 = fadd float %x, 0x4180000000000000
  %cmp12 = fcmp ogt float %add11, 0.000000e+00
  %cmp13 = icmp ult i32 %and, 612368384
  %or.cond = and i1 %cmp12, %cmp13
  br i1 %or.cond, label %return, label %if.else15

if.else15:                                        ; preds = %if.then10
  %mul = fmul float %x, %x
  %mul16 = fmul float %mul, 5.000000e-01
  %sub = fsub float %x, %mul16
  br label %return

if.end17:                                         ; preds = %if.end8
  %.off = add i32 %0, 1097468384
  %1 = icmp ugt i32 %.off, 1097468384
  br i1 %1, label %if.end67.thread, label %if.then24

if.end67.thread:                                  ; preds = %if.end17
  %mul68208 = fmul float %x, 5.000000e-01
  %mul69209 = fmul float %mul68208, %x
  br label %if.end99

if.then24:                                        ; preds = %if.end17, %if.end
  %cmp25 = icmp slt i32 %0, 1509949440
  br i1 %cmp25, label %if.then26, label %if.else39

if.then26:                                        ; preds = %if.then24
  %add27 = fadd float %x, 1.000000e+00
  %2 = bitcast float %add27 to i32
  %shr = ashr i32 %2, 23
  %sub33 = add nsw i32 %shr, -127
  %cmp34 = icmp sgt i32 %sub33, 0
  br i1 %cmp34, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then26
  %sub35 = fsub float %add27, %x
  %sub36 = fsub float 1.000000e+00, %sub35
  br label %cond.end

cond.false:                                       ; preds = %if.then26
  %sub37 = fadd float %add27, -1.000000e+00
  %sub38 = fsub float %x, %sub37
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %sub36, %cond.true ], [ %sub38, %cond.false ]
  %div = fdiv float %cond, %add27
  br label %if.end47

if.else39:                                        ; preds = %if.then24
  %shr45 = ashr i32 %0, 23
  %sub46 = add nsw i32 %shr45, -127
  br label %if.end47

if.end47:                                         ; preds = %if.else39, %cond.end
  %hu.1 = phi i32 [ %2, %cond.end ], [ %0, %if.else39 ]
  %k.1 = phi i32 [ %sub33, %cond.end ], [ %sub46, %if.else39 ]
  %c.0 = phi float [ %div, %cond.end ], [ 0.000000e+00, %if.else39 ]
  %and48 = and i32 %hu.1, 8388607
  %cmp49 = icmp ult i32 %and48, 3474679
  br i1 %cmp49, label %do.body51, label %if.else55

do.body51:                                        ; preds = %if.end47
  %or = or i32 %and48, 1065353216
  br label %if.end67

if.else55:                                        ; preds = %if.end47
  %add56 = add nsw i32 %k.1, 1
  %or59 = or i32 %and48, 1056964608
  %sub63 = sub nsw i32 8388608, %and48
  %shr64206 = lshr i32 %sub63, 2
  br label %if.end67

if.end67:                                         ; preds = %if.else55, %do.body51
  %hu.2 = phi i32 [ %and48, %do.body51 ], [ %shr64206, %if.else55 ]
  %k.2 = phi i32 [ %k.1, %do.body51 ], [ %add56, %if.else55 ]
  %u.0.in = phi i32 [ %or, %do.body51 ], [ %or59, %if.else55 ]
  %u.0 = bitcast i32 %u.0.in to float
  %sub66 = fadd float %u.0, -1.000000e+00
  %mul68 = fmul float %sub66, 5.000000e-01
  %mul69 = fmul float %sub66, %mul68
  %cmp70 = icmp eq i32 %hu.2, 0
  br i1 %cmp70, label %if.then71, label %if.end99

if.then71:                                        ; preds = %if.end67
  %cmp72 = fcmp oeq float %sub66, 0.000000e+00
  br i1 %cmp72, label %if.then73, label %if.end82

if.then73:                                        ; preds = %if.then71
  %cmp74 = icmp eq i32 %k.2, 0
  br i1 %cmp74, label %return, label %if.else76

if.else76:                                        ; preds = %if.then73
  %conv = sitofp i32 %k.2 to float
  %mul77 = fmul float %conv, 0x3EE2FEFA20000000
  %add78 = fadd float %c.0, %mul77
  %mul80 = fmul float %conv, 0x3FE62E3000000000
  %add81 = fadd float %mul80, %add78
  br label %return

if.end82:                                         ; preds = %if.then71
  %mul83 = fmul float %sub66, 0x3FE5555560000000
  %sub84 = fsub float 1.000000e+00, %mul83
  %mul85 = fmul float %mul69, %sub84
  %cmp86 = icmp eq i32 %k.2, 0
  br i1 %cmp86, label %if.then88, label %if.else90

if.then88:                                        ; preds = %if.end82
  %sub89 = fsub float %sub66, %mul85
  br label %return

if.else90:                                        ; preds = %if.end82
  %conv91 = sitofp i32 %k.2 to float
  %mul92 = fmul float %conv91, 0x3FE62E3000000000
  %mul94 = fmul float %conv91, 0x3EE2FEFA20000000
  %add95 = fadd float %c.0, %mul94
  %sub96 = fsub float %mul85, %add95
  %sub97 = fsub float %sub96, %sub66
  %sub98 = fsub float %mul92, %sub97
  br label %return

if.end99:                                         ; preds = %if.end67, %if.end67.thread
  %mul69214 = phi float [ %mul69209, %if.end67.thread ], [ %mul69, %if.end67 ]
  %f.1213 = phi float [ %x, %if.end67.thread ], [ %sub66, %if.end67 ]
  %c.1212 = phi float [ undef, %if.end67.thread ], [ %c.0, %if.end67 ]
  %k.3211 = phi i32 [ 0, %if.end67.thread ], [ %k.2, %if.end67 ]
  %add100 = fadd float %f.1213, 2.000000e+00
  %div101 = fdiv float %f.1213, %add100
  %mul102 = fmul float %div101, %div101
  %mul103 = fmul float %mul102, 0x3FC2F112E0000000
  %add104 = fadd float %mul103, 0x3FC39A09E0000000
  %mul105 = fmul float %mul102, %add104
  %add106 = fadd float %mul105, 0x3FC74664A0000000
  %mul107 = fmul float %mul102, %add106
  %add108 = fadd float %mul107, 0x3FCC71C520000000
  %mul109 = fmul float %mul102, %add108
  %add110 = fadd float %mul109, 0x3FD24924A0000000
  %mul111 = fmul float %mul102, %add110
  %add112 = fadd float %mul111, 0x3FD99999A0000000
  %mul113 = fmul float %mul102, %add112
  %add114 = fadd float %mul113, 0x3FE5555560000000
  %mul115 = fmul float %mul102, %add114
  %cmp116 = icmp eq i32 %k.3211, 0
  br i1 %cmp116, label %if.then118, label %if.else123

if.then118:                                       ; preds = %if.end99
  %add119 = fadd float %mul69214, %mul115
  %mul120 = fmul float %div101, %add119
  %sub121 = fsub float %mul69214, %mul120
  %sub122 = fsub float %f.1213, %sub121
  br label %return

if.else123:                                       ; preds = %if.end99
  %conv124 = sitofp i32 %k.3211 to float
  %mul125 = fmul float %conv124, 0x3FE62E3000000000
  %add126 = fadd float %mul69214, %mul115
  %mul127 = fmul float %div101, %add126
  %mul129 = fmul float %conv124, 0x3EE2FEFA20000000
  %add130 = fadd float %c.1212, %mul129
  %add131 = fadd float %add130, %mul127
  %sub132 = fsub float %mul69214, %add131
  %sub133 = fsub float %sub132, %f.1213
  %sub134 = fsub float %mul125, %sub133
  br label %return

return:                                           ; preds = %if.else123, %if.then118, %if.else90, %if.then88, %if.else76, %if.then73, %if.else15, %if.then10, %if.else, %if.then6, %if.then
  %retval.0 = phi float [ %call, %if.then6 ], [ %call7, %if.else ], [ %sub, %if.else15 ], [ %add81, %if.else76 ], [ %sub89, %if.then88 ], [ %sub98, %if.else90 ], [ %sub122, %if.then118 ], [ %sub134, %if.else123 ], [ %add, %if.then ], [ %x, %if.then10 ], [ 0.000000e+00, %if.then73 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @log2f(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %cmp = icmp eq i32 %0, 1065353216
  br i1 %cmp, label %return, label %if.end, !prof !418

if.end:                                           ; preds = %entry
  %sub = add i32 %0, -8388608
  %cmp3 = icmp ugt i32 %sub, 2130706431
  br i1 %cmp3, label %if.then7, label %if.end27, !prof !418

if.then7:                                         ; preds = %if.end
  %mul = shl i32 %0, 1
  %cmp8 = icmp eq i32 %mul, 0
  br i1 %cmp8, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.then7
  %call11 = tail call float @__math_divzerof(i32 1) #8
  br label %return

if.end12:                                         ; preds = %if.then7
  %cmp13 = icmp eq i32 %0, 2139095040
  br i1 %cmp13, label %return, label %if.end16

if.end16:                                         ; preds = %if.end12
  %tobool17 = icmp slt i32 %0, 0
  %cmp19 = icmp ugt i32 %mul, -16777217
  %or.cond = or i1 %tobool17, %cmp19
  br i1 %or.cond, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.end16
  %call22 = tail call float @__math_invalidf(float %x) #8
  br label %return

if.end23:                                         ; preds = %if.end16
  %mul24 = fmul float %x, 8.388608e+06
  %1 = bitcast float %mul24 to i32
  %sub26 = add i32 %1, -192937984
  br label %if.end27

if.end27:                                         ; preds = %if.end23, %if.end
  %ix.0 = phi i32 [ %sub26, %if.end23 ], [ %0, %if.end ]
  %sub28 = add i32 %ix.0, -1060306944
  %shr = lshr i32 %sub28, 19
  %rem = and i32 %shr, 15
  %and29 = and i32 %sub28, -8388608
  %sub30 = sub i32 %ix.0, %and29
  %shr31 = ashr i32 %sub28, 23
  %invc32 = getelementptr inbounds %struct.log2f_data* @__log2f_data, i32 0, i32 0, i32 %rem, i32 0
  %2 = load double* %invc32, align 4, !tbaa !450
  %logc34 = getelementptr inbounds %struct.log2f_data* @__log2f_data, i32 0, i32 0, i32 %rem, i32 1
  %3 = load double* %logc34, align 4, !tbaa !452
  %4 = bitcast i32 %sub30 to float
  %conv36 = fpext float %4 to double
  %mul37 = fmul double %2, %conv36
  %sub38 = fadd double %mul37, -1.000000e+00
  %conv39 = sitofp i32 %shr31 to double
  %add = fadd double %3, %conv39
  %mul40 = fmul double %sub38, %sub38
  %5 = load double* getelementptr inbounds (%struct.log2f_data* @__log2f_data, i32 0, i32 1, i32 1), align 4, !tbaa !429
  %mul41 = fmul double %5, %sub38
  %6 = load double* getelementptr inbounds (%struct.log2f_data* @__log2f_data, i32 0, i32 1, i32 2), align 4, !tbaa !429
  %add42 = fadd double %6, %mul41
  %7 = load double* getelementptr inbounds (%struct.log2f_data* @__log2f_data, i32 0, i32 1, i32 0), align 4, !tbaa !429
  %mul43 = fmul double %7, %mul40
  %add44 = fadd double %mul43, %add42
  %8 = load double* getelementptr inbounds (%struct.log2f_data* @__log2f_data, i32 0, i32 1, i32 3), align 4, !tbaa !429
  %mul45 = fmul double %8, %sub38
  %add46 = fadd double %add, %mul45
  %mul47 = fmul double %mul40, %add44
  %add48 = fadd double %add46, %mul47
  %conv49 = fptrunc double %add48 to float
  br label %return

return:                                           ; preds = %if.end27, %if.then21, %if.end12, %if.then10, %entry
  %retval.0 = phi float [ %call11, %if.then10 ], [ %call22, %if.then21 ], [ %conv49, %if.end27 ], [ 0.000000e+00, %entry ], [ %x, %if.end12 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define float @logbf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp6 = icmp ult i32 %and, 8388608
  br i1 %cmp6, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.end
  %shl = shl i32 %0, 8
  %cmp933 = icmp sgt i32 %shl, 0
  br i1 %cmp933, label %for.body.preheader, label %return

for.body.preheader:                               ; preds = %if.then8
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %hx.035 = phi i32 [ %shl11, %for.body ], [ %shl, %for.body.preheader ]
  %ix.034 = phi i32 [ %sub, %for.body ], [ -126, %for.body.preheader ]
  %sub = add nsw i32 %ix.034, -1
  %shl11 = shl i32 %hx.035, 1
  %cmp9 = icmp sgt i32 %shl11, 0
  br i1 %cmp9, label %for.body, label %for.cond.for.end_crit_edge

for.cond.for.end_crit_edge:                       ; preds = %for.body
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  %phitmp = sitofp i32 %sub.lcssa to float
  br label %return

if.else:                                          ; preds = %if.end
  %cmp13 = icmp eq i32 %and, 2139095040
  br i1 %cmp13, label %return, label %if.else16

if.else16:                                        ; preds = %if.else
  %cmp17 = icmp ugt i32 %and, 2139095040
  br i1 %cmp17, label %return, label %if.else20

if.else20:                                        ; preds = %if.else16
  %shr32 = lshr i32 %and, 23
  %sub21 = add nsw i32 %shr32, -127
  %conv22 = sitofp i32 %sub21 to float
  br label %return

return:                                           ; preds = %if.else20, %if.else16, %if.else, %for.cond.for.end_crit_edge, %if.then8, %entry
  %retval.0 = phi float [ %conv22, %if.else20 ], [ 0x7FF0000000000000, %if.else ], [ %x, %if.else16 ], [ 0xFFF0000000000000, %entry ], [ %phitmp, %for.cond.for.end_crit_edge ], [ -1.260000e+02, %if.then8 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @logf(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %cmp = icmp eq i32 %0, 1065353216
  br i1 %cmp, label %return, label %if.end, !prof !418

if.end:                                           ; preds = %entry
  %sub = add i32 %0, -8388608
  %cmp3 = icmp ugt i32 %sub, 2130706431
  br i1 %cmp3, label %if.then7, label %if.end27, !prof !418

if.then7:                                         ; preds = %if.end
  %mul = shl i32 %0, 1
  %cmp8 = icmp eq i32 %mul, 0
  br i1 %cmp8, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.then7
  %call11 = tail call float @__math_divzerof(i32 1) #8
  br label %return

if.end12:                                         ; preds = %if.then7
  %cmp13 = icmp eq i32 %0, 2139095040
  br i1 %cmp13, label %return, label %if.end16

if.end16:                                         ; preds = %if.end12
  %tobool17 = icmp slt i32 %0, 0
  %cmp19 = icmp ugt i32 %mul, -16777217
  %or.cond = or i1 %tobool17, %cmp19
  br i1 %or.cond, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.end16
  %call22 = tail call float @__math_invalidf(float %x) #8
  br label %return

if.end23:                                         ; preds = %if.end16
  %mul24 = fmul float %x, 8.388608e+06
  %1 = bitcast float %mul24 to i32
  %sub26 = add i32 %1, -192937984
  br label %if.end27

if.end27:                                         ; preds = %if.end23, %if.end
  %ix.0 = phi i32 [ %sub26, %if.end23 ], [ %0, %if.end ]
  %sub28 = add i32 %ix.0, -1060306944
  %shr = lshr i32 %sub28, 19
  %rem = and i32 %shr, 15
  %shr29 = ashr i32 %sub28, 23
  %and30 = and i32 %sub28, -8388608
  %sub31 = sub i32 %ix.0, %and30
  %invc32 = getelementptr inbounds %struct.logf_data* @__logf_data, i32 0, i32 0, i32 %rem, i32 0
  %2 = load double* %invc32, align 4, !tbaa !450
  %logc34 = getelementptr inbounds %struct.logf_data* @__logf_data, i32 0, i32 0, i32 %rem, i32 1
  %3 = load double* %logc34, align 4, !tbaa !452
  %4 = bitcast i32 %sub31 to float
  %conv36 = fpext float %4 to double
  %mul37 = fmul double %2, %conv36
  %sub38 = fadd double %mul37, -1.000000e+00
  %conv39 = sitofp i32 %shr29 to double
  %5 = load double* getelementptr inbounds (%struct.logf_data* @__logf_data, i32 0, i32 1), align 4, !tbaa !469
  %mul40 = fmul double %conv39, %5
  %add = fadd double %3, %mul40
  %mul41 = fmul double %sub38, %sub38
  %6 = load double* getelementptr inbounds (%struct.logf_data* @__logf_data, i32 0, i32 2, i32 1), align 4, !tbaa !429
  %mul42 = fmul double %6, %sub38
  %7 = load double* getelementptr inbounds (%struct.logf_data* @__logf_data, i32 0, i32 2, i32 2), align 4, !tbaa !429
  %add43 = fadd double %7, %mul42
  %8 = load double* getelementptr inbounds (%struct.logf_data* @__logf_data, i32 0, i32 2, i32 0), align 4, !tbaa !429
  %mul44 = fmul double %8, %mul41
  %add45 = fadd double %mul44, %add43
  %mul46 = fmul double %mul41, %add45
  %add47 = fadd double %add, %sub38
  %add48 = fadd double %add47, %mul46
  %conv49 = fptrunc double %add48 to float
  br label %return

return:                                           ; preds = %if.end27, %if.then21, %if.end12, %if.then10, %entry
  %retval.0 = phi float [ %call11, %if.then10 ], [ %call22, %if.then21 ], [ %conv49, %if.end27 ], [ 0.000000e+00, %entry ], [ %x, %if.end12 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define double @floor(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %shr106107 = lshr i64 %0, 52
  %shr106 = trunc i64 %shr106107 to i32
  %and = and i32 %shr106, 2047
  %sub = add nsw i32 %and, -1023
  %cmp = icmp slt i32 %sub, 20
  br i1 %cmp, label %if.then, label %if.else31

if.then:                                          ; preds = %entry
  %cmp2 = icmp slt i32 %sub, 0
  br i1 %cmp2, label %if.then3, label %if.else13

if.then3:                                         ; preds = %if.then
  %add = fadd double %x, 1.000000e+300
  %cmp4 = fcmp ogt double %add, 0.000000e+00
  br i1 %cmp4, label %if.then5, label %do.body67

if.then5:                                         ; preds = %if.then3
  %cmp6 = icmp sgt i32 %ew_u.sroa.0.4.extract.trunc, -1
  br i1 %cmp6, label %do.body67, label %if.else

if.else:                                          ; preds = %if.then5
  %and8 = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %or = or i32 %and8, %ew_u.sroa.0.0.extract.trunc
  %cmp9 = icmp eq i32 %or, 0
  %ew_u.sroa.0.0.extract.trunc. = select i1 %cmp9, i32 %ew_u.sroa.0.0.extract.trunc, i32 0
  %ew_u.sroa.0.4.extract.trunc. = select i1 %cmp9, i32 %ew_u.sroa.0.4.extract.trunc, i32 -1074790400
  br label %do.body67

if.else13:                                        ; preds = %if.then
  %shr14 = lshr i32 1048575, %sub
  %and15 = and i32 %shr14, %ew_u.sroa.0.4.extract.trunc
  %or16 = or i32 %and15, %ew_u.sroa.0.0.extract.trunc
  %cmp17 = icmp eq i32 %or16, 0
  br i1 %cmp17, label %return, label %if.end19

if.end19:                                         ; preds = %if.else13
  %add20 = fadd double %x, 1.000000e+300
  %cmp21 = fcmp ogt double %add20, 0.000000e+00
  br i1 %cmp21, label %if.then22, label %do.body67

if.then22:                                        ; preds = %if.end19
  %cmp23 = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp23, label %if.then24, label %if.end27

if.then24:                                        ; preds = %if.then22
  %shr25 = lshr i32 1048576, %sub
  %add26 = add nsw i32 %shr25, %ew_u.sroa.0.4.extract.trunc
  br label %if.end27

if.end27:                                         ; preds = %if.then24, %if.then22
  %i0.0 = phi i32 [ %add26, %if.then24 ], [ %ew_u.sroa.0.4.extract.trunc, %if.then22 ]
  %neg = xor i32 %shr14, -1
  %and28 = and i32 %i0.0, %neg
  br label %do.body67

if.else31:                                        ; preds = %entry
  %cmp32 = icmp sgt i32 %sub, 51
  br i1 %cmp32, label %if.then33, label %if.else38

if.then33:                                        ; preds = %if.else31
  %cmp34 = icmp eq i32 %sub, 1024
  br i1 %cmp34, label %if.then35, label %return

if.then35:                                        ; preds = %if.then33
  %add36 = fadd double %x, %x
  br label %return

if.else38:                                        ; preds = %if.else31
  %sub39 = add nsw i32 %and, -1043
  %shr40 = lshr i32 -1, %sub39
  %and41 = and i32 %shr40, %ew_u.sroa.0.0.extract.trunc
  %cmp42 = icmp eq i32 %and41, 0
  br i1 %cmp42, label %return, label %if.end44

if.end44:                                         ; preds = %if.else38
  %add45 = fadd double %x, 1.000000e+300
  %cmp46 = fcmp ogt double %add45, 0.000000e+00
  br i1 %cmp46, label %if.then47, label %do.body67

if.then47:                                        ; preds = %if.end44
  %cmp48 = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 0
  br i1 %cmp48, label %if.then49, label %if.end61

if.then49:                                        ; preds = %if.then47
  %cmp50 = icmp eq i32 %sub, 20
  br i1 %cmp50, label %if.then51, label %if.else53

if.then51:                                        ; preds = %if.then49
  %add52 = add nsw i32 %ew_u.sroa.0.4.extract.trunc, 1
  br label %if.end61

if.else53:                                        ; preds = %if.then49
  %sub54 = sub i32 1075, %and
  %shl = shl i32 1, %sub54
  %uadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %ew_u.sroa.0.0.extract.trunc, i32 %shl)
  %1 = extractvalue { i32, i1 } %uadd, 0
  %cmp56 = extractvalue { i32, i1 } %uadd, 1
  %add58 = zext i1 %cmp56 to i32
  %add58.ew_u.sroa.0.4.extract.trunc = add nsw i32 %add58, %ew_u.sroa.0.4.extract.trunc
  br label %if.end61

if.end61:                                         ; preds = %if.else53, %if.then51, %if.then47
  %i1.0 = phi i32 [ %ew_u.sroa.0.0.extract.trunc, %if.then51 ], [ %1, %if.else53 ], [ %ew_u.sroa.0.0.extract.trunc, %if.then47 ]
  %i0.2 = phi i32 [ %add52, %if.then51 ], [ %add58.ew_u.sroa.0.4.extract.trunc, %if.else53 ], [ %ew_u.sroa.0.4.extract.trunc, %if.then47 ]
  %neg62 = xor i32 %shr40, -1
  %and63 = and i32 %i1.0, %neg62
  br label %do.body67

do.body67:                                        ; preds = %if.end61, %if.end44, %if.end27, %if.end19, %if.else, %if.then5, %if.then3
  %i1.1 = phi i32 [ %ew_u.sroa.0.0.extract.trunc, %if.then3 ], [ 0, %if.end27 ], [ %ew_u.sroa.0.0.extract.trunc, %if.end19 ], [ %and63, %if.end61 ], [ %ew_u.sroa.0.0.extract.trunc, %if.end44 ], [ 0, %if.then5 ], [ %ew_u.sroa.0.0.extract.trunc., %if.else ]
  %i0.3 = phi i32 [ %ew_u.sroa.0.4.extract.trunc, %if.then3 ], [ %and28, %if.end27 ], [ %ew_u.sroa.0.4.extract.trunc, %if.end19 ], [ %i0.2, %if.end61 ], [ %ew_u.sroa.0.4.extract.trunc, %if.end44 ], [ 0, %if.then5 ], [ %ew_u.sroa.0.4.extract.trunc., %if.else ]
  %iw_u.sroa.0.4.insert.ext = zext i32 %i0.3 to i64
  %iw_u.sroa.0.4.insert.shift = shl nuw i64 %iw_u.sroa.0.4.insert.ext, 32
  %iw_u.sroa.0.0.insert.ext = zext i32 %i1.1 to i64
  %iw_u.sroa.0.0.insert.insert = or i64 %iw_u.sroa.0.4.insert.shift, %iw_u.sroa.0.0.insert.ext
  %2 = bitcast i64 %iw_u.sroa.0.0.insert.insert to double
  br label %return

return:                                           ; preds = %do.body67, %if.else38, %if.then35, %if.then33, %if.else13
  %retval.0 = phi double [ %2, %do.body67 ], [ %add36, %if.then35 ], [ %x, %if.else13 ], [ %x, %if.then33 ], [ %x, %if.else38 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define i32 @lrintf(float %x) #2 {
entry:
  %w = alloca float, align 4
  %0 = bitcast float %x to i32
  %shr = lshr i32 %0, 31
  %and = lshr i32 %0, 23
  %shr1 = and i32 %and, 255
  %sub = add nsw i32 %shr1, -127
  %cmp = icmp slt i32 %sub, 31
  br i1 %cmp, label %if.then, label %if.else28

if.then:                                          ; preds = %entry
  %cmp2 = icmp slt i32 %sub, -1
  br i1 %cmp2, label %return, label %if.else

if.else:                                          ; preds = %if.then
  %cmp4 = icmp sgt i32 %sub, 22
  br i1 %cmp4, label %if.then5, label %if.else8

if.then5:                                         ; preds = %if.else
  %and6 = and i32 %0, 8388607
  %or = or i32 %and6, 8388608
  %sub7 = add nsw i32 %shr1, -150
  %shl = shl i32 %or, %sub7
  br label %if.end29

if.else8:                                         ; preds = %if.else
  %arrayidx = getelementptr inbounds [2 x float]* @TWO23120, i32 0, i32 %shr
  %1 = load float* %arrayidx, align 4, !tbaa !435
  %add = fadd float %1, %x
  store volatile float %add, float* %w, align 4, !tbaa !435
  %w.0.w.0. = load volatile float* %w, align 4
  %2 = load float* %arrayidx, align 4, !tbaa !435
  %sub10 = fsub float %w.0.w.0., %2
  %3 = bitcast float %sub10 to i32
  %and16 = and i32 %3, 2147483647
  %cmp17 = icmp eq i32 %and16, 0
  br i1 %cmp17, label %return, label %if.end

if.end:                                           ; preds = %if.else8
  %shr19 = lshr i32 %3, 23
  %and20 = and i32 %shr19, 255
  %and22 = and i32 %3, 8388607
  %or23 = or i32 %and22, 8388608
  %sub24 = sub i32 150, %and20
  %shr25 = lshr i32 %or23, %sub24
  br label %if.end29

if.else28:                                        ; preds = %entry
  %conv = fptosi float %x to i32
  br label %return

if.end29:                                         ; preds = %if.end, %if.then5
  %result.0 = phi i32 [ %shl, %if.then5 ], [ %shr25, %if.end ]
  %tobool = icmp ne i32 %shr, 0
  %sub30 = sub nsw i32 0, %result.0
  %cond = select i1 %tobool, i32 %sub30, i32 %result.0
  br label %return

return:                                           ; preds = %if.end29, %if.else28, %if.else8, %if.then
  %retval.0 = phi i32 [ %cond, %if.end29 ], [ %conv, %if.else28 ], [ 0, %if.then ], [ 0, %if.else8 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readnone
define i32 @lroundf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = lshr i32 %0, 23
  %shr = and i32 %and, 255
  %sub = add nsw i32 %shr, -127
  %1 = ashr i32 %0, 31
  %2 = or i32 %1, 1
  %and2 = and i32 %0, 8388607
  %or = or i32 %and2, 8388608
  %cmp3 = icmp slt i32 %sub, 31
  br i1 %cmp3, label %if.then, label %if.else16

if.then:                                          ; preds = %entry
  %cmp4 = icmp slt i32 %sub, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %cmp6 = icmp slt i32 %sub, -1
  %cond7 = select i1 %cmp6, i32 0, i32 %2
  br label %return

if.else:                                          ; preds = %if.then
  %cmp8 = icmp sgt i32 %sub, 22
  br i1 %cmp8, label %if.then9, label %if.else11

if.then9:                                         ; preds = %if.else
  %sub10 = add nsw i32 %shr, -150
  %shl = shl i32 %or, %sub10
  br label %if.end17

if.else11:                                        ; preds = %if.else
  %shr12 = lshr i32 4194304, %sub
  %add = add i32 %shr12, %or
  %sub13 = sub i32 150, %shr
  %shr14 = lshr i32 %add, %sub13
  br label %if.end17

if.else16:                                        ; preds = %entry
  %conv = fptosi float %x to i32
  br label %return

if.end17:                                         ; preds = %if.else11, %if.then9
  %result.0 = phi i32 [ %shl, %if.then9 ], [ %shr14, %if.else11 ]
  %mul = mul nsw i32 %result.0, %2
  br label %return

return:                                           ; preds = %if.end17, %if.else16, %if.then5
  %retval.0 = phi i32 [ %cond7, %if.then5 ], [ %mul, %if.end17 ], [ %conv, %if.else16 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readnone
define double @fma(double %x, double %y, double %z) #3 {
entry:
  %mul = fmul double %x, %y
  %add = fadd double %mul, %z
  ret double %add
}

; Function Attrs: nounwind
define double @fmax(double %x, double %y) #2 {
entry:
  %call = tail call i32 @__fpclassifyd(double %x) #8
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call1 = tail call i32 @__fpclassifyd(double %y) #8
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %cmp5 = fcmp ogt double %x, %y
  %cond = select i1 %cmp5, double %x, double %y
  br label %return

return:                                           ; preds = %if.end4, %if.end, %entry
  %retval.0 = phi double [ %cond, %if.end4 ], [ %y, %entry ], [ %x, %if.end ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @fmin(double %x, double %y) #2 {
entry:
  %call = tail call i32 @__fpclassifyd(double %x) #8
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call1 = tail call i32 @__fpclassifyd(double %y) #8
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %cmp5 = fcmp olt double %x, %y
  %cond = select i1 %cmp5, double %x, double %y
  br label %return

return:                                           ; preds = %if.end4, %if.end, %entry
  %retval.0 = phi double [ %cond, %if.end4 ], [ %y, %entry ], [ %x, %if.end ]
  ret double %retval.0
}

; Function Attrs: nounwind
define float @modff(float %x, float* nocapture %iptr) #2 {
entry:
  %0 = bitcast float %x to i32
  %shr57 = lshr i32 %0, 23
  %and = and i32 %shr57, 255
  %sub = add nsw i32 %and, -127
  %cmp = icmp slt i32 %sub, 23
  br i1 %cmp, label %if.then, label %if.else26

if.then:                                          ; preds = %entry
  %cmp1 = icmp slt i32 %sub, 0
  br i1 %cmp1, label %do.body3, label %if.else

do.body3:                                         ; preds = %if.then
  %and4 = and i32 %0, -2147483648
  %1 = bitcast i32 %and4 to float
  store float %1, float* %iptr, align 4, !tbaa !435
  br label %return

if.else:                                          ; preds = %if.then
  %shr8 = lshr i32 8388607, %sub
  %and9 = and i32 %shr8, %0
  %cmp10 = icmp eq i32 %and9, 0
  br i1 %cmp10, label %if.then11, label %do.body19

if.then11:                                        ; preds = %if.else
  store float %x, float* %iptr, align 4, !tbaa !435
  %and14 = and i32 %0, -2147483648
  %2 = bitcast i32 %and14 to float
  br label %return

do.body19:                                        ; preds = %if.else
  %neg = xor i32 %shr8, -1
  %and21 = and i32 %0, %neg
  %3 = bitcast i32 %and21 to float
  store float %3, float* %iptr, align 4, !tbaa !435
  %sub25 = fsub float %x, %3
  br label %return

if.else26:                                        ; preds = %entry
  store float %x, float* %iptr, align 4, !tbaa !435
  %call = tail call i32 @__fpclassifyf(float %x) #8
  %cmp27 = icmp eq i32 %call, 0
  br i1 %cmp27, label %if.then28, label %do.body29

if.then28:                                        ; preds = %if.else26
  %add = fadd float %x, %x
  store float %add, float* %iptr, align 4, !tbaa !435
  br label %return

do.body29:                                        ; preds = %if.else26
  %and31 = and i32 %0, -2147483648
  %4 = bitcast i32 %and31 to float
  br label %return

return:                                           ; preds = %do.body29, %if.then28, %do.body19, %if.then11, %do.body3
  %retval.0 = phi float [ %x, %do.body3 ], [ %2, %if.then11 ], [ %sub25, %do.body19 ], [ %add, %if.then28 ], [ %4, %do.body29 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define float @nanf(i8* nocapture readnone %unused) #3 {
entry:
  ret float 0x7FF8000000000000
}

; Function Attrs: nounwind
define float @nearbyintf(float %x) #2 {
entry:
  %call = tail call float @rintf(float %x) #8
  ret float %call
}

; Function Attrs: nounwind readnone
define float @nextafterf(float %x, float %y) #3 {
entry:
  %0 = bitcast float %x to i32
  %1 = bitcast float %y to i32
  %and = and i32 %0, 2147483647
  %and6 = and i32 %1, 2147483647
  %cmp = icmp ugt i32 %and, 2139095040
  %cmp7 = icmp ugt i32 %and6, 2139095040
  %or.cond = or i1 %cmp, %cmp7
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %add = fadd float %x, %y
  br label %return

if.end:                                           ; preds = %entry
  %cmp8 = fcmp oeq float %x, %y
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.end
  %cmp11 = icmp eq i32 %and, 0
  br i1 %cmp11, label %do.body13, label %if.end20

do.body13:                                        ; preds = %if.end10
  %and14 = and i32 %1, -2147483648
  %or = or i32 %and14, 1
  %2 = bitcast i32 %or to float
  %mul = fmul float %2, %2
  %cmp18 = fcmp oeq float %mul, %2
  %mul. = select i1 %cmp18, float %mul, float %2
  br label %return

if.end20:                                         ; preds = %if.end10
  %cmp21 = icmp sgt i32 %0, -1
  br i1 %cmp21, label %if.then22, label %if.else28

if.then22:                                        ; preds = %if.end20
  %cmp23 = icmp sgt i32 %0, %1
  br i1 %cmp23, label %if.then24, label %if.else25

if.then24:                                        ; preds = %if.then22
  %sub = add nsw i32 %0, -1
  br label %if.end37

if.else25:                                        ; preds = %if.then22
  %add26 = add nsw i32 %0, 1
  br label %if.end37

if.else28:                                        ; preds = %if.end20
  %cmp29 = icmp sgt i32 %1, -1
  %cmp31 = icmp sgt i32 %0, %1
  %or.cond93 = or i1 %cmp29, %cmp31
  br i1 %or.cond93, label %if.then32, label %if.else34

if.then32:                                        ; preds = %if.else28
  %sub33 = add nsw i32 %0, -1
  br label %if.end37

if.else34:                                        ; preds = %if.else28
  %add35 = add nsw i32 %0, 1
  br label %if.end37

if.end37:                                         ; preds = %if.else34, %if.then32, %if.else25, %if.then24
  %hx.0 = phi i32 [ %sub, %if.then24 ], [ %add26, %if.else25 ], [ %sub33, %if.then32 ], [ %add35, %if.else34 ]
  %and38 = and i32 %hx.0, 2139095040
  %cmp39 = icmp eq i32 %and38, 2139095040
  br i1 %cmp39, label %if.then40, label %if.end42

if.then40:                                        ; preds = %if.end37
  %add41 = fadd float %x, %x
  br label %return

if.end42:                                         ; preds = %if.end37
  %3 = bitcast i32 %hx.0 to float
  br label %return

return:                                           ; preds = %if.end42, %if.then40, %do.body13, %if.end, %if.then
  %retval.0 = phi float [ %add, %if.then ], [ %add41, %if.then40 ], [ %x, %if.end ], [ %mul., %do.body13 ], [ %3, %if.end42 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define i32 @__fpclassifyd(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %cmp4 = icmp eq i32 %ew_u.sroa.0.0.extract.trunc, 0
  %1 = or i64 %ew_u.sroa.0.4.extract.shift, %0
  %2 = trunc i64 %1 to i32
  %3 = icmp eq i32 %2, 0
  %cmp5 = icmp eq i32 %ew_u.sroa.0.4.extract.trunc, -2147483648
  %or.cond35 = and i1 %cmp5, %cmp4
  %or.cond = or i1 %3, %or.cond35
  br i1 %or.cond, label %return, label %if.else

if.else:                                          ; preds = %entry
  %ew_u.sroa.0.4.extract.trunc.off = add i32 %ew_u.sroa.0.4.extract.trunc, -1048576
  %4 = icmp ult i32 %ew_u.sroa.0.4.extract.trunc.off, 2145386496
  %ew_u.sroa.0.4.extract.trunc.off56 = add i32 %ew_u.sroa.0.4.extract.trunc, 2146435072
  %5 = icmp ult i32 %ew_u.sroa.0.4.extract.trunc.off56, 2145386496
  %or.cond58 = or i1 %4, %5
  br i1 %or.cond58, label %return, label %if.else16

if.else16:                                        ; preds = %if.else
  %cmp19 = icmp ult i32 %ew_u.sroa.0.4.extract.trunc, 1048576
  br i1 %cmp19, label %return, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.else16
  %cmp21 = icmp slt i32 %ew_u.sroa.0.4.extract.trunc, 0
  %cmp23 = icmp ult i32 %ew_u.sroa.0.4.extract.trunc, -2146435072
  %or.cond39 = and i1 %cmp21, %cmp23
  br i1 %or.cond39, label %return, label %if.else25

if.else25:                                        ; preds = %lor.lhs.false20
  %6 = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %7 = icmp eq i32 %6, 2146435072
  %or.cond59 = and i1 %7, %cmp4
  %. = zext i1 %or.cond59 to i32
  ret i32 %.

return:                                           ; preds = %lor.lhs.false20, %if.else16, %if.else, %entry
  %retval.0 = phi i32 [ 2, %entry ], [ 4, %if.else ], [ 3, %lor.lhs.false20 ], [ 3, %if.else16 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define float @pow10f(float %x) #2 {
entry:
  %call = tail call float @powf(float 1.000000e+01, float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @powf(float %x, float %y) #2 {
entry:
  %0 = bitcast float %x to i32
  %1 = bitcast float %y to i32
  %sub = add i32 %0, -8388608
  %cmp = icmp ugt i32 %sub, 2130706431
  %mul.i189.pre = shl i32 %1, 1
  %sub.i190.pre = add i32 %mul.i189.pre, -1
  %cmp.i191 = icmp ugt i32 %sub.i190.pre, -16777218
  br i1 %cmp, label %if.then, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  br i1 %cmp.i191, label %if.then7, label %if.end85, !prof !418

if.then:                                          ; preds = %entry
  br i1 %cmp.i191, label %if.then7, label %if.end41, !prof !418

if.then7:                                         ; preds = %if.then, %lor.rhs
  %cmp8 = icmp eq i32 %mul.i189.pre, 0
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then7
  %xor.i185 = shl i32 %0, 1
  %mul.i186 = xor i32 %xor.i185, 8388608
  %cmp.i187 = icmp ugt i32 %mul.i186, -8388608
  br i1 %cmp.i187, label %cond.true, label %return

cond.true:                                        ; preds = %if.then9
  %add = fadd float %x, %y
  br label %return

if.end:                                           ; preds = %if.then7
  %cmp12 = icmp eq i32 %0, 1065353216
  br i1 %cmp12, label %if.then13, label %if.end21

if.then13:                                        ; preds = %if.end
  %mul.i182 = xor i32 %mul.i189.pre, 8388608
  %cmp.i183 = icmp ugt i32 %mul.i182, -8388608
  br i1 %cmp.i183, label %cond.true16, label %return

cond.true16:                                      ; preds = %if.then13
  %add17 = fadd float %x, %y
  br label %return

if.end21:                                         ; preds = %if.end
  %mul22 = shl i32 %0, 1
  %cmp23 = icmp ugt i32 %mul22, -16777216
  %cmp25 = icmp ugt i32 %mul.i189.pre, -16777216
  %or.cond = or i1 %cmp23, %cmp25
  br i1 %or.cond, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end21
  %add27 = fadd float %x, %y
  br label %return

if.end28:                                         ; preds = %if.end21
  %cmp30 = icmp eq i32 %mul22, 2130706432
  br i1 %cmp30, label %return, label %if.end32

if.end32:                                         ; preds = %if.end28
  %cmp34 = icmp ult i32 %mul22, 2130706432
  %conv = zext i1 %cmp34 to i32
  %call1.lobit = lshr i32 %1, 31
  %call1.lobit.not = xor i32 %call1.lobit, 1
  %cmp36 = icmp eq i32 %conv, %call1.lobit.not
  br i1 %cmp36, label %return, label %if.end39

if.end39:                                         ; preds = %if.end32
  %mul40 = fmul float %y, %y
  br label %return

if.end41:                                         ; preds = %if.then
  %mul.i178 = shl i32 %0, 1
  %sub.i179 = add i32 %mul.i178, -1
  %cmp.i180 = icmp ugt i32 %sub.i179, -16777218
  br i1 %cmp.i180, label %if.then45, label %if.end61, !prof !418

if.then45:                                        ; preds = %if.end41
  %mul46 = fmul float %x, %x
  %tobool48 = icmp slt i32 %0, 0
  br i1 %tobool48, label %land.lhs.true, label %if.end54

land.lhs.true:                                    ; preds = %if.then45
  %shr.i161 = lshr i32 %1, 23
  %and.i162 = and i32 %shr.i161, 255
  %and.i162.off = add nsw i32 %and.i162, -127
  %2 = icmp ugt i32 %and.i162.off, 23
  br i1 %2, label %if.end54, label %if.end3.i171

if.end3.i171:                                     ; preds = %land.lhs.true
  %sub.i166 = sub nsw i32 150, %and.i162
  %shl.i167 = shl i32 1, %sub.i166
  %sub4.i168 = add nsw i32 %shl.i167, -1
  %and5.i169 = and i32 %sub4.i168, %1
  %tobool.i170 = icmp ne i32 %and5.i169, 0
  %and10.i172 = and i32 %shl.i167, %1
  %tobool11.i173 = icmp eq i32 %and10.i172, 0
  %or.cond202 = or i1 %tobool.i170, %tobool11.i173
  br i1 %or.cond202, label %if.end54, label %if.then52

if.then52:                                        ; preds = %if.end3.i171
  %sub53 = fsub float -0.000000e+00, %mul46
  br label %if.end54

if.end54:                                         ; preds = %if.then52, %if.end3.i171, %land.lhs.true, %if.then45
  %x2.0 = phi float [ %sub53, %if.then52 ], [ %mul46, %if.then45 ], [ %mul46, %land.lhs.true ], [ %mul46, %if.end3.i171 ]
  %tobool56 = icmp slt i32 %1, 0
  br i1 %tobool56, label %cond.true57, label %return

cond.true57:                                      ; preds = %if.end54
  %div = fdiv float 1.000000e+00, %x2.0
  br label %return

if.end61:                                         ; preds = %if.end41
  %tobool63 = icmp slt i32 %0, 0
  br i1 %tobool63, label %if.then64, label %if.end76

if.then64:                                        ; preds = %if.end61
  %shr.i157 = lshr i32 %1, 23
  %and.i158 = and i32 %shr.i157, 255
  %cmp.i = icmp ult i32 %and.i158, 127
  br i1 %cmp.i, label %if.then68, label %if.end.i

if.end.i:                                         ; preds = %if.then64
  %cmp1.i = icmp ugt i32 %and.i158, 150
  br i1 %cmp1.i, label %if.end74, label %if.end3.i

if.end3.i:                                        ; preds = %if.end.i
  %sub.i159 = sub nsw i32 150, %and.i158
  %shl.i160 = shl i32 1, %sub.i159
  %sub4.i = add nsw i32 %shl.i160, -1
  %and5.i = and i32 %sub4.i, %1
  %tobool.i = icmp eq i32 %and5.i, 0
  br i1 %tobool.i, label %checkint.exit, label %if.then68

checkint.exit:                                    ; preds = %if.end3.i
  %and10.i = and i32 %shl.i160, %1
  %tobool11.i = icmp eq i32 %and10.i, 0
  %. = select i1 %tobool11.i, i32 0, i32 65536
  br label %if.end74

if.then68:                                        ; preds = %if.end3.i, %if.then64
  %call69 = tail call float @__math_invalidf(float %x) #8
  br label %return

if.end74:                                         ; preds = %checkint.exit, %if.end.i
  %sign_bias.0 = phi i32 [ 0, %if.end.i ], [ %., %checkint.exit ]
  %and75 = and i32 %0, 2147483647
  br label %if.end76

if.end76:                                         ; preds = %if.end74, %if.end61
  %ix.0 = phi i32 [ %and75, %if.end74 ], [ %0, %if.end61 ]
  %sign_bias.1 = phi i32 [ %sign_bias.0, %if.end74 ], [ 0, %if.end61 ]
  %cmp77 = icmp ult i32 %ix.0, 8388608
  br i1 %cmp77, label %if.then79, label %if.end85

if.then79:                                        ; preds = %if.end76
  %mul80 = fmul float %x, 8.388608e+06
  %3 = bitcast float %mul80 to i32
  %and82 = and i32 %3, 2147483647
  %sub83 = add nsw i32 %and82, -192937984
  br label %if.end85

if.end85:                                         ; preds = %if.then79, %if.end76, %lor.rhs
  %ix.1 = phi i32 [ %sub83, %if.then79 ], [ %ix.0, %if.end76 ], [ %0, %lor.rhs ]
  %sign_bias.2 = phi i32 [ %sign_bias.1, %if.then79 ], [ %sign_bias.1, %if.end76 ], [ 0, %lor.rhs ]
  %sub.i152 = add i32 %ix.1, -1060306944
  %shr.i = lshr i32 %sub.i152, 19
  %rem.i = and i32 %shr.i, 15
  %and.i = and i32 %sub.i152, -8388608
  %sub3.i = sub i32 %ix.1, %and.i
  %shr4.i = ashr i32 %sub.i152, 23
  %invc5.i = getelementptr inbounds %struct.powf_log2_data* @__powf_log2_data, i32 0, i32 0, i32 %rem.i, i32 0
  %4 = load double* %invc5.i, align 4, !tbaa !450
  %logc7.i = getelementptr inbounds %struct.powf_log2_data* @__powf_log2_data, i32 0, i32 0, i32 %rem.i, i32 1
  %5 = load double* %logc7.i, align 4, !tbaa !452
  %6 = bitcast i32 %sub3.i to float
  %conv.i153 = fpext float %6 to double
  %mul.i154 = fmul double %4, %conv.i153
  %sub8.i = fadd double %mul.i154, -1.000000e+00
  %conv9.i = sitofp i32 %shr4.i to double
  %add.i155 = fadd double %conv9.i, %5
  %mul10.i = fmul double %sub8.i, %sub8.i
  %7 = load double* getelementptr inbounds (%struct.powf_log2_data* @__powf_log2_data, i32 0, i32 1, i32 0), align 4, !tbaa !429
  %mul11.i156 = fmul double %7, %sub8.i
  %8 = load double* getelementptr inbounds (%struct.powf_log2_data* @__powf_log2_data, i32 0, i32 1, i32 1), align 4, !tbaa !429
  %add12.i = fadd double %8, %mul11.i156
  %9 = load double* getelementptr inbounds (%struct.powf_log2_data* @__powf_log2_data, i32 0, i32 1, i32 2), align 4, !tbaa !429
  %mul13.i = fmul double %9, %sub8.i
  %10 = load double* getelementptr inbounds (%struct.powf_log2_data* @__powf_log2_data, i32 0, i32 1, i32 3), align 4, !tbaa !429
  %add14.i = fadd double %10, %mul13.i
  %mul15.i = fmul double %mul10.i, %mul10.i
  %11 = load double* getelementptr inbounds (%struct.powf_log2_data* @__powf_log2_data, i32 0, i32 1, i32 4), align 4, !tbaa !429
  %mul16.i = fmul double %sub8.i, %11
  %add17.i = fadd double %add.i155, %mul16.i
  %mul18.i = fmul double %mul10.i, %add14.i
  %add19.i = fadd double %mul18.i, %add17.i
  %mul20.i = fmul double %add12.i, %mul15.i
  %add21.i = fadd double %mul20.i, %add19.i
  %conv87 = fpext float %y to double
  %mul88 = fmul double %conv87, %add21.i
  %12 = bitcast double %mul88 to i64
  %and90 = and i64 %12, 9223231299366420480
  %cmp93 = icmp ult i64 %and90, 4638566878703255552
  br i1 %cmp93, label %if.end108, label %if.then97, !prof !426

if.then97:                                        ; preds = %if.end85
  %cmp98 = fcmp ogt double %mul88, 0x405FFFFFFFD1D571
  br i1 %cmp98, label %if.then100, label %if.end102

if.then100:                                       ; preds = %if.then97
  %call101 = tail call float @__math_oflowf(i32 %sign_bias.2) #8
  br label %return

if.end102:                                        ; preds = %if.then97
  %cmp103 = fcmp ugt double %mul88, -1.500000e+02
  br i1 %cmp103, label %if.end108, label %if.then105

if.then105:                                       ; preds = %if.end102
  %call106 = tail call float @__math_uflowf(i32 %sign_bias.2) #8
  br label %return

if.end108:                                        ; preds = %if.end102, %if.end85
  %13 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 1), align 4, !tbaa !465
  %add.i = fadd double %mul88, %13
  %14 = bitcast double %add.i to i64
  %sub.i = fsub double %add.i, %13
  %sub1.i = fsub double %mul88, %sub.i
  %call.tr.i = trunc i64 %14 to i32
  %idxprom.i = and i32 %call.tr.i, 31
  %arrayidx.i = getelementptr inbounds %struct.exp2f_data* @__exp2f_data, i32 0, i32 0, i32 %idxprom.i
  %15 = load i64* %arrayidx.i, align 4, !tbaa !441
  %conv.i = zext i32 %sign_bias.2 to i64
  %add2.i = add i64 %14, %conv.i
  %shl.i = shl i64 %add2.i, 47
  %add3.i = add i64 %shl.i, %15
  %16 = bitcast i64 %add3.i to double
  %17 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 2, i32 0), align 4, !tbaa !429
  %mul.i = fmul double %17, %sub1.i
  %18 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 2, i32 1), align 4, !tbaa !429
  %add5.i = fadd double %18, %mul.i
  %mul6.i = fmul double %sub1.i, %sub1.i
  %19 = load double* getelementptr inbounds (%struct.exp2f_data* @__exp2f_data, i32 0, i32 2, i32 2), align 4, !tbaa !429
  %mul7.i = fmul double %sub1.i, %19
  %add8.i = fadd double %mul7.i, 1.000000e+00
  %mul9.i = fmul double %mul6.i, %add5.i
  %add10.i = fadd double %mul9.i, %add8.i
  %mul11.i = fmul double %16, %add10.i
  %conv110 = fptrunc double %mul11.i to float
  br label %return

return:                                           ; preds = %if.end108, %if.then105, %if.then100, %if.then68, %cond.true57, %if.end54, %if.end39, %if.end32, %if.end28, %if.then26, %cond.true16, %if.then13, %cond.true, %if.then9
  %retval.0 = phi float [ %add27, %if.then26 ], [ %mul40, %if.end39 ], [ %call69, %if.then68 ], [ %call101, %if.then100 ], [ %call106, %if.then105 ], [ %conv110, %if.end108 ], [ %add, %cond.true ], [ 1.000000e+00, %if.then9 ], [ %add17, %cond.true16 ], [ 1.000000e+00, %if.then13 ], [ 1.000000e+00, %if.end28 ], [ 0.000000e+00, %if.end32 ], [ %div, %cond.true57 ], [ %x2.0, %if.end54 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @remquof(float %x, float %y, i32* nocapture %quo) #2 {
entry:
  %0 = bitcast float %x to i32
  %1 = bitcast float %y to i32
  %xor = xor i32 %1, %0
  %and = and i32 %xor, -2147483648
  %and6 = and i32 %0, -2147483648
  %xor7 = xor i32 %and6, %0
  %and8 = and i32 %1, 2147483647
  %cmp = icmp eq i32 %and8, 0
  %cmp9 = icmp sgt i32 %xor7, 2139095039
  %or.cond = or i1 %cmp, %cmp9
  %cmp11 = icmp ugt i32 %and8, 2139095040
  %or.cond141 = or i1 %or.cond, %cmp11
  br i1 %or.cond141, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %quo, align 4, !tbaa !433
  %mul = fmul float %x, %y
  %div = fdiv float %mul, %mul
  br label %return

if.end:                                           ; preds = %entry
  %cmp13 = icmp slt i32 %xor7, %and8
  br i1 %cmp13, label %fixup, label %if.else

if.else:                                          ; preds = %if.end
  %cmp15 = icmp eq i32 %xor7, %and8
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.else
  store i32 1, i32* %quo, align 4, !tbaa !433
  %shr = lshr i32 %0, 31
  %arrayidx = getelementptr inbounds [2 x float]* @Zero127, i32 0, i32 %shr
  %2 = load float* %arrayidx, align 4, !tbaa !435
  br label %return

if.end18:                                         ; preds = %if.else
  %cmp19 = icmp slt i32 %xor7, 8388608
  br i1 %cmp19, label %if.then20, label %if.else23

if.then20:                                        ; preds = %if.end18
  %shl = shl i32 %0, 8
  %cmp21249 = icmp sgt i32 %shl, 0
  br i1 %cmp21249, label %for.body.preheader, label %if.end26

for.body.preheader:                               ; preds = %if.then20
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.0251 = phi i32 [ %shl22, %for.body ], [ %shl, %for.body.preheader ]
  %ix.0250 = phi i32 [ %sub, %for.body ], [ -126, %for.body.preheader ]
  %sub = add nsw i32 %ix.0250, -1
  %shl22 = shl i32 %i.0251, 1
  %cmp21 = icmp sgt i32 %shl22, 0
  br i1 %cmp21, label %for.body, label %if.end26.loopexit

if.else23:                                        ; preds = %if.end18
  %shr24 = ashr i32 %xor7, 23
  %sub25 = add nsw i32 %shr24, -127
  br label %if.end26

if.end26.loopexit:                                ; preds = %for.body
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  br label %if.end26

if.end26:                                         ; preds = %if.end26.loopexit, %if.else23, %if.then20
  %ix.1 = phi i32 [ %sub25, %if.else23 ], [ -126, %if.then20 ], [ %sub.lcssa, %if.end26.loopexit ]
  %cmp27 = icmp ult i32 %and8, 8388608
  br i1 %cmp27, label %if.then28, label %if.else37

if.then28:                                        ; preds = %if.end26
  %shl29 = shl i32 %1, 8
  %cmp31245 = icmp sgt i32 %shl29, 0
  br i1 %cmp31245, label %for.body32.preheader, label %if.end40

for.body32.preheader:                             ; preds = %if.then28
  br label %for.body32

for.body32:                                       ; preds = %for.body32, %for.body32.preheader
  %i.1247 = phi i32 [ %shl35, %for.body32 ], [ %shl29, %for.body32.preheader ]
  %iy.0246 = phi i32 [ %sub33, %for.body32 ], [ -126, %for.body32.preheader ]
  %sub33 = add nsw i32 %iy.0246, -1
  %shl35 = shl i32 %i.1247, 1
  %cmp31 = icmp sgt i32 %shl35, 0
  br i1 %cmp31, label %for.body32, label %if.end40.loopexit

if.else37:                                        ; preds = %if.end26
  %shr38227 = lshr i32 %and8, 23
  %sub39 = add nsw i32 %shr38227, -127
  br label %if.end40

if.end40.loopexit:                                ; preds = %for.body32
  %sub33.lcssa = phi i32 [ %sub33, %for.body32 ]
  br label %if.end40

if.end40:                                         ; preds = %if.end40.loopexit, %if.else37, %if.then28
  %iy.1 = phi i32 [ %sub39, %if.else37 ], [ -126, %if.then28 ], [ %sub33.lcssa, %if.end40.loopexit ]
  %cmp41 = icmp sgt i32 %ix.1, -127
  br i1 %cmp41, label %if.then42, label %if.else44

if.then42:                                        ; preds = %if.end40
  %and43 = and i32 %0, 8388607
  %or = or i32 %and43, 8388608
  br label %if.end47

if.else44:                                        ; preds = %if.end40
  %sub45 = sub nsw i32 -126, %ix.1
  %shl46 = shl i32 %xor7, %sub45
  br label %if.end47

if.end47:                                         ; preds = %if.else44, %if.then42
  %hx.0 = phi i32 [ %or, %if.then42 ], [ %shl46, %if.else44 ]
  %cmp48 = icmp sgt i32 %iy.1, -127
  br i1 %cmp48, label %if.then49, label %if.else52

if.then49:                                        ; preds = %if.end47
  %and50 = and i32 %1, 8388607
  %or51 = or i32 %and50, 8388608
  br label %if.end55

if.else52:                                        ; preds = %if.end47
  %sub53 = sub nsw i32 -126, %iy.1
  %shl54 = shl i32 %and8, %sub53
  br label %if.end55

if.end55:                                         ; preds = %if.else52, %if.then49
  %hy.0 = phi i32 [ %or51, %if.then49 ], [ %shl54, %if.else52 ]
  %tobool237 = icmp eq i32 %ix.1, %iy.1
  %sub57238 = sub nsw i32 %hx.0, %hy.0
  br i1 %tobool237, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %if.end55
  %sub56 = sub nsw i32 %ix.1, %iy.1
  br label %while.body

while.body:                                       ; preds = %while.body, %while.body.lr.ph
  %sub57241 = phi i32 [ %sub57238, %while.body.lr.ph ], [ %sub57, %while.body ]
  %n.0240 = phi i32 [ %sub56, %while.body.lr.ph ], [ %dec, %while.body ]
  %hx.1239 = phi i32 [ %hx.0, %while.body.lr.ph ], [ %hx.2, %while.body ]
  %3 = phi i32 [ 0, %while.body.lr.ph ], [ %shl64, %while.body ]
  %dec = add nsw i32 %n.0240, -1
  %cmp58 = icmp slt i32 %sub57241, 0
  %sub57.lobit = lshr i32 %sub57241, 31
  %q.0 = or i32 %sub57.lobit, %3
  %hx.2.in = select i1 %cmp58, i32 %hx.1239, i32 %sub57241
  %hx.2 = shl i32 %hx.2.in, 1
  %q.1 = shl i32 %q.0, 1
  %shl64 = xor i32 %q.1, 2
  %tobool = icmp eq i32 %dec, 0
  %sub57 = sub nsw i32 %hx.2, %hy.0
  br i1 %tobool, label %while.end.loopexit, label %while.body

while.end.loopexit:                               ; preds = %while.body
  %sub57.lcssa255 = phi i32 [ %sub57, %while.body ]
  %shl64.lcssa = phi i32 [ %shl64, %while.body ]
  %hx.2.lcssa = phi i32 [ %hx.2, %while.body ]
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.end55
  %sub57.lcssa = phi i32 [ %sub57238, %if.end55 ], [ %sub57.lcssa255, %while.end.loopexit ]
  %hx.1.lcssa = phi i32 [ %hx.0, %if.end55 ], [ %hx.2.lcssa, %while.end.loopexit ]
  %.lcssa = phi i32 [ 0, %if.end55 ], [ %shl64.lcssa, %while.end.loopexit ]
  %cmp66 = icmp sgt i32 %sub57.lcssa, -1
  %sub57.lobit232 = lshr i32 %sub57.lcssa, 31
  %sub57.lobit232.not = xor i32 %sub57.lobit232, 1
  %inc68228.q.0 = or i32 %sub57.lobit232.not, %.lcssa
  %sub57.hx.1 = select i1 %cmp66, i32 %sub57.lcssa, i32 %hx.1.lcssa
  %cmp70 = icmp eq i32 %sub57.hx.1, 0
  br i1 %cmp70, label %if.then71, label %while.cond77.preheader

while.cond77.preheader:                           ; preds = %while.end
  %cmp78233 = icmp slt i32 %sub57.hx.1, 8388608
  br i1 %cmp78233, label %while.body79.preheader, label %while.end82

while.body79.preheader:                           ; preds = %while.cond77.preheader
  br label %while.body79

if.then71:                                        ; preds = %while.end
  %tobool72 = icmp ne i32 %and, 0
  %sub73 = sub i32 0, %inc68228.q.0
  %cond = select i1 %tobool72, i32 %sub73, i32 %inc68228.q.0
  store i32 %cond, i32* %quo, align 4, !tbaa !433
  %shr74 = lshr i32 %0, 31
  %arrayidx75 = getelementptr inbounds [2 x float]* @Zero127, i32 0, i32 %shr74
  %4 = load float* %arrayidx75, align 4, !tbaa !435
  br label %return

while.body79:                                     ; preds = %while.body79, %while.body79.preheader
  %hx.4235 = phi i32 [ %shl80, %while.body79 ], [ %sub57.hx.1, %while.body79.preheader ]
  %iy.2234 = phi i32 [ %sub81, %while.body79 ], [ %iy.1, %while.body79.preheader ]
  %shl80 = shl i32 %hx.4235, 1
  %sub81 = add nsw i32 %iy.2234, -1
  %cmp78 = icmp slt i32 %shl80, 8388608
  br i1 %cmp78, label %while.body79, label %while.end82.loopexit

while.end82.loopexit:                             ; preds = %while.body79
  %sub81.lcssa = phi i32 [ %sub81, %while.body79 ]
  %shl80.lcssa = phi i32 [ %shl80, %while.body79 ]
  br label %while.end82

while.end82:                                      ; preds = %while.end82.loopexit, %while.cond77.preheader
  %hx.4.lcssa = phi i32 [ %sub57.hx.1, %while.cond77.preheader ], [ %shl80.lcssa, %while.end82.loopexit ]
  %iy.2.lcssa = phi i32 [ %iy.1, %while.cond77.preheader ], [ %sub81.lcssa, %while.end82.loopexit ]
  %cmp83 = icmp sgt i32 %iy.2.lcssa, -127
  br i1 %cmp83, label %if.then84, label %if.else88

if.then84:                                        ; preds = %while.end82
  %sub85 = add nsw i32 %hx.4.lcssa, -8388608
  %add = shl i32 %iy.2.lcssa, 23
  %shl86 = add i32 %add, 1065353216
  %or87 = or i32 %sub85, %shl86
  br label %fixup

if.else88:                                        ; preds = %while.end82
  %sub89 = sub nsw i32 -126, %iy.2.lcssa
  %shr90 = ashr i32 %hx.4.lcssa, %sub89
  br label %fixup

fixup:                                            ; preds = %if.else88, %if.then84, %if.end
  %q.3 = phi i32 [ %inc68228.q.0, %if.then84 ], [ %inc68228.q.0, %if.else88 ], [ 0, %if.end ]
  %hx.5 = phi i32 [ %or87, %if.then84 ], [ %shr90, %if.else88 ], [ %xor7, %if.end ]
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str128, i32 0, i32 0)) #4
  %5 = bitcast i32 %hx.5 to float
  %call = tail call float @fabsf(float %y) #8
  %cmp96 = fcmp olt float %call, 0x3820000000000000
  br i1 %cmp96, label %if.then97, label %if.else109

if.then97:                                        ; preds = %fixup
  %add98 = fadd float %5, %5
  %cmp99 = fcmp ogt float %add98, %call
  br i1 %cmp99, label %if.then105, label %lor.lhs.false100

lor.lhs.false100:                                 ; preds = %if.then97
  %cmp102 = fcmp une float %add98, %call
  %and103 = and i32 %q.3, 1
  %tobool104 = icmp eq i32 %and103, 0
  %or.cond230 = or i1 %cmp102, %tobool104
  br i1 %or.cond230, label %do.body123, label %if.then105

if.then105:                                       ; preds = %lor.lhs.false100, %if.then97
  %inc106 = add i32 %q.3, 1
  %sub107 = fsub float %5, %call
  br label %do.body123

if.else109:                                       ; preds = %fixup
  %mul110 = fmul float %call, 5.000000e-01
  %cmp111 = fcmp ogt float %5, %mul110
  br i1 %cmp111, label %if.then118, label %lor.lhs.false112

lor.lhs.false112:                                 ; preds = %if.else109
  %cmp114 = fcmp une float %5, %mul110
  %and116 = and i32 %q.3, 1
  %tobool117 = icmp eq i32 %and116, 0
  %or.cond231 = or i1 %cmp114, %tobool117
  br i1 %or.cond231, label %do.body123, label %if.then118

if.then118:                                       ; preds = %lor.lhs.false112, %if.else109
  %inc119 = add i32 %q.3, 1
  %sub120 = fsub float %5, %call
  br label %do.body123

do.body123:                                       ; preds = %if.then118, %lor.lhs.false112, %if.then105, %lor.lhs.false100
  %q.4 = phi i32 [ %inc106, %if.then105 ], [ %q.3, %lor.lhs.false100 ], [ %inc119, %if.then118 ], [ %q.3, %lor.lhs.false112 ]
  %x.addr.0 = phi float [ %sub107, %if.then105 ], [ %5, %lor.lhs.false100 ], [ %sub120, %if.then118 ], [ %5, %lor.lhs.false112 ]
  %6 = bitcast float %x.addr.0 to i32
  %xor130 = xor i32 %6, %and6
  %7 = bitcast i32 %xor130 to float
  %and134 = and i32 %q.4, 2147483647
  %tobool135 = icmp ne i32 %and, 0
  %sub137 = sub i32 0, %and134
  %cond140 = select i1 %tobool135, i32 %sub137, i32 %and134
  store i32 %cond140, i32* %quo, align 4, !tbaa !433
  br label %return

return:                                           ; preds = %do.body123, %if.then71, %if.then16, %if.then
  %retval.0 = phi float [ %div, %if.then ], [ %7, %do.body123 ], [ %2, %if.then16 ], [ %4, %if.then71 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define double @frexp(double %x, i32* nocapture %eptr) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  store i32 0, i32* %eptr, align 4, !tbaa !433
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %or = or i32 %and, %ew_u.sroa.0.0.extract.trunc
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %return, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  %cmp3 = icmp ult i32 %and, 1048576
  br i1 %cmp3, label %if.then4, label %if.end11

if.then4:                                         ; preds = %if.end
  %mul = fmul double %x, 0x4350000000000000
  %1 = bitcast double %mul to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %1, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and10 = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  store i32 -54, i32* %eptr, align 4, !tbaa !433
  br label %if.end11

if.end11:                                         ; preds = %if.then4, %if.end
  %2 = phi i32 [ -54, %if.then4 ], [ 0, %if.end ]
  %ix.0 = phi i32 [ %and10, %if.then4 ], [ %and, %if.end ]
  %hx.0 = phi i32 [ %gh_u.sroa.0.4.extract.trunc, %if.then4 ], [ %ew_u.sroa.0.4.extract.trunc, %if.end ]
  %x.addr.0 = phi double [ %mul, %if.then4 ], [ %x, %if.end ]
  %shr33 = lshr i32 %ix.0, 20
  %sub = add nsw i32 %shr33, -1022
  %add = add nsw i32 %sub, %2
  store i32 %add, i32* %eptr, align 4, !tbaa !433
  %and12 = and i32 %hx.0, -2146435073
  %or13 = or i32 %and12, 1071644672
  %3 = bitcast double %x.addr.0 to i64
  %sh_u.sroa.0.4.insert.ext = zext i32 %or13 to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %3, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %4 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  br label %return

return:                                           ; preds = %if.end11, %lor.lhs.false, %entry
  %retval.0 = phi double [ %4, %if.end11 ], [ %x, %lor.lhs.false ], [ %x, %entry ]
  ret double %retval.0
}

; Function Attrs: nounwind
define float @rintf(float %x) #2 {
entry:
  %w = alloca float, align 4
  %0 = bitcast float %x to i32
  %shr90 = lshr i32 %0, 31
  %and1 = and i32 %0, 2147483647
  %shr2 = lshr i32 %and1, 23
  %sub = add nsw i32 %shr2, -127
  %cmp = icmp slt i32 %sub, 23
  br i1 %cmp, label %if.then, label %if.else45

if.then:                                          ; preds = %entry
  %cmp3 = icmp eq i32 %and1, 0
  br i1 %cmp3, label %return, label %if.end

if.end:                                           ; preds = %if.then
  %cmp5 = icmp slt i32 %sub, 0
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end
  %and7 = and i32 %0, 8388607
  %and8 = and i32 %0, -1048576
  %sub9 = sub i32 0, %and7
  %shr10 = lshr i32 %sub9, 9
  %and11 = and i32 %shr10, 4194304
  %or12 = or i32 %and11, %and8
  %1 = bitcast i32 %or12 to float
  %arrayidx = getelementptr inbounds [2 x float]* @TWO23129, i32 0, i32 %shr90
  %2 = load float* %arrayidx, align 4, !tbaa !435
  %add = fadd float %1, %2
  store volatile float %add, float* %w, align 4, !tbaa !435
  %w.0.w.0. = load volatile float* %w, align 4
  %3 = load float* %arrayidx, align 4, !tbaa !435
  %sub18 = fsub float %w.0.w.0., %3
  %4 = bitcast float %sub18 to i32
  %and26 = and i32 %4, 2147483647
  %shl = shl nuw i32 %shr90, 31
  %or27 = or i32 %and26, %shl
  %5 = bitcast i32 %or27 to float
  br label %return

if.else:                                          ; preds = %if.end
  %shr31 = lshr i32 8388607, %sub
  %and32 = and i32 %shr31, %0
  %cmp33 = icmp eq i32 %and32, 0
  br i1 %cmp33, label %return, label %if.end35

if.end35:                                         ; preds = %if.else
  %shr36 = lshr i32 %shr31, 1
  %and37 = and i32 %shr36, %0
  %cmp38 = icmp eq i32 %and37, 0
  br i1 %cmp38, label %do.body51, label %if.then39

if.then39:                                        ; preds = %if.end35
  %neg = xor i32 %shr36, -1
  %and40 = and i32 %0, %neg
  %shr41 = lshr i32 2097152, %sub
  %or42 = or i32 %and40, %shr41
  br label %do.body51

if.else45:                                        ; preds = %entry
  %cmp46 = icmp ult i32 %and1, 2139095040
  br i1 %cmp46, label %return, label %if.then47

if.then47:                                        ; preds = %if.else45
  %add48 = fadd float %x, %x
  br label %return

do.body51:                                        ; preds = %if.then39, %if.end35
  %i0.0 = phi i32 [ %or42, %if.then39 ], [ %0, %if.end35 ]
  %6 = bitcast i32 %i0.0 to float
  %arrayidx56 = getelementptr inbounds [2 x float]* @TWO23129, i32 0, i32 %shr90
  %7 = load float* %arrayidx56, align 4, !tbaa !435
  %add57 = fadd float %7, %6
  store volatile float %add57, float* %w, align 4, !tbaa !435
  %w.0.w.0.60 = load volatile float* %w, align 4
  %8 = load float* %arrayidx56, align 4, !tbaa !435
  %sub59 = fsub float %w.0.w.0.60, %8
  br label %return

return:                                           ; preds = %do.body51, %if.then47, %if.else45, %if.else, %if.then6, %if.then
  %retval.0 = phi float [ %5, %if.then6 ], [ %sub59, %do.body51 ], [ %add48, %if.then47 ], [ %x, %if.then ], [ %x, %if.else ], [ %x, %if.else45 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define float @roundf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = lshr i32 %0, 23
  %shr = and i32 %and, 255
  %sub = add nsw i32 %shr, -127
  %cmp = icmp slt i32 %sub, 23
  br i1 %cmp, label %if.then, label %if.else14

if.then:                                          ; preds = %entry
  %cmp1 = icmp slt i32 %sub, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %and3 = and i32 %0, -2147483648
  %cmp4 = icmp eq i32 %sub, -1
  %or = or i32 %and3, 1065353216
  %or.and3 = select i1 %cmp4, i32 %or, i32 %and3
  br label %do.body20

if.else:                                          ; preds = %if.then
  %shr6 = lshr i32 8388607, %sub
  %and7 = and i32 %shr6, %0
  %cmp8 = icmp eq i32 %and7, 0
  br i1 %cmp8, label %return, label %if.end10

if.end10:                                         ; preds = %if.else
  %shr11 = lshr i32 4194304, %sub
  %add = add i32 %shr11, %0
  %neg = xor i32 %shr6, -1
  %and12 = and i32 %add, %neg
  br label %do.body20

if.else14:                                        ; preds = %entry
  %cmp15 = icmp eq i32 %sub, 128
  br i1 %cmp15, label %if.then16, label %return

if.then16:                                        ; preds = %if.else14
  %add17 = fadd float %x, %x
  br label %return

do.body20:                                        ; preds = %if.end10, %if.then2
  %w.0 = phi i32 [ %and12, %if.end10 ], [ %or.and3, %if.then2 ]
  %1 = bitcast i32 %w.0 to float
  br label %return

return:                                           ; preds = %do.body20, %if.then16, %if.else14, %if.else
  %retval.0 = phi float [ %1, %do.body20 ], [ %add17, %if.then16 ], [ %x, %if.else ], [ %x, %if.else14 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @scalblnf(float %x, i32 %n) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = lshr i32 %0, 23
  %shr72 = and i32 %and, 255
  %cmp = icmp eq i32 %shr72, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %entry
  %and1 = and i32 %0, 2147483647
  %cmp2 = icmp eq i32 %and1, 0
  br i1 %cmp2, label %return, label %if.end

if.end:                                           ; preds = %if.then
  %mul = fmul float %x, 0x4180000000000000
  %1 = bitcast float %mul to i32
  %and9 = lshr i32 %1, 23
  %shr1073 = and i32 %and9, 255
  %sub = add nsw i32 %shr1073, -25
  br label %if.end11

if.end11:                                         ; preds = %if.end, %entry
  %ix.0 = phi i32 [ %1, %if.end ], [ %0, %entry ]
  %k.0 = phi i32 [ %sub, %if.end ], [ %shr72, %entry ]
  %x.addr.0 = phi float [ %mul, %if.end ], [ %x, %entry ]
  %cmp12 = icmp eq i32 %k.0, 255
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end11
  %add = fadd float %x.addr.0, %x.addr.0
  br label %return

if.end14:                                         ; preds = %if.end11
  %add15 = add nsw i32 %k.0, %n
  %cmp16 = icmp sgt i32 %n, 50000
  %cmp17 = icmp sgt i32 %add15, 254
  %or.cond = or i1 %cmp16, %cmp17
  br i1 %or.cond, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end14
  %call = tail call float @copysignf(float 0x46293E5940000000, float %x.addr.0) #8
  %mul19 = fmul float %call, 0x46293E5940000000
  br label %return

if.end20:                                         ; preds = %if.end14
  %cmp21 = icmp slt i32 %n, -50000
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end20
  %call23 = tail call float @copysignf(float 0x39B4484C00000000, float %x.addr.0) #8
  %mul24 = fmul float %call23, 0x39B4484C00000000
  br label %return

if.end25:                                         ; preds = %if.end20
  %cmp26 = icmp sgt i32 %add15, 0
  br i1 %cmp26, label %do.body28, label %if.end33

do.body28:                                        ; preds = %if.end25
  %and29 = and i32 %ix.0, -2139095041
  %shl = shl i32 %add15, 23
  %or = or i32 %shl, %and29
  %2 = bitcast i32 %or to float
  br label %return

if.end33:                                         ; preds = %if.end25
  %cmp34 = icmp slt i32 %add15, -24
  br i1 %cmp34, label %if.then35, label %if.end38

if.then35:                                        ; preds = %if.end33
  %call36 = tail call float @copysignf(float 0x39B4484C00000000, float %x.addr.0) #8
  %mul37 = fmul float %call36, 0x39B4484C00000000
  br label %return

if.end38:                                         ; preds = %if.end33
  %and42 = and i32 %ix.0, -2139095041
  %add39 = shl i32 %add15, 23
  %shl43 = add i32 %add39, 209715200
  %or44 = or i32 %shl43, %and42
  %3 = bitcast i32 %or44 to float
  %mul48 = fmul float %3, 0x3E60000000000000
  br label %return

return:                                           ; preds = %if.end38, %if.then35, %do.body28, %if.then22, %if.then18, %if.then13, %if.then
  %retval.0 = phi float [ %add, %if.then13 ], [ %mul19, %if.then18 ], [ %mul24, %if.then22 ], [ %2, %do.body28 ], [ %mul37, %if.then35 ], [ %mul48, %if.end38 ], [ %x, %if.then ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @scalbnf(float %x, i32 %n) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %shr = lshr i32 %and, 23
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1 = icmp ult i32 %and, 2139095040
  br i1 %cmp1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  %add = fadd float %x, %x
  br label %return

if.end3:                                          ; preds = %if.end
  %cmp4 = icmp ult i32 %and, 8388608
  br i1 %cmp4, label %if.then5, label %if.end17

if.then5:                                         ; preds = %if.end3
  %mul = fmul float %x, 0x4180000000000000
  %1 = bitcast float %mul to i32
  %and11 = lshr i32 %1, 23
  %shr1274 = and i32 %and11, 255
  %sub = add nsw i32 %shr1274, -25
  %cmp13 = icmp slt i32 %n, -50000
  br i1 %cmp13, label %if.then14, label %if.end17

if.then14:                                        ; preds = %if.then5
  %mul15 = fmul float %mul, 0x39B4484C00000000
  br label %return

if.end17:                                         ; preds = %if.then5, %if.end3
  %ix.0 = phi i32 [ %1, %if.then5 ], [ %0, %if.end3 ]
  %k.0 = phi i32 [ %sub, %if.then5 ], [ %shr, %if.end3 ]
  %x.addr.0 = phi float [ %mul, %if.then5 ], [ %x, %if.end3 ]
  %add18 = add nsw i32 %k.0, %n
  %cmp19 = icmp sgt i32 %add18, 254
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end17
  %call = tail call float @copysignf(float 0x46293E5940000000, float %x.addr.0) #8
  %mul21 = fmul float %call, 0x46293E5940000000
  br label %return

if.end22:                                         ; preds = %if.end17
  %cmp23 = icmp sgt i32 %add18, 0
  br i1 %cmp23, label %do.body25, label %if.end30

do.body25:                                        ; preds = %if.end22
  %and26 = and i32 %ix.0, -2139095041
  %shl = shl i32 %add18, 23
  %or = or i32 %shl, %and26
  %2 = bitcast i32 %or to float
  br label %return

if.end30:                                         ; preds = %if.end22
  %cmp31 = icmp slt i32 %add18, -22
  br i1 %cmp31, label %if.then32, label %if.end39

if.then32:                                        ; preds = %if.end30
  %cmp33 = icmp sgt i32 %n, 50000
  br i1 %cmp33, label %if.then34, label %if.else

if.then34:                                        ; preds = %if.then32
  %call35 = tail call float @copysignf(float 0x46293E5940000000, float %x.addr.0) #8
  %mul36 = fmul float %call35, 0x46293E5940000000
  br label %return

if.else:                                          ; preds = %if.then32
  %call37 = tail call float @copysignf(float 0x39B4484C00000000, float %x.addr.0) #8
  %mul38 = fmul float %call37, 0x39B4484C00000000
  br label %return

if.end39:                                         ; preds = %if.end30
  %and43 = and i32 %ix.0, -2139095041
  %add40 = shl i32 %add18, 23
  %shl44 = add i32 %add40, 209715200
  %or45 = or i32 %shl44, %and43
  %3 = bitcast i32 %or45 to float
  %mul49 = fmul float %3, 0x3E60000000000000
  br label %return

return:                                           ; preds = %if.end39, %if.else, %if.then34, %do.body25, %if.then20, %if.then14, %if.then2, %entry
  %retval.0 = phi float [ %mul15, %if.then14 ], [ %mul21, %if.then20 ], [ %2, %do.body25 ], [ %mul36, %if.then34 ], [ %mul38, %if.else ], [ %mul49, %if.end39 ], [ %add, %if.then2 ], [ %x, %entry ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @significandf(float %x) #2 {
entry:
  %call = tail call i32 @ilogbf(float %x) #8
  %sub = sub nsw i32 0, %call
  %conv = sitofp i32 %sub to float
  %call1 = tail call float @__ieee754_scalbf(float %x, float %conv) #8
  ret float %call1
}

; Function Attrs: nounwind
define float @tanf(float %x) #2 {
entry:
  %y = alloca [2 x float], align 4
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 1061752795
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = tail call float @__kernel_tanf(float %x, float 0.000000e+00, i32 1) #8
  br label %return

if.else:                                          ; preds = %entry
  %cmp1 = icmp ult i32 %and, 2139095040
  br i1 %cmp1, label %if.else3, label %if.then2

if.then2:                                         ; preds = %if.else
  %sub = fsub float %x, %x
  br label %return

if.else3:                                         ; preds = %if.else
  %arraydecay = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %call4 = call i32 @__ieee754_rem_pio2f(float %x, float* %arraydecay) #8
  %1 = load float* %arraydecay, align 4, !tbaa !435
  %arrayidx5 = getelementptr inbounds [2 x float]* %y, i32 0, i32 1
  %2 = load float* %arrayidx5, align 4, !tbaa !435
  %and6 = shl i32 %call4, 1
  %shl = and i32 %and6, 2
  %sub7 = sub nsw i32 1, %shl
  %call8 = call float @__kernel_tanf(float %1, float %2, i32 %sub7) #8
  br label %return

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %retval.0 = phi float [ %call, %if.then ], [ %call8, %if.else3 ], [ %sub, %if.then2 ]
  ret float %retval.0
}

; Function Attrs: nounwind
define float @tanhf(float %x) #2 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, 2147483647
  %cmp = icmp ult i32 %and, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cmp1 = icmp sgt i32 %0, -1
  %div = fdiv float 1.000000e+00, %x
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %add = fadd float %div, 1.000000e+00
  br label %return

if.else:                                          ; preds = %if.then
  %sub = fadd float %div, -1.000000e+00
  br label %return

if.end:                                           ; preds = %entry
  %cmp4 = icmp ult i32 %and, 1102053376
  br i1 %cmp4, label %if.then5, label %if.end26

if.then5:                                         ; preds = %if.end
  %cmp6 = icmp ult i32 %and, 603979776
  br i1 %cmp6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.then5
  %add8 = fadd float %x, 1.000000e+00
  %mul = fmul float %add8, %x
  br label %return

if.end9:                                          ; preds = %if.then5
  %cmp10 = icmp ugt i32 %and, 1065353215
  %call = tail call float @fabsf(float %x) #8
  br i1 %cmp10, label %if.then11, label %if.else17

if.then11:                                        ; preds = %if.end9
  %mul12 = fmul float %call, 2.000000e+00
  %call13 = tail call float @expm1f(float %mul12) #8
  %add14 = fadd float %call13, 2.000000e+00
  %div15 = fdiv float 2.000000e+00, %add14
  %sub16 = fsub float 1.000000e+00, %div15
  br label %if.end26

if.else17:                                        ; preds = %if.end9
  %mul19 = fmul float %call, -2.000000e+00
  %call20 = tail call float @expm1f(float %mul19) #8
  %sub21 = fsub float -0.000000e+00, %call20
  %add22 = fadd float %call20, 2.000000e+00
  %div23 = fdiv float %sub21, %add22
  br label %if.end26

if.end26:                                         ; preds = %if.else17, %if.then11, %if.end
  %z.0 = phi float [ %sub16, %if.then11 ], [ %div23, %if.else17 ], [ 1.000000e+00, %if.end ]
  %cmp27 = icmp sgt i32 %0, -1
  br i1 %cmp27, label %return, label %cond.false

cond.false:                                       ; preds = %if.end26
  %sub28 = fsub float -0.000000e+00, %z.0
  br label %return

return:                                           ; preds = %cond.false, %if.end26, %if.then7, %if.else, %if.then2
  %retval.0 = phi float [ %mul, %if.then7 ], [ %add, %if.then2 ], [ %sub, %if.else ], [ %sub28, %cond.false ], [ %z.0, %if.end26 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define float @truncf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %and = and i32 %0, -2147483648
  %and1 = lshr i32 %0, 23
  %shr27 = and i32 %and1, 255
  %sub = add nsw i32 %shr27, -127
  %cmp = icmp slt i32 %sub, 23
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %cmp2 = icmp slt i32 %sub, 0
  br i1 %cmp2, label %do.body4, label %do.body8

do.body4:                                         ; preds = %if.then
  %1 = bitcast i32 %and to float
  br label %return

do.body8:                                         ; preds = %if.then
  %shr10 = lshr i32 8388607, %sub
  %neg = xor i32 %shr10, -1
  %and11 = and i32 %0, %neg
  %or = or i32 %and11, %and
  %2 = bitcast i32 %or to float
  br label %return

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %sub, 128
  br i1 %cmp16, label %if.then17, label %return

if.then17:                                        ; preds = %if.else15
  %add = fadd float %x, %x
  br label %return

return:                                           ; preds = %if.then17, %if.else15, %do.body8, %do.body4
  %retval.0 = phi float [ %add, %if.then17 ], [ %1, %do.body4 ], [ %2, %do.body8 ], [ %x, %if.else15 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define i32 @ilogb(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ult i32 %and, 1048576
  br i1 %cmp, label %if.then, label %if.else17

if.then:                                          ; preds = %entry
  %or = or i32 %and, %ew_u.sroa.0.0.extract.trunc
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %return, label %if.else

if.else:                                          ; preds = %if.then
  %cmp4 = icmp eq i32 %and, 0
  br i1 %cmp4, label %for.cond.preheader, label %if.else7

for.cond.preheader:                               ; preds = %if.else
  %cmp637 = icmp sgt i32 %ew_u.sroa.0.0.extract.trunc, 0
  br i1 %cmp637, label %for.body.preheader, label %return

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %ix.039 = phi i32 [ %sub, %for.body ], [ -1043, %for.body.preheader ]
  %lx.038 = phi i32 [ %shl, %for.body ], [ %ew_u.sroa.0.0.extract.trunc, %for.body.preheader ]
  %sub = add nsw i32 %ix.039, -1
  %shl = shl i32 %lx.038, 1
  %cmp6 = icmp sgt i32 %shl, 0
  br i1 %cmp6, label %for.body, label %return.loopexit

if.else7:                                         ; preds = %if.else
  %shl834 = shl nuw nsw i64 %ew_u.sroa.0.4.extract.shift, 11
  %shl8 = trunc i64 %shl834 to i32
  %cmp1040 = icmp sgt i32 %shl8, 0
  br i1 %cmp1040, label %for.body11.preheader, label %return

for.body11.preheader:                             ; preds = %if.else7
  br label %for.body11

for.body11:                                       ; preds = %for.body11, %for.body11.preheader
  %ix.142 = phi i32 [ %sub12, %for.body11 ], [ -1022, %for.body11.preheader ]
  %hx.041 = phi i32 [ %shl14, %for.body11 ], [ %shl8, %for.body11.preheader ]
  %sub12 = add nsw i32 %ix.142, -1
  %shl14 = shl i32 %hx.041, 1
  %cmp10 = icmp sgt i32 %shl14, 0
  br i1 %cmp10, label %for.body11, label %return.loopexit45

if.else17:                                        ; preds = %entry
  %cmp18 = icmp ult i32 %and, 2146435072
  br i1 %cmp18, label %if.then19, label %return

if.then19:                                        ; preds = %if.else17
  %shr33 = lshr i32 %and, 20
  %sub20 = add nsw i32 %shr33, -1023
  br label %return

return.loopexit:                                  ; preds = %for.body
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  br label %return

return.loopexit45:                                ; preds = %for.body11
  %sub12.lcssa = phi i32 [ %sub12, %for.body11 ]
  br label %return

return:                                           ; preds = %return.loopexit45, %return.loopexit, %if.then19, %if.else17, %if.else7, %for.cond.preheader, %if.then
  %retval.0 = phi i32 [ %sub20, %if.then19 ], [ -2147483647, %if.then ], [ 2147483647, %if.else17 ], [ -1043, %for.cond.preheader ], [ -1022, %if.else7 ], [ %sub.lcssa, %return.loopexit ], [ %sub12.lcssa, %return.loopexit45 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define void @sincosf(float %y, float* nocapture %sinp, float* nocapture %cosp) #2 {
entry:
  %y.i = alloca float, align 4
  %conv = fpext float %y to double
  %0 = bitcast float %y to i32
  %shr.i = lshr i32 %0, 20
  %and.i = and i32 %shr.i, 2047
  %cmp = icmp ult i32 %and.i, 1012
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = fmul double %conv, %conv
  %cmp5 = icmp ult i32 %and.i, 920
  br i1 %cmp5, label %if.then7, label %if.end16, !prof !418

if.then7:                                         ; preds = %if.then
  %cmp10 = icmp ult i32 %and.i, 8
  br i1 %cmp10, label %if.then14, label %if.end, !prof !418

if.then14:                                        ; preds = %if.then7
  %conv15 = fptrunc double %mul to float
  %y.i.0..sroa_cast = bitcast float* %y.i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %y.i.0..sroa_cast)
  store volatile float %conv15, float* %y.i, align 4, !tbaa !435
  call void @llvm.lifetime.end(i64 4, i8* %y.i.0..sroa_cast)
  br label %if.end

if.end:                                           ; preds = %if.then14, %if.then7
  store float %y, float* %sinp, align 4, !tbaa !435
  store float 1.000000e+00, float* %cosp, align 4, !tbaa !435
  br label %if.end54

if.end16:                                         ; preds = %if.then
  %mul.i139 = fmul double %mul, %mul
  %mul1.i140 = fmul double %conv, %mul
  %1 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 6), align 4, !tbaa !419
  %2 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 7), align 4, !tbaa !422
  %mul2.i141 = fmul double %mul, %2
  %add.i142 = fadd double %1, %mul2.i141
  %3 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 9), align 4, !tbaa !430
  %4 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 10), align 4, !tbaa !431
  %mul3.i143 = fmul double %mul, %4
  %add4.i144 = fadd double %3, %mul3.i143
  %5 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 3), align 4, !tbaa !423
  %6 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 4), align 4, !tbaa !424
  %mul12.i145 = fmul double %mul, %6
  %add13.i146 = fadd double %5, %mul12.i145
  %mul14.i147 = fmul double %mul, %mul1.i140
  %mul15.i148 = fmul double %mul, %mul.i139
  %7 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 8), align 4, !tbaa !432
  %mul17.i149 = fmul double %mul1.i140, %7
  %add18.i150 = fadd double %conv, %mul17.i149
  %8 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 5), align 4, !tbaa !425
  %mul20.i151 = fmul double %mul.i139, %8
  %add21.i152 = fadd double %add13.i146, %mul20.i151
  %mul22.i153 = fmul double %mul14.i147, %add4.i144
  %add23.i154 = fadd double %mul22.i153, %add18.i150
  %conv.i155 = fptrunc double %add23.i154 to float
  store float %conv.i155, float* %sinp, align 4, !tbaa !435
  %mul24.i156 = fmul double %mul15.i148, %add.i142
  %add25.i157 = fadd double %mul24.i156, %add21.i152
  %conv26.i158 = fptrunc double %add25.i157 to float
  store float %conv26.i158, float* %cosp, align 4, !tbaa !435
  br label %if.end54

if.else:                                          ; preds = %entry
  %cmp19 = icmp ult i32 %and.i, 1071
  br i1 %cmp19, label %if.then21, label %if.else29

if.then21:                                        ; preds = %if.else
  %9 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 1), align 4, !tbaa !427
  %mul.i131 = fmul double %conv, %9
  %conv.i132 = fptosi double %mul.i131 to i32
  %add.i133 = add nsw i32 %conv.i132, 8388608
  %shr.i134 = ashr i32 %add.i133, 24
  %conv1.i = sitofp i32 %shr.i134 to double
  %10 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 2), align 4, !tbaa !428
  %mul2.i135 = fmul double %10, %conv1.i
  %sub.i136 = fsub double %conv, %mul2.i135
  %and = and i32 %shr.i134, 3
  %arrayidx = getelementptr inbounds [2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 0, i32 %and
  %11 = load double* %arrayidx, align 4, !tbaa !429
  %and23 = and i32 %shr.i134, 2
  %tobool24 = icmp eq i32 %and23, 0
  %. = select i1 %tobool24, %struct.sincos_t* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0), %struct.sincos_t* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 1)
  %mul27 = fmul double %11, %sub.i136
  %mul28 = fmul double %sub.i136, %sub.i136
  %mul.i99 = fmul double %mul28, %mul28
  %mul1.i100 = fmul double %mul27, %mul28
  %c3.i101 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 6
  %12 = load double* %c3.i101, align 4, !tbaa !419
  %c4.i102 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 7
  %13 = load double* %c4.i102, align 4, !tbaa !422
  %mul2.i103 = fmul double %13, %mul28
  %add.i104 = fadd double %12, %mul2.i103
  %s2.i105 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 9
  %14 = load double* %s2.i105, align 4, !tbaa !430
  %s3.i106 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 10
  %15 = load double* %s3.i106, align 4, !tbaa !431
  %mul3.i107 = fmul double %15, %mul28
  %add4.i108 = fadd double %14, %mul3.i107
  %and.i109 = and i32 %shr.i134, 1
  %tobool.i110 = icmp ne i32 %and.i109, 0
  %cond.i111 = select i1 %tobool.i110, float* %cosp, float* %sinp
  %cond10.i112 = select i1 %tobool.i110, float* %sinp, float* %cosp
  %c0.i113 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 3
  %16 = load double* %c0.i113, align 4, !tbaa !423
  %c111.i114 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 4
  %17 = load double* %c111.i114, align 4, !tbaa !424
  %mul12.i115 = fmul double %17, %mul28
  %add13.i116 = fadd double %16, %mul12.i115
  %mul14.i117 = fmul double %mul28, %mul1.i100
  %mul15.i118 = fmul double %mul28, %mul.i99
  %s116.i119 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 8
  %18 = load double* %s116.i119, align 4, !tbaa !432
  %mul17.i120 = fmul double %mul1.i100, %18
  %add18.i121 = fadd double %mul27, %mul17.i120
  %c219.i122 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 5
  %19 = load double* %c219.i122, align 4, !tbaa !425
  %mul20.i123 = fmul double %mul.i99, %19
  %add21.i124 = fadd double %add13.i116, %mul20.i123
  %mul22.i125 = fmul double %mul14.i117, %add4.i108
  %add23.i126 = fadd double %mul22.i125, %add18.i121
  %conv.i127 = fptrunc double %add23.i126 to float
  store float %conv.i127, float* %cond.i111, align 4, !tbaa !435
  %mul24.i128 = fmul double %mul15.i118, %add.i104
  %add25.i129 = fadd double %mul24.i128, %add21.i124
  %conv26.i130 = fptrunc double %add25.i129 to float
  store float %conv26.i130, float* %cond10.i112, align 4, !tbaa !435
  br label %if.end54

if.else29:                                        ; preds = %if.else
  %cmp32 = icmp ult i32 %and.i, 2040
  br i1 %cmp32, label %if.then37, label %if.else51, !prof !426

if.then37:                                        ; preds = %if.else29
  %shr = lshr i32 %0, 31
  %shr.i91 = lshr i32 %0, 26
  %and.i92 = and i32 %shr.i91, 15
  %arrayidx.i = getelementptr inbounds [0 x i32]* bitcast ([24 x i32]* @__inv_pio4 to [0 x i32]*), i32 0, i32 %and.i92
  %shr1.i = lshr i32 %0, 23
  %and2.i = and i32 %shr1.i, 7
  %and3.i = and i32 %0, 8388607
  %or.i = or i32 %and3.i, 8388608
  %shl.i = shl i32 %or.i, %and2.i
  %20 = load i32* %arrayidx.i, align 4, !tbaa !433
  %mul.i93 = mul i32 %20, %shl.i
  %conv.i94 = zext i32 %mul.i93 to i64
  %conv5.i = zext i32 %shl.i to i64
  %arrayidx.sum.i = add nuw nsw i32 %and.i92, 4
  %arrayidx6.i = getelementptr inbounds [0 x i32]* bitcast ([24 x i32]* @__inv_pio4 to [0 x i32]*), i32 0, i32 %arrayidx.sum.i
  %21 = load i32* %arrayidx6.i, align 4, !tbaa !433
  %conv7.i = zext i32 %21 to i64
  %mul8.i = mul i64 %conv7.i, %conv5.i
  %arrayidx.sum35.i = add nuw nsw i32 %and.i92, 8
  %arrayidx10.i = getelementptr inbounds [0 x i32]* bitcast ([24 x i32]* @__inv_pio4 to [0 x i32]*), i32 0, i32 %arrayidx.sum35.i
  %22 = load i32* %arrayidx10.i, align 4, !tbaa !433
  %conv11.i = zext i32 %22 to i64
  %mul12.i95 = mul i64 %conv11.i, %conv5.i
  %shr13.i = lshr i64 %mul12.i95, 32
  %shl14.i = shl nuw i64 %conv.i94, 32
  %or15.i = or i64 %shr13.i, %shl14.i
  %add.i96 = add i64 %or15.i, %mul8.i
  %add16.i = add i64 %add.i96, 2305843009213693952
  %shr17.i = lshr i64 %add16.i, 62
  %shl18.i = shl nuw i64 %shr17.i, 62
  %sub.i = sub i64 %add.i96, %shl18.i
  %conv19.i = sitofp i64 %sub.i to double
  %conv20.i = trunc i64 %shr17.i to i32
  %mul21.i = fmul double %conv19.i, 0x3C1921FB54442D18
  %add = add nuw nsw i32 %conv20.i, %shr
  %and41 = and i32 %add, 3
  %arrayidx43 = getelementptr inbounds [2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 0, i32 %and41
  %23 = load double* %arrayidx43, align 4, !tbaa !429
  %and45 = and i32 %add, 2
  %tobool46 = icmp eq i32 %and45, 0
  %.89 = select i1 %tobool46, %struct.sincos_t* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0), %struct.sincos_t* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 1)
  %mul49 = fmul double %23, %mul21.i
  %mul50 = fmul double %mul21.i, %mul21.i
  %mul.i = fmul double %mul50, %mul50
  %mul1.i = fmul double %mul49, %mul50
  %c3.i = getelementptr inbounds %struct.sincos_t* %.89, i32 0, i32 6
  %24 = load double* %c3.i, align 4, !tbaa !419
  %c4.i = getelementptr inbounds %struct.sincos_t* %.89, i32 0, i32 7
  %25 = load double* %c4.i, align 4, !tbaa !422
  %mul2.i = fmul double %25, %mul50
  %add.i = fadd double %24, %mul2.i
  %s2.i = getelementptr inbounds %struct.sincos_t* %.89, i32 0, i32 9
  %26 = load double* %s2.i, align 4, !tbaa !430
  %s3.i = getelementptr inbounds %struct.sincos_t* %.89, i32 0, i32 10
  %27 = load double* %s3.i, align 4, !tbaa !431
  %mul3.i = fmul double %27, %mul50
  %add4.i = fadd double %26, %mul3.i
  %and.i90 = and i32 %conv20.i, 1
  %tobool.i = icmp ne i32 %and.i90, 0
  %cond.i = select i1 %tobool.i, float* %cosp, float* %sinp
  %cond10.i = select i1 %tobool.i, float* %sinp, float* %cosp
  %c0.i = getelementptr inbounds %struct.sincos_t* %.89, i32 0, i32 3
  %28 = load double* %c0.i, align 4, !tbaa !423
  %c111.i = getelementptr inbounds %struct.sincos_t* %.89, i32 0, i32 4
  %29 = load double* %c111.i, align 4, !tbaa !424
  %mul12.i = fmul double %29, %mul50
  %add13.i = fadd double %28, %mul12.i
  %mul14.i = fmul double %mul50, %mul1.i
  %mul15.i = fmul double %mul50, %mul.i
  %s116.i = getelementptr inbounds %struct.sincos_t* %.89, i32 0, i32 8
  %30 = load double* %s116.i, align 4, !tbaa !432
  %mul17.i = fmul double %30, %mul1.i
  %add18.i = fadd double %mul49, %mul17.i
  %c219.i = getelementptr inbounds %struct.sincos_t* %.89, i32 0, i32 5
  %31 = load double* %c219.i, align 4, !tbaa !425
  %mul20.i = fmul double %31, %mul.i
  %add21.i = fadd double %add13.i, %mul20.i
  %mul22.i = fmul double %mul14.i, %add4.i
  %add23.i = fadd double %mul22.i, %add18.i
  %conv.i = fptrunc double %add23.i to float
  store float %conv.i, float* %cond.i, align 4, !tbaa !435
  %mul24.i = fmul double %mul15.i, %add.i
  %add25.i = fadd double %mul24.i, %add21.i
  %conv26.i = fptrunc double %add25.i to float
  store float %conv26.i, float* %cond10.i, align 4, !tbaa !435
  br label %if.end54

if.else51:                                        ; preds = %if.else29
  %sub = fsub float %y, %y
  store float %sub, float* %cosp, align 4, !tbaa !435
  store float %sub, float* %sinp, align 4, !tbaa !435
  br label %if.end54

if.end54:                                         ; preds = %if.else51, %if.then37, %if.then21, %if.end16, %if.end
  ret void
}

; Function Attrs: nounwind
define float @sinf(float %y) #2 {
entry:
  %y.i = alloca float, align 4
  %conv = fpext float %y to double
  %0 = bitcast float %y to i32
  %shr.i = lshr i32 %0, 20
  %and.i = and i32 %shr.i, 2047
  %cmp = icmp ult i32 %and.i, 1012
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %mul = fmul double %conv, %conv
  %cmp5 = icmp ult i32 %and.i, 920
  br i1 %cmp5, label %if.then7, label %if.end16, !prof !418

if.then7:                                         ; preds = %if.then
  %cmp10 = icmp ult i32 %and.i, 8
  br i1 %cmp10, label %if.then14, label %return, !prof !418

if.then14:                                        ; preds = %if.then7
  %conv15 = fptrunc double %mul to float
  %y.i.0..sroa_cast = bitcast float* %y.i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %y.i.0..sroa_cast)
  store volatile float %conv15, float* %y.i, align 4, !tbaa !435
  call void @llvm.lifetime.end(i64 4, i8* %y.i.0..sroa_cast)
  br label %return

if.end16:                                         ; preds = %if.then
  %mul.i133 = fmul double %conv, %mul
  %1 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 9), align 4, !tbaa !430
  %2 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 10), align 4, !tbaa !431
  %mul1.i134 = fmul double %mul, %2
  %add.i135 = fadd double %1, %mul1.i134
  %mul2.i136 = fmul double %mul, %mul.i133
  %3 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 8), align 4, !tbaa !432
  %mul4.i137 = fmul double %mul.i133, %3
  %add5.i138 = fadd double %conv, %mul4.i137
  %mul6.i139 = fmul double %mul2.i136, %add.i135
  %add7.i140 = fadd double %add5.i138, %mul6.i139
  %retval.0.i143 = fptrunc double %add7.i140 to float
  br label %return

if.else:                                          ; preds = %entry
  %cmp20 = icmp ult i32 %and.i, 1071
  br i1 %cmp20, label %if.then25, label %if.else34, !prof !426

if.then25:                                        ; preds = %if.else
  %4 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 1), align 4, !tbaa !427
  %mul.i125 = fmul double %conv, %4
  %conv.i126 = fptosi double %mul.i125 to i32
  %add.i127 = add nsw i32 %conv.i126, 8388608
  %shr.i128 = ashr i32 %add.i127, 24
  %conv1.i = sitofp i32 %shr.i128 to double
  %5 = load double* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 2), align 4, !tbaa !428
  %mul2.i129 = fmul double %5, %conv1.i
  %sub.i130 = fsub double %conv, %mul2.i129
  %and = and i32 %shr.i128, 3
  %arrayidx = getelementptr inbounds [2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 0, i32 %and
  %6 = load double* %arrayidx, align 4, !tbaa !429
  %and27 = and i32 %shr.i128, 2
  %tobool28 = icmp eq i32 %and27, 0
  %. = select i1 %tobool28, %struct.sincos_t* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0), %struct.sincos_t* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 1)
  %mul31 = fmul double %6, %sub.i130
  %mul32 = fmul double %sub.i130, %sub.i130
  %and.i92 = and i32 %shr.i128, 1
  %cmp.i93 = icmp eq i32 %and.i92, 0
  br i1 %cmp.i93, label %if.then.i105, label %if.else.i121

if.then.i105:                                     ; preds = %if.then25
  %mul.i94 = fmul double %mul31, %mul32
  %s2.i95 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 9
  %7 = load double* %s2.i95, align 4, !tbaa !430
  %s3.i96 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 10
  %8 = load double* %s3.i96, align 4, !tbaa !431
  %mul1.i97 = fmul double %mul32, %8
  %add.i98 = fadd double %7, %mul1.i97
  %mul2.i99 = fmul double %mul32, %mul.i94
  %s13.i100 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 8
  %9 = load double* %s13.i100, align 4, !tbaa !432
  %mul4.i101 = fmul double %mul.i94, %9
  %add5.i102 = fadd double %mul31, %mul4.i101
  %mul6.i103 = fmul double %mul2.i99, %add.i98
  %add7.i104 = fadd double %add5.i102, %mul6.i103
  br label %sinf_poly.exit124

if.else.i121:                                     ; preds = %if.then25
  %mul8.i106 = fmul double %mul32, %mul32
  %c3.i107 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 6
  %10 = load double* %c3.i107, align 4, !tbaa !419
  %c4.i108 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 7
  %11 = load double* %c4.i108, align 4, !tbaa !422
  %mul9.i109 = fmul double %mul32, %11
  %add10.i110 = fadd double %10, %mul9.i109
  %c0.i111 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 3
  %12 = load double* %c0.i111, align 4, !tbaa !423
  %c111.i112 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 4
  %13 = load double* %c111.i112, align 4, !tbaa !424
  %mul12.i113 = fmul double %mul32, %13
  %add13.i114 = fadd double %12, %mul12.i113
  %mul14.i115 = fmul double %mul32, %mul8.i106
  %c215.i116 = getelementptr inbounds %struct.sincos_t* %., i32 0, i32 5
  %14 = load double* %c215.i116, align 4, !tbaa !425
  %mul16.i117 = fmul double %mul8.i106, %14
  %add17.i118 = fadd double %add13.i114, %mul16.i117
  %mul18.i119 = fmul double %mul14.i115, %add10.i110
  %add19.i120 = fadd double %mul18.i119, %add17.i118
  br label %sinf_poly.exit124

sinf_poly.exit124:                                ; preds = %if.else.i121, %if.then.i105
  %retval.0.in.i122 = phi double [ %add7.i104, %if.then.i105 ], [ %add19.i120, %if.else.i121 ]
  %retval.0.i123 = fptrunc double %retval.0.in.i122 to float
  br label %return

if.else34:                                        ; preds = %if.else
  %cmp37 = icmp ult i32 %and.i, 2040
  br i1 %cmp37, label %if.then39, label %if.else54

if.then39:                                        ; preds = %if.else34
  %shr = lshr i32 %0, 31
  %shr.i84 = lshr i32 %0, 26
  %and.i85 = and i32 %shr.i84, 15
  %arrayidx.i = getelementptr inbounds [0 x i32]* bitcast ([24 x i32]* @__inv_pio4 to [0 x i32]*), i32 0, i32 %and.i85
  %shr1.i = lshr i32 %0, 23
  %and2.i = and i32 %shr1.i, 7
  %and3.i = and i32 %0, 8388607
  %or.i = or i32 %and3.i, 8388608
  %shl.i = shl i32 %or.i, %and2.i
  %15 = load i32* %arrayidx.i, align 4, !tbaa !433
  %mul.i86 = mul i32 %15, %shl.i
  %conv.i = zext i32 %mul.i86 to i64
  %conv5.i = zext i32 %shl.i to i64
  %arrayidx.sum.i = add nuw nsw i32 %and.i85, 4
  %arrayidx6.i = getelementptr inbounds [0 x i32]* bitcast ([24 x i32]* @__inv_pio4 to [0 x i32]*), i32 0, i32 %arrayidx.sum.i
  %16 = load i32* %arrayidx6.i, align 4, !tbaa !433
  %conv7.i = zext i32 %16 to i64
  %mul8.i87 = mul i64 %conv7.i, %conv5.i
  %arrayidx.sum35.i = add nuw nsw i32 %and.i85, 8
  %arrayidx10.i = getelementptr inbounds [0 x i32]* bitcast ([24 x i32]* @__inv_pio4 to [0 x i32]*), i32 0, i32 %arrayidx.sum35.i
  %17 = load i32* %arrayidx10.i, align 4, !tbaa !433
  %conv11.i = zext i32 %17 to i64
  %mul12.i88 = mul i64 %conv11.i, %conv5.i
  %shr13.i = lshr i64 %mul12.i88, 32
  %shl14.i = shl nuw i64 %conv.i, 32
  %or15.i = or i64 %shr13.i, %shl14.i
  %add.i89 = add i64 %or15.i, %mul8.i87
  %add16.i = add i64 %add.i89, 2305843009213693952
  %shr17.i = lshr i64 %add16.i, 62
  %shl18.i = shl nuw i64 %shr17.i, 62
  %sub.i = sub i64 %add.i89, %shl18.i
  %conv19.i = sitofp i64 %sub.i to double
  %conv20.i = trunc i64 %shr17.i to i32
  %mul21.i = fmul double %conv19.i, 0x3C1921FB54442D18
  %add = add nuw nsw i32 %conv20.i, %shr
  %and43 = and i32 %add, 3
  %arrayidx45 = getelementptr inbounds [2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0, i32 0, i32 %and43
  %18 = load double* %arrayidx45, align 4, !tbaa !429
  %and47 = and i32 %add, 2
  %tobool48 = icmp eq i32 %and47, 0
  %.82 = select i1 %tobool48, %struct.sincos_t* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 0), %struct.sincos_t* getelementptr inbounds ([2 x %struct.sincos_t]* @__sincosf_table, i32 0, i32 1)
  %mul51 = fmul double %18, %mul21.i
  %mul52 = fmul double %mul21.i, %mul21.i
  %and.i83 = and i32 %conv20.i, 1
  %cmp.i = icmp eq i32 %and.i83, 0
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then39
  %mul.i = fmul double %mul51, %mul52
  %s2.i = getelementptr inbounds %struct.sincos_t* %.82, i32 0, i32 9
  %19 = load double* %s2.i, align 4, !tbaa !430
  %s3.i = getelementptr inbounds %struct.sincos_t* %.82, i32 0, i32 10
  %20 = load double* %s3.i, align 4, !tbaa !431
  %mul1.i = fmul double %mul52, %20
  %add.i = fadd double %19, %mul1.i
  %mul2.i = fmul double %mul52, %mul.i
  %s13.i = getelementptr inbounds %struct.sincos_t* %.82, i32 0, i32 8
  %21 = load double* %s13.i, align 4, !tbaa !432
  %mul4.i = fmul double %mul.i, %21
  %add5.i = fadd double %mul51, %mul4.i
  %mul6.i = fmul double %mul2.i, %add.i
  %add7.i = fadd double %add5.i, %mul6.i
  br label %sinf_poly.exit

if.else.i:                                        ; preds = %if.then39
  %mul8.i = fmul double %mul52, %mul52
  %c3.i = getelementptr inbounds %struct.sincos_t* %.82, i32 0, i32 6
  %22 = load double* %c3.i, align 4, !tbaa !419
  %c4.i = getelementptr inbounds %struct.sincos_t* %.82, i32 0, i32 7
  %23 = load double* %c4.i, align 4, !tbaa !422
  %mul9.i = fmul double %mul52, %23
  %add10.i = fadd double %22, %mul9.i
  %c0.i = getelementptr inbounds %struct.sincos_t* %.82, i32 0, i32 3
  %24 = load double* %c0.i, align 4, !tbaa !423
  %c111.i = getelementptr inbounds %struct.sincos_t* %.82, i32 0, i32 4
  %25 = load double* %c111.i, align 4, !tbaa !424
  %mul12.i = fmul double %mul52, %25
  %add13.i = fadd double %24, %mul12.i
  %mul14.i = fmul double %mul52, %mul8.i
  %c215.i = getelementptr inbounds %struct.sincos_t* %.82, i32 0, i32 5
  %26 = load double* %c215.i, align 4, !tbaa !425
  %mul16.i = fmul double %mul8.i, %26
  %add17.i = fadd double %add13.i, %mul16.i
  %mul18.i = fmul double %mul14.i, %add10.i
  %add19.i = fadd double %mul18.i, %add17.i
  br label %sinf_poly.exit

sinf_poly.exit:                                   ; preds = %if.else.i, %if.then.i
  %retval.0.in.i = phi double [ %add7.i, %if.then.i ], [ %add19.i, %if.else.i ]
  %retval.0.i = fptrunc double %retval.0.in.i to float
  br label %return

if.else54:                                        ; preds = %if.else34
  %call55 = tail call float @__math_invalidf(float %y) #8
  br label %return

return:                                           ; preds = %if.else54, %sinf_poly.exit, %sinf_poly.exit124, %if.end16, %if.then14, %if.then7
  %retval.0 = phi float [ %retval.0.i143, %if.end16 ], [ %retval.0.i123, %sinf_poly.exit124 ], [ %retval.0.i, %sinf_poly.exit ], [ %call55, %if.else54 ], [ %y, %if.then14 ], [ %y, %if.then7 ]
  ret float %retval.0
}

; Function Attrs: nounwind readnone
define double @infinity() #3 {
entry:
  ret double 0x7FF0000000000000
}

; Function Attrs: nounwind readnone
define i32 @__isinf(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %sub = sub nsw i32 0, %ew_u.sroa.0.0.extract.trunc
  %or = or i32 %ew_u.sroa.0.0.extract.trunc, %sub
  %shr = lshr i32 %or, 31
  %or2 = or i32 %and, %shr
  %sub3 = sub nsw i32 2146435072, %or2
  %sub4 = sub nsw i32 0, %sub3
  %or5 = or i32 %sub3, %sub4
  %shr6 = lshr i32 %or5, 31
  %1 = xor i32 %shr6, 1
  ret i32 %1
}

; Function Attrs: nounwind readnone
define i32 @__isinfd(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %sub = sub nsw i32 0, %ew_u.sroa.0.0.extract.trunc
  %or = or i32 %ew_u.sroa.0.0.extract.trunc, %sub
  %shr = lshr i32 %or, 31
  %or2 = or i32 %and, %shr
  %sub3 = sub nsw i32 2146435072, %or2
  %sub4 = sub nsw i32 0, %sub3
  %or5 = or i32 %sub3, %sub4
  %shr6 = lshr i32 %or5, 31
  %1 = xor i32 %shr6, 1
  ret i32 %1
}

; Function Attrs: nounwind readnone
define i32 @isnan(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %sub = sub nsw i32 0, %ew_u.sroa.0.0.extract.trunc
  %or = or i32 %ew_u.sroa.0.0.extract.trunc, %sub
  %shr = lshr i32 %or, 31
  %or2 = or i32 %and, %shr
  %sub3 = sub nsw i32 2146435072, %or2
  %shr4 = lshr i32 %sub3, 31
  ret i32 %shr4
}

; Function Attrs: nounwind readnone
define i32 @__isnan(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %sub = sub nsw i32 0, %ew_u.sroa.0.0.extract.trunc
  %or = or i32 %ew_u.sroa.0.0.extract.trunc, %sub
  %shr = lshr i32 %or, 31
  %or2 = or i32 %and, %shr
  %sub3 = sub nsw i32 2146435072, %or2
  %shr4 = lshr i32 %sub3, 31
  ret i32 %shr4
}

; Function Attrs: nounwind readnone
define i32 @__isnand(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %sub = sub nsw i32 0, %ew_u.sroa.0.0.extract.trunc
  %or = or i32 %ew_u.sroa.0.0.extract.trunc, %sub
  %shr = lshr i32 %or, 31
  %or2 = or i32 %and, %shr
  %sub3 = sub nsw i32 2146435072, %or2
  %shr4 = lshr i32 %sub3, 31
  ret i32 %shr4
}

; Function Attrs: nounwind
define double @ldexp(double %value, i32 %exp) #2 {
entry:
  %call = tail call i32 @finite(double %value) #8
  %tobool = icmp eq i32 %call, 0
  %cmp = fcmp oeq double %value, 0.000000e+00
  %or.cond = or i1 %tobool, %cmp
  br i1 %or.cond, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call1 = tail call double @scalbn(double %value, i32 %exp) #8
  %call2 = tail call i32 @finite(double %call1) #8
  %tobool3 = icmp eq i32 %call2, 0
  %cmp5 = fcmp oeq double %call1, 0.000000e+00
  %or.cond9 = or i1 %tobool3, %cmp5
  br i1 %or.cond9, label %if.then6, label %return

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32* @__errno() #8
  store i32 34, i32* %call7, align 4, !tbaa !433
  br label %return

return:                                           ; preds = %if.then6, %if.end, %entry
  %retval.0 = phi double [ %value, %entry ], [ %call1, %if.end ], [ %call1, %if.then6 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define i32 @finitel(x86_fp80 %x) #2 {
entry:
  %iseq = fcmp ord x86_fp80 %x, 0xK00000000000000000000
  %abs = tail call x86_fp80 @fabsl(x86_fp80 %x) #4
  %isinf = fcmp une x86_fp80 %abs, 0xK7FFF8000000000000000
  %and = and i1 %iseq, %isinf
  %0 = zext i1 %and to i32
  ret i32 %0
}

declare x86_fp80 @fabsl(x86_fp80)

; Function Attrs: nounwind
define i64 @llrint(double %x) #2 {
entry:
  %w = alloca double, align 8
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %shr107108 = lshr i64 %0, 63
  %shr107 = trunc i64 %shr107108 to i32
  %and2111 = lshr i64 %0, 52
  %and2 = trunc i64 %and2111 to i32
  %shr3110 = and i32 %and2, 2047
  %sub = add nsw i32 %shr3110, -1023
  %cmp = icmp slt i32 %sub, 20
  br i1 %cmp, label %if.then, label %if.else23

if.then:                                          ; preds = %entry
  %cmp4 = icmp slt i32 %sub, -1
  br i1 %cmp4, label %return, label %if.else

if.else:                                          ; preds = %if.then
  %arrayidx = getelementptr inbounds [2 x double]* @TWO52, i32 0, i32 %shr107
  %1 = load double* %arrayidx, align 8, !tbaa !429
  %add = fadd double %1, %x
  store volatile double %add, double* %w, align 8, !tbaa !429
  %w.0.w.0. = load volatile double* %w, align 8
  %2 = load double* %arrayidx, align 8, !tbaa !429
  %sub7 = fsub double %w.0.w.0., %2
  %3 = bitcast double %sub7 to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %3, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and13 = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp14 = icmp eq i32 %and13, 0
  br i1 %cmp14, label %return, label %if.end

if.end:                                           ; preds = %if.else
  %and16119 = lshr i64 %3, 52
  %and16 = trunc i64 %and16119 to i32
  %shr17118 = and i32 %and16, 2047
  %and19 = and i32 %gh_u.sroa.0.4.extract.trunc, 1048575
  %or = or i32 %and19, 1048576
  %sub20 = sub i32 1043, %shr17118
  %shr21 = lshr i32 %or, %sub20
  %conv = sext i32 %shr21 to i64
  br label %if.end72

if.else23:                                        ; preds = %entry
  %cmp24 = icmp slt i32 %sub, 63
  br i1 %cmp24, label %if.then26, label %if.else69

if.then26:                                        ; preds = %if.else23
  %cmp27 = icmp sgt i32 %sub, 51
  br i1 %cmp27, label %if.then29, label %if.else39

if.then29:                                        ; preds = %if.then26
  %and30 = and i32 %ew_u.sroa.0.4.extract.trunc, 1048575
  %or31 = or i32 %and30, 1048576
  %conv32117 = zext i32 %or31 to i64
  %sub33 = add nsw i32 %shr3110, -1043
  %sh_prom = zext i32 %sub33 to i64
  %shl = shl i64 %conv32117, %sh_prom
  %conv34 = and i64 %0, 4294967295
  %sub35 = add nsw i32 %shr3110, -1075
  %sh_prom36 = zext i32 %sub35 to i64
  %shl37 = shl i64 %conv34, %sh_prom36
  %or38 = or i64 %shl, %shl37
  br label %if.end72

if.else39:                                        ; preds = %if.then26
  %arrayidx40 = getelementptr inbounds [2 x double]* @TWO52, i32 0, i32 %shr107
  %4 = load double* %arrayidx40, align 8, !tbaa !429
  %add41 = fadd double %4, %x
  store volatile double %add41, double* %w, align 8, !tbaa !429
  %w.0.w.0.78 = load volatile double* %w, align 8
  %5 = load double* %arrayidx40, align 8, !tbaa !429
  %sub43 = fsub double %w.0.w.0.78, %5
  %6 = bitcast double %sub43 to i64
  %ew_u45.sroa.0.4.extract.shift = lshr i64 %6, 32
  %ew_u45.sroa.0.4.extract.trunc = trunc i64 %ew_u45.sroa.0.4.extract.shift to i32
  %and52114 = lshr i64 %6, 52
  %and52 = trunc i64 %and52114 to i32
  %shr53113 = and i32 %and52, 2047
  %and55 = and i32 %ew_u45.sroa.0.4.extract.trunc, 1048575
  %or56 = or i32 %and55, 1048576
  %conv57116 = zext i32 %or56 to i64
  %sub58 = add nsw i32 %shr53113, -1043
  %sh_prom59 = zext i32 %sub58 to i64
  %shl60 = shl i64 %conv57116, %sh_prom59
  %sub61 = sub i32 1075, %shr53113
  %cmp62 = icmp ult i32 %sub61, 32
  br i1 %cmp62, label %cond.true, label %cond.end

cond.true:                                        ; preds = %if.else39
  %ew_u45.sroa.0.0.extract.trunc = trunc i64 %6 to i32
  %shr65 = lshr i32 %ew_u45.sroa.0.0.extract.trunc, %sub61
  %phitmp = zext i32 %shr65 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.else39
  %cond = phi i64 [ %phitmp, %cond.true ], [ 0, %if.else39 ]
  %or67 = or i64 %cond, %shl60
  br label %if.end72

if.else69:                                        ; preds = %if.else23
  %conv70 = fptosi double %x to i64
  br label %return

if.end72:                                         ; preds = %cond.end, %if.then29, %if.end
  %result.0 = phi i64 [ %conv, %if.end ], [ %or38, %if.then29 ], [ %or67, %cond.end ]
  %tobool = icmp ne i32 %shr107, 0
  %sub74 = sub nsw i64 0, %result.0
  %cond77 = select i1 %tobool, i64 %sub74, i64 %result.0
  br label %return

return:                                           ; preds = %if.end72, %if.else69, %if.else, %if.then
  %retval.0 = phi i64 [ %cond77, %if.end72 ], [ %conv70, %if.else69 ], [ 0, %if.then ], [ 0, %if.else ]
  ret i64 %retval.0
}

; Function Attrs: nounwind readnone
define i64 @llround(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %1 = ashr i32 %ew_u.sroa.0.4.extract.trunc, 31
  %2 = or i32 %1, 1
  %and477 = lshr i64 %0, 52
  %and4 = trunc i64 %and477 to i32
  %shr = and i32 %and4, 2047
  %sub = add nsw i32 %shr, -1023
  %and5 = and i32 %ew_u.sroa.0.4.extract.trunc, 1048575
  %or = or i32 %and5, 1048576
  %cmp = icmp slt i32 %sub, 20
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %cmp6 = icmp slt i32 %sub, 0
  br i1 %cmp6, label %if.then7, label %if.else10

if.then7:                                         ; preds = %if.then
  %cmp8 = icmp slt i32 %sub, -1
  %conv = sext i32 %2 to i64
  %.conv = select i1 %cmp8, i64 0, i64 %conv
  ret i64 %.conv

if.else10:                                        ; preds = %if.then
  %shr11 = lshr i32 524288, %sub
  %add = add i32 %shr11, %or
  %sub12 = sub i32 1043, %shr
  %shr13 = lshr i32 %add, %sub12
  %conv14 = zext i32 %shr13 to i64
  br label %if.end52

if.else15:                                        ; preds = %entry
  %cmp16 = icmp ult i32 %sub, 63
  br i1 %cmp16, label %if.then18, label %if.else49

if.then18:                                        ; preds = %if.else15
  %cmp19 = icmp sgt i32 %sub, 51
  br i1 %cmp19, label %if.then21, label %if.else28

if.then21:                                        ; preds = %if.then18
  %conv22 = zext i32 %or to i64
  %sub23 = add nsw i32 %shr, -1043
  %sh_prom = zext i32 %sub23 to i64
  %shl = shl i64 %conv22, %sh_prom
  %sub24 = add nsw i32 %shr, -1075
  %shl25 = shl i32 %ew_u.sroa.0.0.extract.trunc, %sub24
  %conv26 = zext i32 %shl25 to i64
  %or27 = or i64 %shl, %conv26
  br label %if.end52

if.else28:                                        ; preds = %if.then18
  %sub29 = add nsw i32 %shr, -1043
  %shr30 = lshr i32 -2147483648, %sub29
  %uadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %ew_u.sroa.0.0.extract.trunc, i32 %shr30)
  %cmp32 = extractvalue { i32, i1 } %uadd, 1
  %inc = zext i1 %cmp32 to i32
  %inc.or = add nuw nsw i32 %inc, %or
  %conv36 = zext i32 %inc.or to i64
  %sh_prom38 = zext i32 %sub29 to i64
  %shl39 = shl i64 %conv36, %sh_prom38
  %sub40 = sub i32 1075, %shr
  %cmp41 = icmp ult i32 %sub40, 32
  br i1 %cmp41, label %cond.true, label %cond.end

cond.true:                                        ; preds = %if.else28
  %3 = extractvalue { i32, i1 } %uadd, 0
  %shr44 = lshr i32 %3, %sub40
  %phitmp = zext i32 %shr44 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.else28
  %cond45 = phi i64 [ %phitmp, %cond.true ], [ 0, %if.else28 ]
  %or47 = or i64 %cond45, %shl39
  br label %if.end52

if.else49:                                        ; preds = %if.else15
  %conv50 = fptosi double %x to i64
  br label %return

if.end52:                                         ; preds = %cond.end, %if.then21, %if.else10
  %result.0 = phi i64 [ %conv14, %if.else10 ], [ %or27, %if.then21 ], [ %or47, %cond.end ]
  %conv53 = sext i32 %2 to i64
  %mul = mul nsw i64 %result.0, %conv53
  br label %return

return:                                           ; preds = %if.end52, %if.else49
  %retval.0 = phi i64 [ %mul, %if.end52 ], [ %conv50, %if.else49 ]
  ret i64 %retval.0
}

; Function Attrs: nounwind
define double @log1p(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp slt i32 %gh_u.sroa.0.4.extract.trunc, 1071284858
  br i1 %cmp, label %if.then, label %if.end18

if.then:                                          ; preds = %entry
  %cmp1 = icmp ugt i32 %and, 1072693247
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %cmp3 = fcmp oeq double %x, -1.000000e+00
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then2
  %call = tail call double @__math_divzero(i32 1) #8
  br label %return

if.else:                                          ; preds = %if.then2
  %call5 = tail call double @__math_invalid(double %x) #8
  br label %return

if.end:                                           ; preds = %if.then
  %cmp6 = icmp ult i32 %and, 1042284544
  br i1 %cmp6, label %if.then7, label %if.end13

if.then7:                                         ; preds = %if.end
  %add = fadd double %x, 0x4350000000000000
  %cmp8 = fcmp ogt double %add, 0.000000e+00
  %cmp9 = icmp ult i32 %and, 1016070144
  %or.cond = and i1 %cmp8, %cmp9
  br i1 %or.cond, label %return, label %if.else11

if.else11:                                        ; preds = %if.then7
  %mul = fmul double %x, %x
  %mul12 = fmul double %mul, 5.000000e-01
  %sub = fsub double %x, %mul12
  br label %return

if.end13:                                         ; preds = %if.end
  %gh_u.sroa.0.4.extract.trunc.off = add i32 %gh_u.sroa.0.4.extract.trunc, 1076707644
  %not. = icmp ult i32 %gh_u.sroa.0.4.extract.trunc.off, 1076707645
  %. = zext i1 %not. to i32
  br label %if.end18

if.end18:                                         ; preds = %if.end13, %entry
  %k.0 = phi i32 [ 1, %entry ], [ %., %if.end13 ]
  %cmp19 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, 2146435071
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end18
  %add21 = fadd double %x, %x
  br label %return

if.end22:                                         ; preds = %if.end18
  %cmp23 = icmp eq i32 %k.0, 0
  br i1 %cmp23, label %if.end73.thread, label %if.then24

if.end73.thread:                                  ; preds = %if.end22
  %mul74215 = fmul double %x, 5.000000e-01
  %mul75216 = fmul double %mul74215, %x
  br label %if.end105

if.then24:                                        ; preds = %if.end22
  %cmp25 = icmp slt i32 %gh_u.sroa.0.4.extract.trunc, 1128267776
  br i1 %cmp25, label %if.then26, label %if.else40

if.then26:                                        ; preds = %if.then24
  %add27 = fadd double %x, 1.000000e+00
  %1 = bitcast double %add27 to i64
  %gh_u29.sroa.0.4.extract.shift = lshr i64 %1, 32
  %gh_u29.sroa.0.4.extract.trunc = trunc i64 %gh_u29.sroa.0.4.extract.shift to i32
  %shr = ashr i32 %gh_u29.sroa.0.4.extract.trunc, 20
  %sub34 = add nsw i32 %shr, -1023
  %cmp35 = icmp sgt i32 %sub34, 0
  br i1 %cmp35, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then26
  %sub36 = fsub double %add27, %x
  %sub37 = fsub double 1.000000e+00, %sub36
  br label %cond.end

cond.false:                                       ; preds = %if.then26
  %sub38 = fadd double %add27, -1.000000e+00
  %sub39 = fsub double %x, %sub38
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %sub37, %cond.true ], [ %sub39, %cond.false ]
  %div = fdiv double %cond, %add27
  br label %if.end49

if.else40:                                        ; preds = %if.then24
  %shr47 = ashr i32 %gh_u.sroa.0.4.extract.trunc, 20
  %sub48 = add nsw i32 %shr47, -1023
  br label %if.end49

if.end49:                                         ; preds = %if.else40, %cond.end
  %hu.1 = phi i32 [ %gh_u29.sroa.0.4.extract.trunc, %cond.end ], [ %gh_u.sroa.0.4.extract.trunc, %if.else40 ]
  %k.1 = phi i32 [ %sub34, %cond.end ], [ %sub48, %if.else40 ]
  %u.0 = phi double [ %add27, %cond.end ], [ %x, %if.else40 ]
  %c.0 = phi double [ %div, %cond.end ], [ 0.000000e+00, %if.else40 ]
  %and50 = and i32 %hu.1, 1048575
  %cmp51 = icmp ult i32 %and50, 434334
  br i1 %cmp51, label %do.body53, label %if.else59

do.body53:                                        ; preds = %if.end49
  %or = or i32 %and50, 1072693248
  %2 = bitcast double %u.0 to i64
  %sh_u.sroa.0.4.insert.ext = zext i32 %or to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw nsw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %2, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.mask, %sh_u.sroa.0.4.insert.shift
  br label %if.end73

if.else59:                                        ; preds = %if.end49
  %add60 = add nsw i32 %k.1, 1
  %or64 = or i32 %and50, 1071644672
  %3 = bitcast double %u.0 to i64
  %sh_u62.sroa.0.4.insert.ext = zext i32 %or64 to i64
  %sh_u62.sroa.0.4.insert.shift = shl nuw nsw i64 %sh_u62.sroa.0.4.insert.ext, 32
  %sh_u62.sroa.0.4.insert.mask = and i64 %3, 4294967295
  %sh_u62.sroa.0.4.insert.insert = or i64 %sh_u62.sroa.0.4.insert.mask, %sh_u62.sroa.0.4.insert.shift
  %sub69 = sub nsw i32 1048576, %and50
  %shr70214 = lshr i32 %sub69, 2
  br label %if.end73

if.end73:                                         ; preds = %if.else59, %do.body53
  %hu.2 = phi i32 [ %and50, %do.body53 ], [ %shr70214, %if.else59 ]
  %k.2 = phi i32 [ %k.1, %do.body53 ], [ %add60, %if.else59 ]
  %u.1.in = phi i64 [ %sh_u.sroa.0.4.insert.insert, %do.body53 ], [ %sh_u62.sroa.0.4.insert.insert, %if.else59 ]
  %u.1 = bitcast i64 %u.1.in to double
  %sub72 = fadd double %u.1, -1.000000e+00
  %mul74 = fmul double %sub72, 5.000000e-01
  %mul75 = fmul double %sub72, %mul74
  %cmp76 = icmp eq i32 %hu.2, 0
  br i1 %cmp76, label %if.then77, label %if.end105

if.then77:                                        ; preds = %if.end73
  %cmp78 = fcmp oeq double %sub72, 0.000000e+00
  br i1 %cmp78, label %if.then79, label %if.end88

if.then79:                                        ; preds = %if.then77
  %cmp80 = icmp eq i32 %k.2, 0
  br i1 %cmp80, label %return, label %if.else82

if.else82:                                        ; preds = %if.then79
  %conv = sitofp i32 %k.2 to double
  %mul83 = fmul double %conv, 0x3DEA39EF35793C76
  %add84 = fadd double %c.0, %mul83
  %mul86 = fmul double %conv, 0x3FE62E42FEE00000
  %add87 = fadd double %mul86, %add84
  br label %return

if.end88:                                         ; preds = %if.then77
  %mul89 = fmul double %sub72, 0x3FE5555555555555
  %sub90 = fsub double 1.000000e+00, %mul89
  %mul91 = fmul double %mul75, %sub90
  %cmp92 = icmp eq i32 %k.2, 0
  br i1 %cmp92, label %if.then94, label %if.else96

if.then94:                                        ; preds = %if.end88
  %sub95 = fsub double %sub72, %mul91
  br label %return

if.else96:                                        ; preds = %if.end88
  %conv97 = sitofp i32 %k.2 to double
  %mul98 = fmul double %conv97, 0x3FE62E42FEE00000
  %mul100 = fmul double %conv97, 0x3DEA39EF35793C76
  %add101 = fadd double %c.0, %mul100
  %sub102 = fsub double %mul91, %add101
  %sub103 = fsub double %sub102, %sub72
  %sub104 = fsub double %mul98, %sub103
  br label %return

if.end105:                                        ; preds = %if.end73, %if.end73.thread
  %mul75221 = phi double [ %mul75216, %if.end73.thread ], [ %mul75, %if.end73 ]
  %f.1220 = phi double [ %x, %if.end73.thread ], [ %sub72, %if.end73 ]
  %c.1219 = phi double [ undef, %if.end73.thread ], [ %c.0, %if.end73 ]
  %k.3218 = phi i32 [ 0, %if.end73.thread ], [ %k.2, %if.end73 ]
  %add106 = fadd double %f.1220, 2.000000e+00
  %div107 = fdiv double %f.1220, %add106
  %mul108 = fmul double %div107, %div107
  %mul109 = fmul double %mul108, 0x3FC2F112DF3E5244
  %add110 = fadd double %mul109, 0x3FC39A09D078C69F
  %mul111 = fmul double %mul108, %add110
  %add112 = fadd double %mul111, 0x3FC7466496CB03DE
  %mul113 = fmul double %mul108, %add112
  %add114 = fadd double %mul113, 0x3FCC71C51D8E78AF
  %mul115 = fmul double %mul108, %add114
  %add116 = fadd double %mul115, 0x3FD2492494229359
  %mul117 = fmul double %mul108, %add116
  %add118 = fadd double %mul117, 0x3FD999999997FA04
  %mul119 = fmul double %mul108, %add118
  %add120 = fadd double %mul119, 0x3FE5555555555593
  %mul121 = fmul double %mul108, %add120
  %cmp122 = icmp eq i32 %k.3218, 0
  br i1 %cmp122, label %if.then124, label %if.else129

if.then124:                                       ; preds = %if.end105
  %add125 = fadd double %mul75221, %mul121
  %mul126 = fmul double %div107, %add125
  %sub127 = fsub double %mul75221, %mul126
  %sub128 = fsub double %f.1220, %sub127
  br label %return

if.else129:                                       ; preds = %if.end105
  %conv130 = sitofp i32 %k.3218 to double
  %mul131 = fmul double %conv130, 0x3FE62E42FEE00000
  %add132 = fadd double %mul75221, %mul121
  %mul133 = fmul double %div107, %add132
  %mul135 = fmul double %conv130, 0x3DEA39EF35793C76
  %add136 = fadd double %c.1219, %mul135
  %add137 = fadd double %add136, %mul133
  %sub138 = fsub double %mul75221, %add137
  %sub139 = fsub double %sub138, %f.1220
  %sub140 = fsub double %mul131, %sub139
  br label %return

return:                                           ; preds = %if.else129, %if.then124, %if.else96, %if.then94, %if.else82, %if.then79, %if.then20, %if.else11, %if.then7, %if.else, %if.then4
  %retval.0 = phi double [ %call, %if.then4 ], [ %call5, %if.else ], [ %sub, %if.else11 ], [ %add21, %if.then20 ], [ %add87, %if.else82 ], [ %sub95, %if.then94 ], [ %sub104, %if.else96 ], [ %sub128, %if.then124 ], [ %sub140, %if.else129 ], [ %x, %if.then7 ], [ 0.000000e+00, %if.then79 ]
  ret double %retval.0
}

; Function Attrs: nounwind readnone
define double @logb(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ult i32 %and, 1048576
  br i1 %cmp, label %if.then, label %if.else24

if.then:                                          ; preds = %entry
  %or = or i32 %and, %ew_u.sroa.0.0.extract.trunc
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %do.body4, label %if.else

do.body4:                                         ; preds = %if.then
  %iw_u.sroa.0.4.insert.ext = zext i32 %and to i64
  %iw_u.sroa.0.4.insert.shift = shl nuw nsw i64 %iw_u.sroa.0.4.insert.ext, 32
  %iw_u.sroa.0.0.insert.ext = and i64 %0, 4294967295
  %iw_u.sroa.0.0.insert.insert = or i64 %iw_u.sroa.0.4.insert.shift, %iw_u.sroa.0.0.insert.ext
  %1 = bitcast i64 %iw_u.sroa.0.0.insert.insert to double
  %div = fdiv double -1.000000e+00, %1
  br label %return

if.else:                                          ; preds = %if.then
  %cmp11 = icmp eq i32 %and, 0
  br i1 %cmp11, label %for.cond.preheader, label %if.else14

for.cond.preheader:                               ; preds = %if.else
  %cmp1353 = icmp sgt i32 %ew_u.sroa.0.0.extract.trunc, 0
  br i1 %cmp1353, label %for.body.preheader, label %if.end23

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %ix.055 = phi i32 [ %sub, %for.body ], [ -1043, %for.body.preheader ]
  %lx.054 = phi i32 [ %shl, %for.body ], [ %ew_u.sroa.0.0.extract.trunc, %for.body.preheader ]
  %sub = add nsw i32 %ix.055, -1
  %shl = shl i32 %lx.054, 1
  %cmp13 = icmp sgt i32 %shl, 0
  br i1 %cmp13, label %for.body, label %if.end23.loopexit

if.else14:                                        ; preds = %if.else
  %shl1550 = shl nuw nsw i64 %ew_u.sroa.0.4.extract.shift, 11
  %shl15 = trunc i64 %shl1550 to i32
  %cmp1756 = icmp sgt i32 %shl15, 0
  br i1 %cmp1756, label %for.body18.preheader, label %if.end23

for.body18.preheader:                             ; preds = %if.else14
  br label %for.body18

for.body18:                                       ; preds = %for.body18, %for.body18.preheader
  %hx.058 = phi i32 [ %shl21, %for.body18 ], [ %shl15, %for.body18.preheader ]
  %ix.157 = phi i32 [ %sub19, %for.body18 ], [ -1022, %for.body18.preheader ]
  %sub19 = add nsw i32 %ix.157, -1
  %shl21 = shl i32 %hx.058, 1
  %cmp17 = icmp sgt i32 %shl21, 0
  br i1 %cmp17, label %for.body18, label %if.end23.loopexit61

if.end23.loopexit:                                ; preds = %for.body
  %sub.lcssa = phi i32 [ %sub, %for.body ]
  br label %if.end23

if.end23.loopexit61:                              ; preds = %for.body18
  %sub19.lcssa = phi i32 [ %sub19, %for.body18 ]
  br label %if.end23

if.end23:                                         ; preds = %if.end23.loopexit61, %if.end23.loopexit, %if.else14, %for.cond.preheader
  %ix.2 = phi i32 [ -1043, %for.cond.preheader ], [ -1022, %if.else14 ], [ %sub.lcssa, %if.end23.loopexit ], [ %sub19.lcssa, %if.end23.loopexit61 ]
  %conv = sitofp i32 %ix.2 to double
  br label %return

if.else24:                                        ; preds = %entry
  %cmp25 = icmp ult i32 %and, 2146435072
  br i1 %cmp25, label %if.then27, label %if.else30

if.then27:                                        ; preds = %if.else24
  %shr49 = lshr i32 %and, 20
  %sub28 = add nsw i32 %shr49, -1023
  %conv29 = sitofp i32 %sub28 to double
  br label %return

if.else30:                                        ; preds = %if.else24
  %cmp31 = icmp ugt i32 %and, 2146435072
  %tobool = icmp ne i32 %ew_u.sroa.0.0.extract.trunc, 0
  %or.cond = or i1 %cmp31, %tobool
  %x. = select i1 %or.cond, double %x, double 0x7FF0000000000000
  br label %return

return:                                           ; preds = %if.else30, %if.then27, %if.end23, %do.body4
  %retval.0 = phi double [ %div, %do.body4 ], [ %conv, %if.end23 ], [ %conv29, %if.then27 ], [ %x., %if.else30 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define i32 @lrint(double %x) #2 {
entry:
  %w = alloca double, align 8
  %0 = bitcast double %x to i64
  %shr9798 = lshr i64 %0, 63
  %shr97 = trunc i64 %shr9798 to i32
  %and2101 = lshr i64 %0, 52
  %and2 = trunc i64 %and2101 to i32
  %shr3100 = and i32 %and2, 2047
  %sub = add nsw i32 %shr3100, -1023
  %cmp = icmp slt i32 %sub, 20
  br i1 %cmp, label %if.then, label %if.else23

if.then:                                          ; preds = %entry
  %cmp4 = icmp slt i32 %sub, -1
  br i1 %cmp4, label %return, label %if.else

if.else:                                          ; preds = %if.then
  %arrayidx = getelementptr inbounds [2 x double]* @TWO52142, i32 0, i32 %shr97
  %1 = load double* %arrayidx, align 8, !tbaa !429
  %add = fadd double %1, %x
  store volatile double %add, double* %w, align 8, !tbaa !429
  %w.0.w.0. = load volatile double* %w, align 8
  %2 = load double* %arrayidx, align 8, !tbaa !429
  %sub7 = fsub double %w.0.w.0., %2
  %3 = bitcast double %sub7 to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %3, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and13 = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp14 = icmp eq i32 %and13, 0
  br i1 %cmp14, label %return, label %if.end

if.end:                                           ; preds = %if.else
  %and16107 = lshr i64 %3, 52
  %and16 = trunc i64 %and16107 to i32
  %shr17106 = and i32 %and16, 2047
  %and19 = and i32 %gh_u.sroa.0.4.extract.trunc, 1048575
  %or = or i32 %and19, 1048576
  %sub20 = sub i32 1043, %shr17106
  %shr21 = lshr i32 %or, %sub20
  br label %if.end62

if.else23:                                        ; preds = %entry
  %cmp24 = icmp slt i32 %sub, 31
  br i1 %cmp24, label %if.else34, label %if.else60

if.else34:                                        ; preds = %if.else23
  %arrayidx35 = getelementptr inbounds [2 x double]* @TWO52142, i32 0, i32 %shr97
  %4 = load double* %arrayidx35, align 8, !tbaa !429
  %add36 = fadd double %4, %x
  store volatile double %add36, double* %w, align 8, !tbaa !429
  %w.0.w.0.68 = load volatile double* %w, align 8
  %5 = load double* %arrayidx35, align 8, !tbaa !429
  %sub38 = fsub double %w.0.w.0.68, %5
  %6 = bitcast double %sub38 to i64
  %ew_u40.sroa.0.4.extract.shift = lshr i64 %6, 32
  %ew_u40.sroa.0.4.extract.trunc = trunc i64 %ew_u40.sroa.0.4.extract.shift to i32
  %and47104 = lshr i64 %6, 52
  %and47 = trunc i64 %and47104 to i32
  %shr48103 = and i32 %and47, 2047
  %and50 = and i32 %ew_u40.sroa.0.4.extract.trunc, 1048575
  %or51 = or i32 %and50, 1048576
  %sub52 = add nsw i32 %shr48103, -1043
  %shl53 = shl i32 %or51, %sub52
  %sub54 = sub i32 1075, %shr48103
  %cmp55 = icmp ult i32 %sub54, 32
  br i1 %cmp55, label %cond.true, label %cond.end

cond.true:                                        ; preds = %if.else34
  %ew_u40.sroa.0.0.extract.trunc = trunc i64 %6 to i32
  %shr57 = lshr i32 %ew_u40.sroa.0.0.extract.trunc, %sub54
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.else34
  %cond = phi i32 [ %shr57, %cond.true ], [ 0, %if.else34 ]
  %or58 = or i32 %cond, %shl53
  br label %if.end62

if.else60:                                        ; preds = %if.else23
  %conv = fptosi double %x to i32
  br label %return

if.end62:                                         ; preds = %cond.end, %if.end
  %result.0 = phi i32 [ %shr21, %if.end ], [ %or58, %cond.end ]
  %tobool = icmp ne i32 %shr97, 0
  %sub64 = sub nsw i32 0, %result.0
  %cond67 = select i1 %tobool, i32 %sub64, i32 %result.0
  br label %return

return:                                           ; preds = %if.end62, %if.else60, %if.else, %if.then
  %retval.0 = phi i32 [ %cond67, %if.end62 ], [ %conv, %if.else60 ], [ 0, %if.then ], [ 0, %if.else ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readnone
define i32 @lround(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %1 = ashr i32 %ew_u.sroa.0.4.extract.trunc, 31
  %2 = or i32 %1, 1
  %and465 = lshr i64 %0, 52
  %and4 = trunc i64 %and465 to i32
  %shr = and i32 %and4, 2047
  %sub = add nsw i32 %shr, -1023
  %and5 = and i32 %ew_u.sroa.0.4.extract.trunc, 1048575
  %or = or i32 %and5, 1048576
  %cmp = icmp slt i32 %sub, 20
  br i1 %cmp, label %if.then, label %if.else14

if.then:                                          ; preds = %entry
  %cmp6 = icmp slt i32 %sub, 0
  br i1 %cmp6, label %if.then7, label %if.else10

if.then7:                                         ; preds = %if.then
  %cmp8 = icmp slt i32 %sub, -1
  %. = select i1 %cmp8, i32 0, i32 %2
  br label %return

if.else10:                                        ; preds = %if.then
  %shr11 = lshr i32 524288, %sub
  %add = add i32 %shr11, %or
  %sub12 = sub i32 1043, %shr
  %shr13 = lshr i32 %add, %sub12
  br label %if.end41

if.else14:                                        ; preds = %entry
  %cmp15 = icmp ult i32 %sub, 31
  br i1 %cmp15, label %if.else23, label %if.else39

if.else23:                                        ; preds = %if.else14
  %sub19 = add nsw i32 %shr, -1043
  %shr25 = lshr i32 -2147483648, %sub19
  %uadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %ew_u.sroa.0.0.extract.trunc, i32 %shr25)
  %3 = extractvalue { i32, i1 } %uadd, 0
  %cmp27 = extractvalue { i32, i1 } %uadd, 1
  %inc = zext i1 %cmp27 to i32
  %inc.or = add nuw nsw i32 %inc, %or
  %shl31 = shl i32 %inc.or, %sub19
  %sub32 = sub i32 1075, %shr
  %cmp33 = icmp ult i32 %sub32, 32
  %shr35 = lshr i32 %3, %sub32
  %cond36 = select i1 %cmp33, i32 %shr35, i32 0
  %or37 = or i32 %shl31, %cond36
  br label %if.end41

if.else39:                                        ; preds = %if.else14
  %conv = fptosi double %x to i32
  br label %return

if.end41:                                         ; preds = %if.else23, %if.else10
  %result.0 = phi i32 [ %shr13, %if.else10 ], [ %or37, %if.else23 ]
  %mul = mul nsw i32 %result.0, %2
  br label %return

return:                                           ; preds = %if.end41, %if.else39, %if.then7
  %retval.0 = phi i32 [ %mul, %if.end41 ], [ %conv, %if.else39 ], [ %., %if.then7 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define double @modf(double %x, double* nocapture %iptr) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %shr112113 = lshr i64 %0, 52
  %shr112 = trunc i64 %shr112113 to i32
  %and = and i32 %shr112, 2047
  %sub = add nsw i32 %and, -1023
  %cmp = icmp slt i32 %sub, 20
  br i1 %cmp, label %if.then, label %if.else36

if.then:                                          ; preds = %entry
  %cmp2 = icmp slt i32 %sub, 0
  br i1 %cmp2, label %do.body4, label %if.else

do.body4:                                         ; preds = %if.then
  %iw_u.sroa.0.0.insert.mask = and i64 %0, -9223372036854775808
  %1 = bitcast i64 %iw_u.sroa.0.0.insert.mask to double
  store double %1, double* %iptr, align 4, !tbaa !429
  br label %return

if.else:                                          ; preds = %if.then
  %shr12 = lshr i32 1048575, %sub
  %and13 = and i32 %shr12, %ew_u.sroa.0.4.extract.trunc
  %or = or i32 %and13, %ew_u.sroa.0.0.extract.trunc
  %cmp14 = icmp eq i32 %or, 0
  br i1 %cmp14, label %if.then15, label %do.body26

if.then15:                                        ; preds = %if.else
  store double %x, double* %iptr, align 4, !tbaa !429
  %iw_u17.sroa.0.0.insert.mask = and i64 %0, -9223372036854775808
  %2 = bitcast i64 %iw_u17.sroa.0.0.insert.mask to double
  br label %return

do.body26:                                        ; preds = %if.else
  %neg = xor i32 %shr12, -1
  %and28 = and i32 %ew_u.sroa.0.4.extract.trunc, %neg
  %iw_u27.sroa.0.4.insert.ext = zext i32 %and28 to i64
  %iw_u27.sroa.0.4.insert.shift = shl nuw i64 %iw_u27.sroa.0.4.insert.ext, 32
  %3 = bitcast i64 %iw_u27.sroa.0.4.insert.shift to double
  store double %3, double* %iptr, align 4, !tbaa !429
  %sub35 = fsub double %x, %3
  br label %return

if.else36:                                        ; preds = %entry
  %cmp37 = icmp sgt i32 %sub, 51
  br i1 %cmp37, label %if.then38, label %if.else50

if.then38:                                        ; preds = %if.else36
  store double %x, double* %iptr, align 4, !tbaa !429
  %call = tail call i32 @__fpclassifyd(double %x) #8
  %cmp39 = icmp eq i32 %call, 0
  br i1 %cmp39, label %if.then40, label %do.body41

if.then40:                                        ; preds = %if.then38
  %add = fadd double %x, %x
  store double %add, double* %iptr, align 4, !tbaa !429
  br label %return

do.body41:                                        ; preds = %if.then38
  %iw_u42.sroa.0.0.insert.mask = and i64 %0, -9223372036854775808
  %4 = bitcast i64 %iw_u42.sroa.0.0.insert.mask to double
  br label %return

if.else50:                                        ; preds = %if.else36
  %sub51 = add nsw i32 %and, -1043
  %shr52 = lshr i32 -1, %sub51
  %and53 = and i32 %shr52, %ew_u.sroa.0.0.extract.trunc
  %cmp54 = icmp eq i32 %and53, 0
  br i1 %cmp54, label %if.then55, label %do.body66

if.then55:                                        ; preds = %if.else50
  store double %x, double* %iptr, align 4, !tbaa !429
  %iw_u57.sroa.0.0.insert.mask = and i64 %0, -9223372036854775808
  %5 = bitcast i64 %iw_u57.sroa.0.0.insert.mask to double
  br label %return

do.body66:                                        ; preds = %if.else50
  %neg70 = xor i32 %shr52, -1
  %and71 = and i32 %ew_u.sroa.0.0.extract.trunc, %neg70
  %iw_u67.sroa.0.0.insert.ext = zext i32 %and71 to i64
  %iw_u67.sroa.0.0.insert.mask = and i64 %0, -4294967296
  %iw_u67.sroa.0.0.insert.insert = or i64 %iw_u67.sroa.0.0.insert.ext, %iw_u67.sroa.0.0.insert.mask
  %6 = bitcast i64 %iw_u67.sroa.0.0.insert.insert to double
  store double %6, double* %iptr, align 4, !tbaa !429
  %sub76 = fsub double %x, %6
  br label %return

return:                                           ; preds = %do.body66, %if.then55, %do.body41, %if.then40, %do.body26, %if.then15, %do.body4
  %retval.0 = phi double [ %x, %do.body4 ], [ %2, %if.then15 ], [ %sub35, %do.body26 ], [ %add, %if.then40 ], [ %4, %do.body41 ], [ %5, %if.then55 ], [ %sub76, %do.body66 ]
  ret double %retval.0
}

; Function Attrs: nounwind readnone
define double @nan(i8* nocapture readnone %unused) #3 {
entry:
  ret double 0x7FF8000000000000
}

; Function Attrs: nounwind
define double @nearbyint(double %x) #2 {
entry:
  %call = tail call double @rint(double %x) #8
  ret double %call
}

; Function Attrs: nounwind readnone
define double @nextafter(double %x, double %y) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %1 = bitcast double %y to i64
  %ew_u3.sroa.0.4.extract.shift = lshr i64 %1, 32
  %ew_u3.sroa.0.4.extract.trunc = trunc i64 %ew_u3.sroa.0.4.extract.shift to i32
  %ew_u3.sroa.0.0.extract.trunc = trunc i64 %1 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %and10 = and i32 %ew_u3.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %sub = add nsw i32 %and, -2146435072
  %or = or i32 %sub, %ew_u.sroa.0.0.extract.trunc
  %cmp11 = icmp eq i32 %or, 0
  br i1 %cmp11, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %cmp12 = icmp ugt i32 %and10, 2146435071
  br i1 %cmp12, label %land.lhs.true13, label %if.end

land.lhs.true13:                                  ; preds = %lor.lhs.false
  %sub14 = add nsw i32 %and10, -2146435072
  %or15 = or i32 %sub14, %ew_u3.sroa.0.0.extract.trunc
  %cmp16 = icmp eq i32 %or15, 0
  br i1 %cmp16, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true13, %land.lhs.true
  %add = fadd double %x, %y
  br label %return

if.end:                                           ; preds = %land.lhs.true13, %lor.lhs.false
  %cmp17 = fcmp oeq double %x, %y
  br i1 %cmp17, label %return, label %if.end19

if.end19:                                         ; preds = %if.end
  %or20 = or i32 %and, %ew_u.sroa.0.0.extract.trunc
  %cmp21 = icmp eq i32 %or20, 0
  br i1 %cmp21, label %do.body23, label %if.end33

do.body23:                                        ; preds = %if.end19
  %iw_u.sroa.0.0.insert.mask = and i64 %1, -9223372036854775808
  %iw_u.sroa.0.0.insert.insert = or i64 %iw_u.sroa.0.0.insert.mask, 1
  %2 = bitcast i64 %iw_u.sroa.0.0.insert.insert to double
  %mul = fmul double %2, %2
  %cmp31 = fcmp oeq double %mul, %2
  %mul. = select i1 %cmp31, double %mul, double %2
  br label %return

if.end33:                                         ; preds = %if.end19
  %cmp34 = icmp sgt i32 %ew_u.sroa.0.4.extract.trunc, -1
  br i1 %cmp34, label %if.then35, label %if.else54

if.then35:                                        ; preds = %if.end33
  %cmp36 = icmp sgt i32 %ew_u.sroa.0.4.extract.trunc, %ew_u3.sroa.0.4.extract.trunc
  br i1 %cmp36, label %if.then41, label %lor.lhs.false37

lor.lhs.false37:                                  ; preds = %if.then35
  %cmp38 = icmp eq i32 %ew_u.sroa.0.4.extract.trunc, %ew_u3.sroa.0.4.extract.trunc
  %cmp40 = icmp ugt i32 %ew_u.sroa.0.0.extract.trunc, %ew_u3.sroa.0.0.extract.trunc
  %or.cond = and i1 %cmp38, %cmp40
  br i1 %or.cond, label %if.then41, label %if.else47

if.then41:                                        ; preds = %lor.lhs.false37, %if.then35
  %cmp42 = icmp eq i32 %ew_u.sroa.0.0.extract.trunc, 0
  %sub44 = sext i1 %cmp42 to i32
  %sub46 = add i32 %ew_u.sroa.0.0.extract.trunc, -1
  br label %if.end75

if.else47:                                        ; preds = %lor.lhs.false37
  %add48 = add i32 %ew_u.sroa.0.0.extract.trunc, 1
  %cmp49 = icmp eq i32 %add48, 0
  %add51 = zext i1 %cmp49 to i32
  br label %if.end75

if.else54:                                        ; preds = %if.end33
  %cmp55 = icmp sgt i32 %ew_u3.sroa.0.4.extract.trunc, -1
  %cmp57 = icmp sgt i32 %ew_u.sroa.0.4.extract.trunc, %ew_u3.sroa.0.4.extract.trunc
  %or.cond161 = or i1 %cmp55, %cmp57
  br i1 %or.cond161, label %if.then62, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %if.else54
  %cmp59 = icmp eq i32 %ew_u.sroa.0.4.extract.trunc, %ew_u3.sroa.0.4.extract.trunc
  %cmp61 = icmp ugt i32 %ew_u.sroa.0.0.extract.trunc, %ew_u3.sroa.0.0.extract.trunc
  %or.cond162 = and i1 %cmp59, %cmp61
  br i1 %or.cond162, label %if.then62, label %if.else68

if.then62:                                        ; preds = %lor.lhs.false58, %if.else54
  %cmp63 = icmp eq i32 %ew_u.sroa.0.0.extract.trunc, 0
  %sub65 = sext i1 %cmp63 to i32
  %sub67 = add i32 %ew_u.sroa.0.0.extract.trunc, -1
  br label %if.end75

if.else68:                                        ; preds = %lor.lhs.false58
  %add69 = add i32 %ew_u.sroa.0.0.extract.trunc, 1
  %cmp70 = icmp eq i32 %add69, 0
  %add72 = zext i1 %cmp70 to i32
  br label %if.end75

if.end75:                                         ; preds = %if.else68, %if.then62, %if.else47, %if.then41
  %sub44.pn = phi i32 [ %sub44, %if.then41 ], [ %sub65, %if.then62 ], [ %add51, %if.else47 ], [ %add72, %if.else68 ]
  %lx.0 = phi i32 [ %sub46, %if.then41 ], [ %sub67, %if.then62 ], [ %add48, %if.else47 ], [ %add69, %if.else68 ]
  %hx.2 = add nsw i32 %sub44.pn, %ew_u.sroa.0.4.extract.trunc
  %and76 = and i32 %hx.2, 2146435072
  %cmp77 = icmp eq i32 %and76, 2146435072
  br i1 %cmp77, label %if.then78, label %if.end80

if.then78:                                        ; preds = %if.end75
  %add79 = fadd double %x, %x
  br label %return

if.end80:                                         ; preds = %if.end75
  %iw_u87.sroa.0.4.insert.ext = zext i32 %hx.2 to i64
  %iw_u87.sroa.0.4.insert.shift = shl nuw i64 %iw_u87.sroa.0.4.insert.ext, 32
  %iw_u87.sroa.0.0.insert.ext = zext i32 %lx.0 to i64
  %iw_u87.sroa.0.0.insert.insert = or i64 %iw_u87.sroa.0.4.insert.shift, %iw_u87.sroa.0.0.insert.ext
  %3 = bitcast i64 %iw_u87.sroa.0.0.insert.insert to double
  br label %return

return:                                           ; preds = %if.end80, %if.then78, %do.body23, %if.end, %if.then
  %retval.0 = phi double [ %add, %if.then ], [ %add79, %if.then78 ], [ %x, %if.end ], [ %mul., %do.body23 ], [ %3, %if.end80 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @pow10(double %x) #2 {
entry:
  %call = tail call double @pow(double 1.000000e+01, double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define x86_fp80 @sqrtl(x86_fp80 %x) #2 {
entry:
  %0 = bitcast x86_fp80 %x to i80
  %bf.lshr = lshr i80 %0, 64
  %bf.lshr.tr = trunc i80 %bf.lshr to i32
  %bf.cast = and i32 %bf.lshr.tr, 32767
  %cmp = icmp eq i32 %bf.cast, 32767
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mul = fmul x86_fp80 %x, %x
  %add = fadd x86_fp80 %mul, %x
  br label %return

if.end:                                           ; preds = %entry
  %cmp1 = fcmp oeq x86_fp80 %x, 0xK00000000000000000000
  %cmp2 = fcmp oeq x86_fp80 %x, 0xK80000000000000000000
  %or.cond = or i1 %cmp1, %cmp2
  br i1 %or.cond, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %tobool = icmp slt i80 %0, 0
  br i1 %tobool, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end4
  %sub = fsub x86_fp80 %x, %x
  %div = fdiv x86_fp80 %sub, %sub
  br label %return

if.end12:                                         ; preds = %if.end4
  %cmp18 = icmp eq i32 %bf.cast, 0
  br i1 %cmp18, label %if.then19, label %if.end22

if.then19:                                        ; preds = %if.end12
  %mul21 = fmul x86_fp80 %x, 0xK42018000000000000000
  %1 = bitcast x86_fp80 %mul21 to i80
  br label %if.end22

if.end22:                                         ; preds = %if.then19, %if.end12
  %k.0 = phi i32 [ -514, %if.then19 ], [ 0, %if.end12 ]
  %ux.sroa.0.sroa.0.0 = phi i80 [ %1, %if.then19 ], [ %0, %if.end12 ]
  %bf.lshr25 = lshr i80 %ux.sroa.0.sroa.0.0, 64
  %bf.lshr25.tr = trunc i80 %bf.lshr25 to i32
  %bf.cast27 = and i32 %bf.lshr25.tr, 32767
  %fold = and i32 %bf.lshr25.tr, 1
  %tobool29 = icmp eq i32 %fold, 0
  br i1 %tobool29, label %if.then30, label %if.else42

if.then30:                                        ; preds = %if.end22
  %sub37 = add nsw i32 %bf.cast27, -16384
  %bf.clear41 = and i80 %ux.sroa.0.sroa.0.0, -604444463063240877801473
  %bf.set = or i80 %bf.clear41, 302231454903657293676544
  br label %if.end54

if.else42:                                        ; preds = %if.end22
  %sub28 = add nsw i32 %bf.cast27, -16383
  %bf.clear52 = and i80 %ux.sroa.0.sroa.0.0, -604444463063240877801473
  %bf.set53 = or i80 %bf.clear52, 302213008159583584124928
  br label %if.end54

if.end54:                                         ; preds = %if.else42, %if.then30
  %sub37.pn = phi i32 [ %sub37, %if.then30 ], [ %sub28, %if.else42 ]
  %ux.sroa.0.sroa.0.1 = phi i80 [ %bf.set, %if.then30 ], [ %bf.set53, %if.else42 ]
  %k.1 = add nsw i32 %sub37.pn, %k.0
  %2 = bitcast i80 %ux.sroa.0.sroa.0.1 to x86_fp80
  %conv = fptrunc x86_fp80 %2 to double
  %call = tail call double @sqrt(double %conv) #8
  %conv56 = fpext double %call to x86_fp80
  %bf.clear60 = and i80 %ux.sroa.0.sroa.0.1, -4294967296
  %3 = bitcast i80 %bf.clear60 to x86_fp80
  %sub62 = fsub x86_fp80 %2, %3
  %div63 = fdiv x86_fp80 %sub62, %conv56
  %div65 = fdiv x86_fp80 %3, %conv56
  %add66 = fadd x86_fp80 %conv56, %div65
  %add67 = fadd x86_fp80 %div63, %add66
  %4 = bitcast x86_fp80 %add67 to i80
  %shr244 = lshr i32 %k.1, 1
  %sub69 = add nuw nsw i32 %shr244, 32767
  %bf.lshr72 = lshr i80 %4, 64
  %bf.lshr72.tr = trunc i80 %bf.lshr72 to i32
  %add75 = add nuw nsw i32 %sub69, %bf.lshr72.tr
  %5 = zext i32 %add75 to i80
  %bf.value = shl i80 %5, 64
  %bf.shl = and i80 %bf.value, 604444463063240877801472
  %bf.clear77 = and i80 %4, -604444463063240877801473
  %bf.set78 = or i80 %bf.shl, %bf.clear77
  %6 = bitcast i80 %bf.set78 to x86_fp80
  %div80 = fdiv x86_fp80 %x, %6
  %7 = bitcast x86_fp80 %div80 to i80
  %ux.sroa.0.0.insert.ext.i = zext i80 %7 to i96
  %bf.cast.i = trunc i80 %7 to i32
  %inc.i = add i32 %bf.cast.i, 1
  %8 = zext i32 %inc.i to i96
  %bf.clear2.i = and i96 %ux.sroa.0.0.insert.ext.i, 1208925819614624879738880
  %bf.set.i = or i96 %8, %bf.clear2.i
  %ux.sroa.0.0.extract.trunc.i = trunc i96 %bf.set.i to i80
  %cmp.i = icmp eq i32 %inc.i, 0
  br i1 %cmp.i, label %if.then.i, label %inc.exit

if.then.i:                                        ; preds = %if.end54
  %bf.lshr.i = lshr i80 %7, 32
  %bf.cast6.i = trunc i80 %bf.lshr.i to i32
  %inc7.i = add i32 %bf.cast6.i, 1
  %9 = zext i32 %inc7.i to i96
  %bf.shl.i = shl nuw nsw i96 %9, 32
  %bf.clear2.masked.i = and i96 %ux.sroa.0.0.insert.ext.i, 1208907372870555465154560
  %bf.clear10.i = or i96 %8, %bf.clear2.masked.i
  %bf.set11.i = or i96 %bf.shl.i, %bf.clear10.i
  %ux.sroa.0.0.extract.trunc52.i = trunc i96 %bf.set11.i to i80
  %cmp13.i = icmp eq i32 %inc7.i, 0
  br i1 %cmp13.i, label %if.then14.i, label %inc.exit

if.then14.i:                                      ; preds = %if.then.i
  %bf.lshr17.i = lshr i80 %7, 64
  %bf.lshr17.tr.i = trunc i80 %bf.lshr17.i to i32
  %inc20.i = add nuw nsw i32 %bf.lshr17.tr.i, 1
  %10 = zext i32 %inc20.i to i96
  %bf.value22.i = shl nuw nsw i96 %10, 64
  %bf.clear10.masked.i = and i96 %bf.clear10.i, 604462909807318882320383
  %bf.shl23.masked.i = and i96 %bf.value22.i, 604444463063240877801472
  %ux.sroa.0.0.insert.insert65.i = or i96 %bf.shl.i, %bf.clear10.masked.i
  %bf.set36.i = or i96 %ux.sroa.0.0.insert.insert65.i, %bf.shl23.masked.i
  %ux.sroa.0.0.extract.trunc70.i = trunc i96 %bf.set36.i to i80
  br label %inc.exit

inc.exit:                                         ; preds = %if.then14.i, %if.then.i, %if.end54
  %ux.sroa.0.sroa.0.0.i = phi i80 [ %ux.sroa.0.0.extract.trunc70.i, %if.then14.i ], [ %ux.sroa.0.0.extract.trunc52.i, %if.then.i ], [ %ux.sroa.0.0.extract.trunc.i, %if.end54 ]
  %11 = bitcast i80 %ux.sroa.0.sroa.0.0.i to x86_fp80
  %add83 = fadd x86_fp80 %6, %11
  %12 = bitcast x86_fp80 %add83 to i80
  %bf.lshr87 = lshr i80 %12, 64
  %bf.lshr87.tr = trunc i80 %bf.lshr87 to i32
  %dec = add nuw nsw i32 %bf.lshr87.tr, 32767
  %13 = zext i32 %dec to i80
  %bf.value91 = shl i80 %13, 64
  %bf.shl92 = and i80 %bf.value91, 604444463063240877801472
  %bf.clear93 = and i80 %12, -604444463063240877801473
  %bf.set94 = or i80 %bf.shl92, %bf.clear93
  %14 = bitcast i80 %bf.set94 to x86_fp80
  br label %return

return:                                           ; preds = %inc.exit, %if.then10, %if.end, %if.then
  %retval.0 = phi x86_fp80 [ %add, %if.then ], [ %div, %if.then10 ], [ %14, %inc.exit ], [ %x, %if.end ]
  ret x86_fp80 %retval.0
}

; Function Attrs: nounwind
define double @remquo(double %x, double %y, i32* nocapture %quo) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %1 = bitcast double %y to i64
  %ew_u3.sroa.0.4.extract.shift = lshr i64 %1, 32
  %ew_u3.sroa.0.4.extract.trunc = trunc i64 %ew_u3.sroa.0.4.extract.shift to i32
  %ew_u3.sroa.0.0.extract.trunc = trunc i64 %1 to i32
  %xor389 = xor i64 %ew_u3.sroa.0.4.extract.shift, %ew_u.sroa.0.4.extract.shift
  %xor = trunc i64 %xor389 to i32
  %and = and i32 %xor, -2147483648
  %and10 = and i32 %ew_u.sroa.0.4.extract.trunc, -2147483648
  %xor11 = xor i32 %and10, %ew_u.sroa.0.4.extract.trunc
  %and12 = and i32 %ew_u3.sroa.0.4.extract.trunc, 2147483647
  %or = or i32 %and12, %ew_u3.sroa.0.0.extract.trunc
  %cmp = icmp eq i32 %or, 0
  %cmp13 = icmp sgt i32 %xor11, 2146435071
  %or.cond = or i1 %cmp, %cmp13
  br i1 %or.cond, label %if.then, label %lor.lhs.false14

lor.lhs.false14:                                  ; preds = %entry
  %sub = sub i32 0, %ew_u3.sroa.0.0.extract.trunc
  %or15 = or i32 %ew_u3.sroa.0.0.extract.trunc, %sub
  %shr = lshr i32 %or15, 31
  %or16 = or i32 %and12, %shr
  %cmp17 = icmp ugt i32 %or16, 2146435072
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false14, %entry
  store i32 0, i32* %quo, align 4, !tbaa !433
  %mul = fmul double %x, %y
  %div = fdiv double %mul, %mul
  br label %return

if.end:                                           ; preds = %lor.lhs.false14
  %cmp19 = icmp sgt i32 %xor11, %and12
  br i1 %cmp19, label %if.end30, label %if.then20

if.then20:                                        ; preds = %if.end
  %cmp21 = icmp slt i32 %xor11, %and12
  %cmp23 = icmp ult i32 %ew_u.sroa.0.0.extract.trunc, %ew_u3.sroa.0.0.extract.trunc
  %or.cond401 = or i1 %cmp21, %cmp23
  br i1 %or.cond401, label %fixup, label %if.end25

if.end25:                                         ; preds = %if.then20
  %cmp26 = icmp eq i32 %ew_u.sroa.0.0.extract.trunc, %ew_u3.sroa.0.0.extract.trunc
  br i1 %cmp26, label %if.then27, label %if.end30

if.then27:                                        ; preds = %if.end25
  %2 = lshr exact i32 %and, 30
  %3 = xor i32 %2, 2
  %4 = add nsw i32 %3, -1
  store i32 %4, i32* %quo, align 4, !tbaa !433
  %shr28399 = lshr i64 %0, 63
  %shr28 = trunc i64 %shr28399 to i32
  %arrayidx = getelementptr inbounds [2 x double]* @Zero145, i32 0, i32 %shr28
  %5 = load double* %arrayidx, align 8, !tbaa !429
  br label %return

if.end30:                                         ; preds = %if.end25, %if.end
  %cmp31 = icmp slt i32 %xor11, 1048576
  br i1 %cmp31, label %if.then32, label %if.else46

if.then32:                                        ; preds = %if.end30
  %cmp33 = icmp eq i32 %ew_u.sroa.0.4.extract.trunc, %and10
  br i1 %cmp33, label %for.cond.preheader, label %if.else

for.cond.preheader:                               ; preds = %if.then32
  %cmp35437 = icmp sgt i32 %ew_u.sroa.0.0.extract.trunc, 0
  br i1 %cmp35437, label %for.body.preheader, label %if.end49

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.0439 = phi i32 [ %shl, %for.body ], [ %ew_u.sroa.0.0.extract.trunc, %for.body.preheader ]
  %ix.0438 = phi i32 [ %sub36, %for.body ], [ -1043, %for.body.preheader ]
  %sub36 = add nsw i32 %ix.0438, -1
  %shl = shl i32 %i.0439, 1
  %cmp35 = icmp sgt i32 %shl, 0
  br i1 %cmp35, label %for.body, label %if.end49.loopexit

if.else:                                          ; preds = %if.then32
  %shl37397 = shl nuw nsw i64 %ew_u.sroa.0.4.extract.shift, 11
  %shl37 = trunc i64 %shl37397 to i32
  %cmp39441 = icmp sgt i32 %shl37, 0
  br i1 %cmp39441, label %for.body40.preheader, label %if.end49

for.body40.preheader:                             ; preds = %if.else
  br label %for.body40

for.body40:                                       ; preds = %for.body40, %for.body40.preheader
  %i.1443 = phi i32 [ %shl43, %for.body40 ], [ %shl37, %for.body40.preheader ]
  %ix.1442 = phi i32 [ %sub41, %for.body40 ], [ -1022, %for.body40.preheader ]
  %sub41 = add nsw i32 %ix.1442, -1
  %shl43 = shl i32 %i.1443, 1
  %cmp39 = icmp sgt i32 %shl43, 0
  br i1 %cmp39, label %for.body40, label %if.end49.loopexit452

if.else46:                                        ; preds = %if.end30
  %shr47 = ashr i32 %xor11, 20
  %sub48 = add nsw i32 %shr47, -1023
  br label %if.end49

if.end49.loopexit:                                ; preds = %for.body
  %sub36.lcssa = phi i32 [ %sub36, %for.body ]
  br label %if.end49

if.end49.loopexit452:                             ; preds = %for.body40
  %sub41.lcssa = phi i32 [ %sub41, %for.body40 ]
  br label %if.end49

if.end49:                                         ; preds = %if.end49.loopexit452, %if.end49.loopexit, %if.else46, %if.else, %for.cond.preheader
  %ix.2 = phi i32 [ %sub48, %if.else46 ], [ -1043, %for.cond.preheader ], [ -1022, %if.else ], [ %sub36.lcssa, %if.end49.loopexit ], [ %sub41.lcssa, %if.end49.loopexit452 ]
  %cmp50 = icmp ult i32 %and12, 1048576
  br i1 %cmp50, label %if.then51, label %if.else71

if.then51:                                        ; preds = %if.end49
  %cmp52 = icmp eq i32 %and12, 0
  br i1 %cmp52, label %for.cond54.preheader, label %if.else61

for.cond54.preheader:                             ; preds = %if.then51
  %cmp55429 = icmp sgt i32 %ew_u3.sroa.0.0.extract.trunc, 0
  br i1 %cmp55429, label %for.body56.preheader, label %if.end74

for.body56.preheader:                             ; preds = %for.cond54.preheader
  br label %for.body56

for.body56:                                       ; preds = %for.body56, %for.body56.preheader
  %i.2431 = phi i32 [ %shl59, %for.body56 ], [ %ew_u3.sroa.0.0.extract.trunc, %for.body56.preheader ]
  %iy.0430 = phi i32 [ %sub57, %for.body56 ], [ -1043, %for.body56.preheader ]
  %sub57 = add nsw i32 %iy.0430, -1
  %shl59 = shl i32 %i.2431, 1
  %cmp55 = icmp sgt i32 %shl59, 0
  br i1 %cmp55, label %for.body56, label %if.end74.loopexit

if.else61:                                        ; preds = %if.then51
  %shl62395 = shl nuw nsw i64 %ew_u3.sroa.0.4.extract.shift, 11
  %shl62 = trunc i64 %shl62395 to i32
  %cmp64433 = icmp sgt i32 %shl62, 0
  br i1 %cmp64433, label %for.body65.preheader, label %if.end74

for.body65.preheader:                             ; preds = %if.else61
  br label %for.body65

for.body65:                                       ; preds = %for.body65, %for.body65.preheader
  %i.3435 = phi i32 [ %shl68, %for.body65 ], [ %shl62, %for.body65.preheader ]
  %iy.1434 = phi i32 [ %sub66, %for.body65 ], [ -1022, %for.body65.preheader ]
  %sub66 = add nsw i32 %iy.1434, -1
  %shl68 = shl i32 %i.3435, 1
  %cmp64 = icmp sgt i32 %shl68, 0
  br i1 %cmp64, label %for.body65, label %if.end74.loopexit451

if.else71:                                        ; preds = %if.end49
  %shr72390 = lshr i32 %and12, 20
  %sub73 = add nsw i32 %shr72390, -1023
  br label %if.end74

if.end74.loopexit:                                ; preds = %for.body56
  %sub57.lcssa = phi i32 [ %sub57, %for.body56 ]
  br label %if.end74

if.end74.loopexit451:                             ; preds = %for.body65
  %sub66.lcssa = phi i32 [ %sub66, %for.body65 ]
  br label %if.end74

if.end74:                                         ; preds = %if.end74.loopexit451, %if.end74.loopexit, %if.else71, %if.else61, %for.cond54.preheader
  %iy.2 = phi i32 [ %sub73, %if.else71 ], [ -1043, %for.cond54.preheader ], [ -1022, %if.else61 ], [ %sub57.lcssa, %if.end74.loopexit ], [ %sub66.lcssa, %if.end74.loopexit451 ]
  %cmp75 = icmp sgt i32 %ix.2, -1023
  br i1 %cmp75, label %if.then76, label %if.else79

if.then76:                                        ; preds = %if.end74
  %and77 = and i32 %ew_u.sroa.0.4.extract.trunc, 1048575
  %or78 = or i32 %and77, 1048576
  br label %if.end92

if.else79:                                        ; preds = %if.end74
  %sub80 = sub nsw i32 -1022, %ix.2
  %cmp81 = icmp slt i32 %sub80, 32
  br i1 %cmp81, label %if.then82, label %if.else88

if.then82:                                        ; preds = %if.else79
  %shl83 = shl i32 %xor11, %sub80
  %sub84 = sub nsw i32 32, %sub80
  %shr85 = lshr i32 %ew_u.sroa.0.0.extract.trunc, %sub84
  %or86 = or i32 %shr85, %shl83
  %shl87 = shl i32 %ew_u.sroa.0.0.extract.trunc, %sub80
  br label %if.end92

if.else88:                                        ; preds = %if.else79
  %sub89 = add nsw i32 %sub80, -32
  %shl90 = shl i32 %ew_u.sroa.0.0.extract.trunc, %sub89
  br label %if.end92

if.end92:                                         ; preds = %if.else88, %if.then82, %if.then76
  %lx.0 = phi i32 [ %ew_u.sroa.0.0.extract.trunc, %if.then76 ], [ %shl87, %if.then82 ], [ 0, %if.else88 ]
  %hx.0 = phi i32 [ %or78, %if.then76 ], [ %or86, %if.then82 ], [ %shl90, %if.else88 ]
  %cmp93 = icmp sgt i32 %iy.2, -1023
  br i1 %cmp93, label %if.then94, label %if.else97

if.then94:                                        ; preds = %if.end92
  %and95 = and i32 %ew_u3.sroa.0.4.extract.trunc, 1048575
  %or96 = or i32 %and95, 1048576
  br label %if.end110

if.else97:                                        ; preds = %if.end92
  %sub98 = sub nsw i32 -1022, %iy.2
  %cmp99 = icmp slt i32 %sub98, 32
  br i1 %cmp99, label %if.then100, label %if.else106

if.then100:                                       ; preds = %if.else97
  %shl101 = shl i32 %and12, %sub98
  %sub102 = sub nsw i32 32, %sub98
  %shr103 = lshr i32 %ew_u3.sroa.0.0.extract.trunc, %sub102
  %or104 = or i32 %shr103, %shl101
  %shl105 = shl i32 %ew_u3.sroa.0.0.extract.trunc, %sub98
  br label %if.end110

if.else106:                                       ; preds = %if.else97
  %sub107 = add nsw i32 %sub98, -32
  %shl108 = shl i32 %ew_u3.sroa.0.0.extract.trunc, %sub107
  br label %if.end110

if.end110:                                        ; preds = %if.else106, %if.then100, %if.then94
  %ly.0 = phi i32 [ %ew_u3.sroa.0.0.extract.trunc, %if.then94 ], [ %shl105, %if.then100 ], [ 0, %if.else106 ]
  %hy.0 = phi i32 [ %or96, %if.then94 ], [ %or104, %if.then100 ], [ %shl108, %if.else106 ]
  %tobool112413 = icmp eq i32 %ix.2, %iy.2
  %sub113414 = sub nsw i32 %hx.0, %hy.0
  %sub114415 = sub i32 %lx.0, %ly.0
  %cmp115416 = icmp ult i32 %lx.0, %ly.0
  %sub135417 = sext i1 %cmp115416 to i32
  %sub135.sub113418 = add nsw i32 %sub113414, %sub135417
  br i1 %tobool112413, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %if.end110
  %sub111 = sub nsw i32 %ix.2, %iy.2
  br label %while.body

while.body:                                       ; preds = %if.end129, %while.body.lr.ph
  %sub135.sub113423 = phi i32 [ %sub135.sub113418, %while.body.lr.ph ], [ %sub135.sub113, %if.end129 ]
  %sub114422 = phi i32 [ %sub114415, %while.body.lr.ph ], [ %sub114, %if.end129 ]
  %dec421.in = phi i32 [ %sub111, %while.body.lr.ph ], [ %dec421, %if.end129 ]
  %hx.1420 = phi i32 [ %hx.0, %while.body.lr.ph ], [ %hx.2, %if.end129 ]
  %6 = phi i32 [ 0, %while.body.lr.ph ], [ %shl130, %if.end129 ]
  %lx.1419 = phi i32 [ %lx.0, %while.body.lr.ph ], [ %lx.2, %if.end129 ]
  %dec421 = add nsw i32 %dec421.in, -1
  %cmp119 = icmp slt i32 %sub135.sub113423, 0
  br i1 %cmp119, label %if.then120, label %if.else124

if.then120:                                       ; preds = %while.body
  %add = shl nsw i32 %hx.1420, 1
  %shr121 = lshr i32 %lx.1419, 31
  %add122 = or i32 %add, %shr121
  br label %if.end129

if.else124:                                       ; preds = %while.body
  %add125 = shl nsw i32 %sub135.sub113423, 1
  %shr126 = lshr i32 %sub114422, 31
  %add127 = or i32 %add125, %shr126
  %inc394 = or i32 %6, 1
  br label %if.end129

if.end129:                                        ; preds = %if.else124, %if.then120
  %lx.2.in = phi i32 [ %lx.1419, %if.then120 ], [ %sub114422, %if.else124 ]
  %q.1 = phi i32 [ %6, %if.then120 ], [ %inc394, %if.else124 ]
  %hx.2 = phi i32 [ %add122, %if.then120 ], [ %add127, %if.else124 ]
  %lx.2 = shl i32 %lx.2.in, 1
  %shl130 = shl i32 %q.1, 1
  %tobool112 = icmp eq i32 %dec421, 0
  %sub113 = sub nsw i32 %hx.2, %hy.0
  %sub114 = sub i32 %lx.2, %ly.0
  %cmp115 = icmp ult i32 %lx.2, %ly.0
  %sub135 = sext i1 %cmp115 to i32
  %sub135.sub113 = add nsw i32 %sub113, %sub135
  br i1 %tobool112, label %while.end.loopexit, label %while.body

while.end.loopexit:                               ; preds = %if.end129
  %sub135.sub113.lcssa454 = phi i32 [ %sub135.sub113, %if.end129 ]
  %sub114.lcssa453 = phi i32 [ %sub114, %if.end129 ]
  %shl130.lcssa = phi i32 [ %shl130, %if.end129 ]
  %lx.2.lcssa = phi i32 [ %lx.2, %if.end129 ]
  %hx.2.lcssa = phi i32 [ %hx.2, %if.end129 ]
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %if.end110
  %sub135.sub113.lcssa = phi i32 [ %sub135.sub113418, %if.end110 ], [ %sub135.sub113.lcssa454, %while.end.loopexit ]
  %sub114.lcssa = phi i32 [ %sub114415, %if.end110 ], [ %sub114.lcssa453, %while.end.loopexit ]
  %hx.1.lcssa = phi i32 [ %hx.0, %if.end110 ], [ %hx.2.lcssa, %while.end.loopexit ]
  %.lcssa = phi i32 [ 0, %if.end110 ], [ %shl130.lcssa, %while.end.loopexit ]
  %lx.1.lcssa = phi i32 [ %lx.0, %if.end110 ], [ %lx.2.lcssa, %while.end.loopexit ]
  %cmp137 = icmp sgt i32 %sub135.sub113.lcssa, -1
  %lx.3 = select i1 %cmp137, i32 %sub114.lcssa, i32 %lx.1.lcssa
  %sub135.sub113.lobit = lshr i32 %sub135.sub113.lcssa, 31
  %q.0 = or i32 %sub135.sub113.lobit, %.lcssa
  %q.2 = xor i32 %q.0, 1
  %hx.3 = select i1 %cmp137, i32 %sub135.sub113.lcssa, i32 %hx.1.lcssa
  %or141 = or i32 %hx.3, %lx.3
  %cmp142 = icmp eq i32 %or141, 0
  br i1 %cmp142, label %if.then143, label %while.cond151.preheader

while.cond151.preheader:                          ; preds = %while.end
  %cmp152406 = icmp slt i32 %hx.3, 1048576
  br i1 %cmp152406, label %while.body153.preheader, label %while.end159

while.body153.preheader:                          ; preds = %while.cond151.preheader
  br label %while.body153

if.then143:                                       ; preds = %while.end
  %and144 = and i32 %q.2, 2147483647
  %tobool145 = icmp ne i32 %and, 0
  %sub146 = sub i32 0, %and144
  %cond147 = select i1 %tobool145, i32 %sub146, i32 %and144
  store i32 %cond147, i32* %quo, align 4, !tbaa !433
  %shr148391 = lshr i64 %0, 63
  %shr148 = trunc i64 %shr148391 to i32
  %arrayidx149 = getelementptr inbounds [2 x double]* @Zero145, i32 0, i32 %shr148
  %7 = load double* %arrayidx149, align 8, !tbaa !429
  br label %return

while.body153:                                    ; preds = %while.body153, %while.body153.preheader
  %hx.4409 = phi i32 [ %add156, %while.body153 ], [ %hx.3, %while.body153.preheader ]
  %lx.4408 = phi i32 [ %add157, %while.body153 ], [ %lx.3, %while.body153.preheader ]
  %iy.3407 = phi i32 [ %sub158, %while.body153 ], [ %iy.2, %while.body153.preheader ]
  %add154 = shl nsw i32 %hx.4409, 1
  %shr155 = lshr i32 %lx.4408, 31
  %add156 = or i32 %add154, %shr155
  %add157 = shl i32 %lx.4408, 1
  %sub158 = add nsw i32 %iy.3407, -1
  %cmp152 = icmp slt i32 %add156, 1048576
  br i1 %cmp152, label %while.body153, label %while.end159.loopexit

while.end159.loopexit:                            ; preds = %while.body153
  %sub158.lcssa = phi i32 [ %sub158, %while.body153 ]
  %add157.lcssa = phi i32 [ %add157, %while.body153 ]
  %add156.lcssa = phi i32 [ %add156, %while.body153 ]
  br label %while.end159

while.end159:                                     ; preds = %while.end159.loopexit, %while.cond151.preheader
  %hx.4.lcssa = phi i32 [ %hx.3, %while.cond151.preheader ], [ %add156.lcssa, %while.end159.loopexit ]
  %lx.4.lcssa = phi i32 [ %lx.3, %while.cond151.preheader ], [ %add157.lcssa, %while.end159.loopexit ]
  %iy.3.lcssa = phi i32 [ %iy.2, %while.cond151.preheader ], [ %sub158.lcssa, %while.end159.loopexit ]
  %cmp160 = icmp sgt i32 %iy.3.lcssa, -1023
  br i1 %cmp160, label %if.then161, label %if.else166

if.then161:                                       ; preds = %while.end159
  %sub162 = add nsw i32 %hx.4.lcssa, -1048576
  %add163 = shl i32 %iy.3.lcssa, 20
  %shl164 = add i32 %add163, 1072693248
  %or165 = or i32 %sub162, %shl164
  br label %fixup

if.else166:                                       ; preds = %while.end159
  %sub167 = sub nsw i32 -1022, %iy.3.lcssa
  %cmp168 = icmp slt i32 %sub167, 21
  br i1 %cmp168, label %if.then169, label %if.else175

if.then169:                                       ; preds = %if.else166
  %shr170 = lshr i32 %lx.4.lcssa, %sub167
  %sub171 = sub nsw i32 32, %sub167
  %shl172 = shl i32 %hx.4.lcssa, %sub171
  %or173 = or i32 %shl172, %shr170
  %shr174 = ashr i32 %hx.4.lcssa, %sub167
  br label %fixup

if.else175:                                       ; preds = %if.else166
  %cmp176 = icmp slt i32 %sub167, 32
  br i1 %cmp176, label %if.then177, label %if.else182

if.then177:                                       ; preds = %if.else175
  %sub178 = sub nsw i32 32, %sub167
  %shl179 = shl i32 %hx.4.lcssa, %sub178
  %shr180 = lshr i32 %lx.4.lcssa, %sub167
  %or181 = or i32 %shl179, %shr180
  br label %fixup

if.else182:                                       ; preds = %if.else175
  %sub183 = add nsw i32 %sub167, -32
  %shr184 = ashr i32 %hx.4.lcssa, %sub183
  br label %fixup

fixup:                                            ; preds = %if.else182, %if.then177, %if.then169, %if.then161, %if.then20
  %lx.5 = phi i32 [ %lx.4.lcssa, %if.then161 ], [ %or173, %if.then169 ], [ %or181, %if.then177 ], [ %shr184, %if.else182 ], [ %ew_u.sroa.0.0.extract.trunc, %if.then20 ]
  %q.3 = phi i32 [ %q.2, %if.then161 ], [ %q.2, %if.then169 ], [ %q.2, %if.then177 ], [ %q.2, %if.else182 ], [ 0, %if.then20 ]
  %hx.5 = phi i32 [ %or165, %if.then161 ], [ %shr174, %if.then169 ], [ %and10, %if.then177 ], [ %and10, %if.else182 ], [ %xor11, %if.then20 ]
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str146, i32 0, i32 0)) #4
  %iw_u.sroa.0.4.insert.ext = zext i32 %hx.5 to i64
  %iw_u.sroa.0.4.insert.shift = shl nuw i64 %iw_u.sroa.0.4.insert.ext, 32
  %iw_u.sroa.0.0.insert.ext = zext i32 %lx.5 to i64
  %iw_u.sroa.0.0.insert.insert = or i64 %iw_u.sroa.0.4.insert.shift, %iw_u.sroa.0.0.insert.ext
  %8 = bitcast i64 %iw_u.sroa.0.0.insert.insert to double
  %call = tail call double @fabs(double %y) #8
  %cmp195 = fcmp olt double %call, 0x20000000000000
  br i1 %cmp195, label %if.then196, label %if.else208

if.then196:                                       ; preds = %fixup
  %add197 = fadd double %8, %8
  %cmp198 = fcmp ogt double %add197, %call
  br i1 %cmp198, label %if.then204, label %lor.lhs.false199

lor.lhs.false199:                                 ; preds = %if.then196
  %cmp201 = fcmp une double %add197, %call
  %and202 = and i32 %q.3, 1
  %tobool203 = icmp eq i32 %and202, 0
  %or.cond402 = or i1 %cmp201, %tobool203
  br i1 %or.cond402, label %do.body222, label %if.then204

if.then204:                                       ; preds = %lor.lhs.false199, %if.then196
  %inc205 = add i32 %q.3, 1
  %sub206 = fsub double %8, %call
  br label %do.body222

if.else208:                                       ; preds = %fixup
  %mul209 = fmul double %call, 5.000000e-01
  %cmp210 = fcmp ogt double %8, %mul209
  br i1 %cmp210, label %if.then217, label %lor.lhs.false211

lor.lhs.false211:                                 ; preds = %if.else208
  %cmp213 = fcmp une double %8, %mul209
  %and215 = and i32 %q.3, 1
  %tobool216 = icmp eq i32 %and215, 0
  %or.cond403 = or i1 %cmp213, %tobool216
  br i1 %or.cond403, label %do.body222, label %if.then217

if.then217:                                       ; preds = %lor.lhs.false211, %if.else208
  %inc218 = add i32 %q.3, 1
  %sub219 = fsub double %8, %call
  br label %do.body222

do.body222:                                       ; preds = %if.then217, %lor.lhs.false211, %if.then204, %lor.lhs.false199
  %q.4 = phi i32 [ %inc205, %if.then204 ], [ %q.3, %lor.lhs.false199 ], [ %inc218, %if.then217 ], [ %q.3, %lor.lhs.false211 ]
  %x.addr.0 = phi double [ %sub206, %if.then204 ], [ %8, %lor.lhs.false199 ], [ %sub219, %if.then217 ], [ %8, %lor.lhs.false211 ]
  %9 = bitcast double %x.addr.0 to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %9, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %xor229 = xor i32 %gh_u.sroa.0.4.extract.trunc, %and10
  %sh_u.sroa.0.4.insert.ext = zext i32 %xor229 to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %9, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %10 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  %and234 = and i32 %q.4, 2147483647
  %tobool235 = icmp ne i32 %and, 0
  %sub237 = sub i32 0, %and234
  %cond240 = select i1 %tobool235, i32 %sub237, i32 %and234
  store i32 %cond240, i32* %quo, align 4, !tbaa !433
  br label %return

return:                                           ; preds = %do.body222, %if.then143, %if.then27, %if.then
  %retval.0 = phi double [ %div, %if.then ], [ %10, %do.body222 ], [ %5, %if.then27 ], [ %7, %if.then143 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @rint(double %x) #2 {
entry:
  %w = alloca double, align 8
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %shr144145 = lshr i64 %0, 63
  %shr144 = trunc i64 %shr144145 to i32
  %shr2147148 = lshr i64 %0, 52
  %shr2147 = trunc i64 %shr2147148 to i32
  %and3 = and i32 %shr2147, 2047
  %sub = add nsw i32 %and3, -1023
  %cmp = icmp slt i32 %sub, 20
  br i1 %cmp, label %if.then, label %if.else59

if.then:                                          ; preds = %entry
  %cmp4 = icmp slt i32 %sub, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %and6 = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %or = or i32 %and6, %ew_u.sroa.0.0.extract.trunc
  %cmp7 = icmp eq i32 %or, 0
  br i1 %cmp7, label %return, label %if.end

if.end:                                           ; preds = %if.then5
  %and9 = and i32 %ew_u.sroa.0.4.extract.trunc, 1048575
  %or10 = or i32 %and9, %ew_u.sroa.0.0.extract.trunc
  %and11 = and i32 %ew_u.sroa.0.4.extract.trunc, -131072
  %sub12 = sub i32 0, %or10
  %or13 = or i32 %ew_u.sroa.0.0.extract.trunc, %sub12
  %shr14 = lshr i32 %or13, 12
  %and15 = and i32 %shr14, 524288
  %or16 = or i32 %and15, %and11
  %sh_u.sroa.0.4.insert.ext = zext i32 %or16 to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %0, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %1 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  %arrayidx = getelementptr inbounds [2 x double]* @TWO52147, i32 0, i32 %shr144
  %2 = load double* %arrayidx, align 8, !tbaa !429
  %add = fadd double %1, %2
  store volatile double %add, double* %w, align 8, !tbaa !429
  %w.0.w.0. = load volatile double* %w, align 8
  %3 = load double* %arrayidx, align 8, !tbaa !429
  %sub24 = fsub double %w.0.w.0., %3
  %4 = bitcast double %sub24 to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %4, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and33 = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %shl150 = shl nuw nsw i64 %shr144145, 31
  %shl = trunc i64 %shl150 to i32
  %or34 = or i32 %and33, %shl
  %sh_u31.sroa.0.4.insert.ext = zext i32 %or34 to i64
  %sh_u31.sroa.0.4.insert.shift = shl nuw i64 %sh_u31.sroa.0.4.insert.ext, 32
  %sh_u31.sroa.0.4.insert.mask = and i64 %4, 4294967295
  %sh_u31.sroa.0.4.insert.insert = or i64 %sh_u31.sroa.0.4.insert.shift, %sh_u31.sroa.0.4.insert.mask
  %5 = bitcast i64 %sh_u31.sroa.0.4.insert.insert to double
  br label %return

if.else:                                          ; preds = %if.then
  %shr39 = lshr i32 1048575, %sub
  %and40 = and i32 %shr39, %ew_u.sroa.0.4.extract.trunc
  %or41 = or i32 %and40, %ew_u.sroa.0.0.extract.trunc
  %cmp42 = icmp eq i32 %or41, 0
  br i1 %cmp42, label %return, label %if.end44

if.end44:                                         ; preds = %if.else
  %shr45 = lshr i32 %shr39, 1
  %and46 = and i32 %shr45, %ew_u.sroa.0.4.extract.trunc
  %or47 = or i32 %and46, %ew_u.sroa.0.0.extract.trunc
  %cmp48 = icmp eq i32 %or47, 0
  br i1 %cmp48, label %do.body85, label %if.then49

if.then49:                                        ; preds = %if.end44
  %cmp50 = icmp eq i32 %sub, 19
  %. = select i1 %cmp50, i32 -2147483648, i32 0
  %neg = xor i32 %shr45, -1
  %and54 = and i32 %ew_u.sroa.0.4.extract.trunc, %neg
  %shr55 = lshr i32 262144, %sub
  %or56 = or i32 %and54, %shr55
  br label %do.body85

if.else59:                                        ; preds = %entry
  %cmp60 = icmp sgt i32 %sub, 51
  br i1 %cmp60, label %if.then61, label %if.else66

if.then61:                                        ; preds = %if.else59
  %cmp62 = icmp eq i32 %sub, 1024
  br i1 %cmp62, label %if.then63, label %return

if.then63:                                        ; preds = %if.then61
  %add64 = fadd double %x, %x
  br label %return

if.else66:                                        ; preds = %if.else59
  %sub67 = add nsw i32 %and3, -1043
  %shr68 = lshr i32 -1, %sub67
  %and69 = and i32 %shr68, %ew_u.sroa.0.0.extract.trunc
  %cmp70 = icmp eq i32 %and69, 0
  br i1 %cmp70, label %return, label %if.end72

if.end72:                                         ; preds = %if.else66
  %shr73 = lshr i32 %shr68, 1
  %and74 = and i32 %shr73, %ew_u.sroa.0.0.extract.trunc
  %cmp75 = icmp eq i32 %and74, 0
  br i1 %cmp75, label %do.body85, label %if.then76

if.then76:                                        ; preds = %if.end72
  %neg77 = xor i32 %shr73, -1
  %and78 = and i32 %ew_u.sroa.0.0.extract.trunc, %neg77
  %shr80 = lshr i32 1073741824, %sub67
  %or81 = or i32 %and78, %shr80
  br label %do.body85

do.body85:                                        ; preds = %if.then76, %if.end72, %if.then49, %if.end44
  %i1.1 = phi i32 [ %., %if.then49 ], [ %ew_u.sroa.0.0.extract.trunc, %if.end44 ], [ %or81, %if.then76 ], [ %ew_u.sroa.0.0.extract.trunc, %if.end72 ]
  %i0.0 = phi i32 [ %or56, %if.then49 ], [ %ew_u.sroa.0.4.extract.trunc, %if.end44 ], [ %ew_u.sroa.0.4.extract.trunc, %if.then76 ], [ %ew_u.sroa.0.4.extract.trunc, %if.end72 ]
  %iw_u.sroa.0.4.insert.ext = zext i32 %i0.0 to i64
  %iw_u.sroa.0.4.insert.shift = shl nuw i64 %iw_u.sroa.0.4.insert.ext, 32
  %iw_u.sroa.0.0.insert.ext = zext i32 %i1.1 to i64
  %iw_u.sroa.0.0.insert.insert = or i64 %iw_u.sroa.0.4.insert.shift, %iw_u.sroa.0.0.insert.ext
  %6 = bitcast i64 %iw_u.sroa.0.0.insert.insert to double
  %arrayidx92 = getelementptr inbounds [2 x double]* @TWO52147, i32 0, i32 %shr144
  %7 = load double* %arrayidx92, align 8, !tbaa !429
  %add93 = fadd double %7, %6
  store volatile double %add93, double* %w, align 8, !tbaa !429
  %w.0.w.0.96 = load volatile double* %w, align 8
  %8 = load double* %arrayidx92, align 8, !tbaa !429
  %sub95 = fsub double %w.0.w.0.96, %8
  br label %return

return:                                           ; preds = %do.body85, %if.else66, %if.then63, %if.then61, %if.else, %if.end, %if.then5
  %retval.0 = phi double [ %5, %if.end ], [ %sub95, %do.body85 ], [ %add64, %if.then63 ], [ %x, %if.then5 ], [ %x, %if.else ], [ %x, %if.then61 ], [ %x, %if.else66 ]
  ret double %retval.0
}

; Function Attrs: nounwind readnone
define double @round(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and78 = lshr i64 %0, 52
  %and = trunc i64 %and78 to i32
  %shr77 = and i32 %and, 2047
  %sub = add nsw i32 %shr77, -1023
  %cmp = icmp slt i32 %sub, 20
  br i1 %cmp, label %if.then, label %if.else18

if.then:                                          ; preds = %entry
  %cmp4 = icmp slt i32 %sub, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %and6 = and i32 %ew_u.sroa.0.4.extract.trunc, -2147483648
  %cmp7 = icmp eq i32 %sub, -1
  %or = or i32 %and6, 1072693248
  %or.and6 = select i1 %cmp7, i32 %or, i32 %and6
  br label %do.body43

if.else:                                          ; preds = %if.then
  %shr9 = lshr i32 1048575, %sub
  %and10 = and i32 %shr9, %ew_u.sroa.0.4.extract.trunc
  %1 = or i32 %and10, %ew_u.sroa.0.0.extract.trunc
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %return, label %if.end14

if.end14:                                         ; preds = %if.else
  %shr15 = lshr i32 524288, %sub
  %add = add nsw i32 %shr15, %ew_u.sroa.0.4.extract.trunc
  %neg = xor i32 %shr9, -1
  %and16 = and i32 %add, %neg
  br label %do.body43

if.else18:                                        ; preds = %entry
  %cmp19 = icmp sgt i32 %sub, 51
  br i1 %cmp19, label %if.then20, label %if.else25

if.then20:                                        ; preds = %if.else18
  %cmp21 = icmp eq i32 %sub, 1024
  br i1 %cmp21, label %if.then22, label %return

if.then22:                                        ; preds = %if.then20
  %add23 = fadd double %x, %x
  br label %return

if.else25:                                        ; preds = %if.else18
  %sub27 = add nsw i32 %shr77, -1043
  %shr28 = lshr i32 -1, %sub27
  %and29 = and i32 %shr28, %ew_u.sroa.0.0.extract.trunc
  %cmp30 = icmp eq i32 %and29, 0
  br i1 %cmp30, label %return, label %if.end32

if.end32:                                         ; preds = %if.else25
  %sub33 = sub i32 1074, %shr77
  %shl = shl i32 1, %sub33
  %uadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %ew_u.sroa.0.0.extract.trunc, i32 %shl)
  %3 = extractvalue { i32, i1 } %uadd, 0
  %cmp35 = extractvalue { i32, i1 } %uadd, 1
  %add37 = zext i1 %cmp35 to i32
  %add37.ew_u.sroa.0.4.extract.trunc = add nsw i32 %add37, %ew_u.sroa.0.4.extract.trunc
  %neg39 = xor i32 %shr28, -1
  %and40 = and i32 %3, %neg39
  %phitmp = zext i32 %and40 to i64
  br label %do.body43

do.body43:                                        ; preds = %if.end32, %if.end14, %if.then5
  %lsw.0 = phi i64 [ 0, %if.then5 ], [ 0, %if.end14 ], [ %phitmp, %if.end32 ]
  %msw.2 = phi i32 [ %or.and6, %if.then5 ], [ %and16, %if.end14 ], [ %add37.ew_u.sroa.0.4.extract.trunc, %if.end32 ]
  %iw_u.sroa.0.4.insert.ext = zext i32 %msw.2 to i64
  %iw_u.sroa.0.4.insert.shift = shl nuw i64 %iw_u.sroa.0.4.insert.ext, 32
  %iw_u.sroa.0.0.insert.insert = or i64 %iw_u.sroa.0.4.insert.shift, %lsw.0
  %4 = bitcast i64 %iw_u.sroa.0.0.insert.insert to double
  br label %return

return:                                           ; preds = %do.body43, %if.else25, %if.then22, %if.then20, %if.else
  %retval.0 = phi double [ %4, %do.body43 ], [ %add23, %if.then22 ], [ %x, %if.else ], [ %x, %if.then20 ], [ %x, %if.else25 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @scalbln(double %x, i32 %n) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %and81 = lshr i64 %0, 52
  %and = trunc i64 %and81 to i32
  %shr80 = and i32 %and, 2047
  %cmp = icmp eq i32 %shr80, 0
  br i1 %cmp, label %if.then, label %if.end12

if.then:                                          ; preds = %entry
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and2 = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %or = or i32 %and2, %ew_u.sroa.0.0.extract.trunc
  %cmp3 = icmp eq i32 %or, 0
  br i1 %cmp3, label %return, label %if.end

if.end:                                           ; preds = %if.then
  %mul = fmul double %x, 0x4350000000000000
  %1 = bitcast double %mul to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %1, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and1084 = lshr i64 %1, 52
  %and10 = trunc i64 %and1084 to i32
  %shr1183 = and i32 %and10, 2047
  %sub = add nsw i32 %shr1183, -54
  br label %if.end12

if.end12:                                         ; preds = %if.end, %entry
  %hx.0 = phi i32 [ %gh_u.sroa.0.4.extract.trunc, %if.end ], [ %ew_u.sroa.0.4.extract.trunc, %entry ]
  %k.0 = phi i32 [ %sub, %if.end ], [ %shr80, %entry ]
  %x.addr.0 = phi double [ %mul, %if.end ], [ %x, %entry ]
  %cmp13 = icmp eq i32 %k.0, 2047
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end12
  %add = fadd double %x.addr.0, %x.addr.0
  br label %return

if.end15:                                         ; preds = %if.end12
  %add16 = add nsw i32 %k.0, %n
  %cmp17 = icmp sgt i32 %n, 50000
  %cmp18 = icmp sgt i32 %add16, 2046
  %or.cond = or i1 %cmp17, %cmp18
  br i1 %or.cond, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end15
  %call = tail call double @copysign(double 1.000000e+300, double %x.addr.0) #8
  %mul20 = fmul double %call, 1.000000e+300
  br label %return

if.end21:                                         ; preds = %if.end15
  %cmp22 = icmp slt i32 %n, -50000
  br i1 %cmp22, label %if.then23, label %if.end26

if.then23:                                        ; preds = %if.end21
  %call24 = tail call double @copysign(double 1.000000e-300, double %x.addr.0) #8
  %mul25 = fmul double %call24, 1.000000e-300
  br label %return

if.end26:                                         ; preds = %if.end21
  %cmp27 = icmp sgt i32 %add16, 0
  br i1 %cmp27, label %do.body29, label %if.end37

do.body29:                                        ; preds = %if.end26
  %and31 = and i32 %hx.0, -2146435073
  %shl = shl i32 %add16, 20
  %or32 = or i32 %shl, %and31
  %2 = bitcast double %x.addr.0 to i64
  %sh_u.sroa.0.4.insert.ext = zext i32 %or32 to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %2, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %3 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  br label %return

if.end37:                                         ; preds = %if.end26
  %cmp38 = icmp slt i32 %add16, -53
  br i1 %cmp38, label %if.then39, label %if.end42

if.then39:                                        ; preds = %if.end37
  %call40 = tail call double @copysign(double 1.000000e-300, double %x.addr.0) #8
  %mul41 = fmul double %call40, 1.000000e-300
  br label %return

if.end42:                                         ; preds = %if.end37
  %and47 = and i32 %hx.0, -2146435073
  %add43 = shl i32 %add16, 20
  %shl48 = add i32 %add43, 56623104
  %or49 = or i32 %shl48, %and47
  %4 = bitcast double %x.addr.0 to i64
  %sh_u45.sroa.0.4.insert.ext = zext i32 %or49 to i64
  %sh_u45.sroa.0.4.insert.shift = shl nuw i64 %sh_u45.sroa.0.4.insert.ext, 32
  %sh_u45.sroa.0.4.insert.mask = and i64 %4, 4294967295
  %sh_u45.sroa.0.4.insert.insert = or i64 %sh_u45.sroa.0.4.insert.shift, %sh_u45.sroa.0.4.insert.mask
  %5 = bitcast i64 %sh_u45.sroa.0.4.insert.insert to double
  %mul54 = fmul double %5, 0x3C90000000000000
  br label %return

return:                                           ; preds = %if.end42, %if.then39, %do.body29, %if.then23, %if.then19, %if.then14, %if.then
  %retval.0 = phi double [ %add, %if.then14 ], [ %mul20, %if.then19 ], [ %mul25, %if.then23 ], [ %3, %do.body29 ], [ %mul41, %if.then39 ], [ %mul54, %if.end42 ], [ %x, %if.then ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @scalbn(double %x, i32 %n) #2 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %and83 = lshr i64 %0, 52
  %and = trunc i64 %and83 to i32
  %shr82 = and i32 %and, 2047
  %cmp = icmp eq i32 %shr82, 0
  br i1 %cmp, label %if.then, label %if.end16

if.then:                                          ; preds = %entry
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and2 = and i32 %ew_u.sroa.0.4.extract.trunc, 2147483647
  %or = or i32 %and2, %ew_u.sroa.0.0.extract.trunc
  %cmp3 = icmp eq i32 %or, 0
  br i1 %cmp3, label %return, label %if.end

if.end:                                           ; preds = %if.then
  %mul = fmul double %x, 0x4350000000000000
  %1 = bitcast double %mul to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %1, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and1086 = lshr i64 %1, 52
  %and10 = trunc i64 %and1086 to i32
  %shr1185 = and i32 %and10, 2047
  %sub = add nsw i32 %shr1185, -54
  %cmp12 = icmp slt i32 %n, -50000
  br i1 %cmp12, label %if.then13, label %if.end16

if.then13:                                        ; preds = %if.end
  %mul14 = fmul double %mul, 1.000000e-300
  br label %return

if.end16:                                         ; preds = %if.end, %entry
  %hx.0 = phi i32 [ %gh_u.sroa.0.4.extract.trunc, %if.end ], [ %ew_u.sroa.0.4.extract.trunc, %entry ]
  %k.0 = phi i32 [ %sub, %if.end ], [ %shr82, %entry ]
  %x.addr.0 = phi double [ %mul, %if.end ], [ %x, %entry ]
  %cmp17 = icmp eq i32 %k.0, 2047
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end16
  %add = fadd double %x.addr.0, %x.addr.0
  br label %return

if.end19:                                         ; preds = %if.end16
  %add20 = add nsw i32 %k.0, %n
  %cmp21 = icmp sgt i32 %add20, 2046
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %call = tail call double @copysign(double 1.000000e+300, double %x.addr.0) #8
  %mul23 = fmul double %call, 1.000000e+300
  br label %return

if.end24:                                         ; preds = %if.end19
  %cmp25 = icmp sgt i32 %add20, 0
  br i1 %cmp25, label %do.body27, label %if.end35

do.body27:                                        ; preds = %if.end24
  %and29 = and i32 %hx.0, -2146435073
  %shl = shl i32 %add20, 20
  %or30 = or i32 %shl, %and29
  %2 = bitcast double %x.addr.0 to i64
  %sh_u.sroa.0.4.insert.ext = zext i32 %or30 to i64
  %sh_u.sroa.0.4.insert.shift = shl nuw i64 %sh_u.sroa.0.4.insert.ext, 32
  %sh_u.sroa.0.4.insert.mask = and i64 %2, 4294967295
  %sh_u.sroa.0.4.insert.insert = or i64 %sh_u.sroa.0.4.insert.shift, %sh_u.sroa.0.4.insert.mask
  %3 = bitcast i64 %sh_u.sroa.0.4.insert.insert to double
  br label %return

if.end35:                                         ; preds = %if.end24
  %cmp36 = icmp slt i32 %add20, -53
  br i1 %cmp36, label %if.then37, label %if.end44

if.then37:                                        ; preds = %if.end35
  %cmp38 = icmp sgt i32 %n, 50000
  br i1 %cmp38, label %if.then39, label %if.else

if.then39:                                        ; preds = %if.then37
  %call40 = tail call double @copysign(double 1.000000e+300, double %x.addr.0) #8
  %mul41 = fmul double %call40, 1.000000e+300
  br label %return

if.else:                                          ; preds = %if.then37
  %call42 = tail call double @copysign(double 1.000000e-300, double %x.addr.0) #8
  %mul43 = fmul double %call42, 1.000000e-300
  br label %return

if.end44:                                         ; preds = %if.end35
  %and49 = and i32 %hx.0, -2146435073
  %add45 = shl i32 %add20, 20
  %shl50 = add i32 %add45, 56623104
  %or51 = or i32 %shl50, %and49
  %4 = bitcast double %x.addr.0 to i64
  %sh_u47.sroa.0.4.insert.ext = zext i32 %or51 to i64
  %sh_u47.sroa.0.4.insert.shift = shl nuw i64 %sh_u47.sroa.0.4.insert.ext, 32
  %sh_u47.sroa.0.4.insert.mask = and i64 %4, 4294967295
  %sh_u47.sroa.0.4.insert.insert = or i64 %sh_u47.sroa.0.4.insert.shift, %sh_u47.sroa.0.4.insert.mask
  %5 = bitcast i64 %sh_u47.sroa.0.4.insert.insert to double
  %mul56 = fmul double %5, 0x3C90000000000000
  br label %return

return:                                           ; preds = %if.end44, %if.else, %if.then39, %do.body27, %if.then22, %if.then18, %if.then13, %if.then
  %retval.0 = phi double [ %mul14, %if.then13 ], [ %add, %if.then18 ], [ %mul23, %if.then22 ], [ %3, %do.body27 ], [ %mul41, %if.then39 ], [ %mul43, %if.else ], [ %mul56, %if.end44 ], [ %x, %if.then ]
  ret double %retval.0
}

; Function Attrs: nounwind readnone
define i32 @__signbitf(float %x) #3 {
entry:
  %0 = bitcast float %x to i32
  %.lobit = lshr i32 %0, 31
  ret i32 %.lobit
}

; Function Attrs: nounwind readnone
define i32 @__signbitd(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %.lobit = lshr i64 %0, 63
  %1 = trunc i64 %.lobit to i32
  ret i32 %1
}

; Function Attrs: nounwind
define double @significand(double %x) #2 {
entry:
  %call = tail call i32 @ilogb(double %x) #8
  %sub = sub nsw i32 0, %call
  %conv = sitofp i32 %sub to double
  %call1 = tail call double @__ieee754_scalb(double %x, double %conv) #8
  ret double %call1
}

; Function Attrs: nounwind
define double @sin(double %x) #2 {
entry:
  %y = alloca [2 x double], align 8
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ult i32 %and, 1072243196
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = tail call double @__kernel_sin(double %x, double 0.000000e+00, i32 0) #8
  br label %return

if.else:                                          ; preds = %entry
  %cmp1 = icmp ugt i32 %and, 2146435071
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  %sub = fsub double %x, %x
  br label %return

if.else3:                                         ; preds = %if.else
  %arraydecay = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %call4 = call i32 @__ieee754_rem_pio2(double %x, double* %arraydecay) #8
  %and5 = and i32 %call4, 3
  switch i32 %and5, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb8
    i32 2, label %sw.bb12
  ]

sw.bb:                                            ; preds = %if.else3
  %1 = load double* %arraydecay, align 8, !tbaa !429
  %arrayidx6 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %2 = load double* %arrayidx6, align 8, !tbaa !429
  %call7 = call double @__kernel_sin(double %1, double %2, i32 1) #8
  br label %return

sw.bb8:                                           ; preds = %if.else3
  %3 = load double* %arraydecay, align 8, !tbaa !429
  %arrayidx10 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %4 = load double* %arrayidx10, align 8, !tbaa !429
  %call11 = call double @__kernel_cos(double %3, double %4) #8
  br label %return

sw.bb12:                                          ; preds = %if.else3
  %5 = load double* %arraydecay, align 8, !tbaa !429
  %arrayidx14 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %6 = load double* %arrayidx14, align 8, !tbaa !429
  %call15 = call double @__kernel_sin(double %5, double %6, i32 1) #8
  %sub16 = fsub double -0.000000e+00, %call15
  br label %return

sw.default:                                       ; preds = %if.else3
  %7 = load double* %arraydecay, align 8, !tbaa !429
  %arrayidx18 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %8 = load double* %arrayidx18, align 8, !tbaa !429
  %call19 = call double @__kernel_cos(double %7, double %8) #8
  %sub20 = fsub double -0.000000e+00, %call19
  br label %return

return:                                           ; preds = %sw.default, %sw.bb12, %sw.bb8, %sw.bb, %if.then2, %if.then
  %retval.0 = phi double [ %call, %if.then ], [ %sub, %if.then2 ], [ %sub20, %sw.default ], [ %sub16, %sw.bb12 ], [ %call11, %sw.bb8 ], [ %call7, %sw.bb ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @tan(double %x) #2 {
entry:
  %y = alloca [2 x double], align 8
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ult i32 %and, 1072243196
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = tail call double @__kernel_tan(double %x, double 0.000000e+00, i32 1) #8
  br label %return

if.else:                                          ; preds = %entry
  %cmp1 = icmp ugt i32 %and, 2146435071
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  %sub = fsub double %x, %x
  br label %return

if.else3:                                         ; preds = %if.else
  %arraydecay = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %call4 = call i32 @__ieee754_rem_pio2(double %x, double* %arraydecay) #8
  %1 = load double* %arraydecay, align 8, !tbaa !429
  %arrayidx5 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %2 = load double* %arrayidx5, align 8, !tbaa !429
  %and6 = shl i32 %call4, 1
  %shl = and i32 %and6, 2
  %sub7 = sub nsw i32 1, %shl
  %call8 = call double @__kernel_tan(double %1, double %2, i32 %sub7) #8
  br label %return

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %retval.0 = phi double [ %call, %if.then ], [ %sub, %if.then2 ], [ %call8, %if.else3 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @tanh(double %x) #2 {
entry:
  %0 = bitcast double %x to i64
  %gh_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %gh_u.sroa.0.4.extract.trunc = trunc i64 %gh_u.sroa.0.4.extract.shift to i32
  %and = and i32 %gh_u.sroa.0.4.extract.trunc, 2147483647
  %cmp = icmp ugt i32 %and, 2146435071
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %cmp1 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, -1
  %div = fdiv double 1.000000e+00, %x
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %add = fadd double %div, 1.000000e+00
  br label %return

if.else:                                          ; preds = %if.then
  %sub = fadd double %div, -1.000000e+00
  br label %return

if.end:                                           ; preds = %entry
  %cmp4 = icmp ult i32 %and, 1077280768
  br i1 %cmp4, label %if.then5, label %if.end26

if.then5:                                         ; preds = %if.end
  %cmp6 = icmp ult i32 %and, 1015021568
  br i1 %cmp6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.then5
  %add8 = fadd double %x, 1.000000e+00
  %mul = fmul double %add8, %x
  br label %return

if.end9:                                          ; preds = %if.then5
  %cmp10 = icmp ugt i32 %and, 1072693247
  %call = tail call double @fabs(double %x) #8
  br i1 %cmp10, label %if.then11, label %if.else17

if.then11:                                        ; preds = %if.end9
  %mul12 = fmul double %call, 2.000000e+00
  %call13 = tail call double @expm1(double %mul12) #8
  %add14 = fadd double %call13, 2.000000e+00
  %div15 = fdiv double 2.000000e+00, %add14
  %sub16 = fsub double 1.000000e+00, %div15
  br label %if.end26

if.else17:                                        ; preds = %if.end9
  %mul19 = fmul double %call, -2.000000e+00
  %call20 = tail call double @expm1(double %mul19) #8
  %sub21 = fsub double -0.000000e+00, %call20
  %add22 = fadd double %call20, 2.000000e+00
  %div23 = fdiv double %sub21, %add22
  br label %if.end26

if.end26:                                         ; preds = %if.else17, %if.then11, %if.end
  %z.0 = phi double [ %sub16, %if.then11 ], [ %div23, %if.else17 ], [ 1.000000e+00, %if.end ]
  %cmp27 = icmp sgt i32 %gh_u.sroa.0.4.extract.trunc, -1
  br i1 %cmp27, label %return, label %cond.false

cond.false:                                       ; preds = %if.end26
  %sub28 = fsub double -0.000000e+00, %z.0
  br label %return

return:                                           ; preds = %cond.false, %if.end26, %if.then7, %if.else, %if.then2
  %retval.0 = phi double [ %add, %if.then2 ], [ %sub, %if.else ], [ %mul, %if.then7 ], [ %sub28, %cond.false ], [ %z.0, %if.end26 ]
  ret double %retval.0
}

; Function Attrs: nounwind readnone
define double @trunc(double %x) #3 {
entry:
  %0 = bitcast double %x to i64
  %ew_u.sroa.0.4.extract.shift = lshr i64 %0, 32
  %ew_u.sroa.0.4.extract.trunc = trunc i64 %ew_u.sroa.0.4.extract.shift to i32
  %ew_u.sroa.0.0.extract.trunc = trunc i64 %0 to i32
  %and = and i32 %ew_u.sroa.0.4.extract.trunc, -2147483648
  %and456 = lshr i64 %0, 52
  %and4 = trunc i64 %and456 to i32
  %shr55 = and i32 %and4, 2047
  %sub = add nsw i32 %shr55, -1023
  %cmp = icmp slt i32 %sub, 20
  br i1 %cmp, label %if.then, label %if.else24

if.then:                                          ; preds = %entry
  %cmp5 = icmp slt i32 %sub, 0
  br i1 %cmp5, label %do.body7, label %do.body14

do.body7:                                         ; preds = %if.then
  %iw_u.sroa.0.4.insert.ext = zext i32 %and to i64
  %iw_u.sroa.0.4.insert.shift = shl nuw i64 %iw_u.sroa.0.4.insert.ext, 32
  %1 = bitcast i64 %iw_u.sroa.0.4.insert.shift to double
  br label %return

do.body14:                                        ; preds = %if.then
  %shr16 = lshr i32 1048575, %sub
  %neg = xor i32 %shr16, -1
  %and17 = and i32 %ew_u.sroa.0.4.extract.trunc, %neg
  %or = or i32 %and17, %and
  %iw_u15.sroa.0.4.insert.ext = zext i32 %or to i64
  %iw_u15.sroa.0.4.insert.shift = shl nuw i64 %iw_u15.sroa.0.4.insert.ext, 32
  %2 = bitcast i64 %iw_u15.sroa.0.4.insert.shift to double
  br label %return

if.else24:                                        ; preds = %entry
  %cmp25 = icmp sgt i32 %sub, 51
  br i1 %cmp25, label %if.then26, label %do.body31

if.then26:                                        ; preds = %if.else24
  %cmp27 = icmp eq i32 %sub, 1024
  br i1 %cmp27, label %if.then28, label %return

if.then28:                                        ; preds = %if.then26
  %add = fadd double %x, %x
  br label %return

do.body31:                                        ; preds = %if.else24
  %sub35 = add nsw i32 %shr55, -1043
  %shr36 = lshr i32 -1, %sub35
  %neg37 = xor i32 %shr36, -1
  %and38 = and i32 %ew_u.sroa.0.0.extract.trunc, %neg37
  %iw_u32.sroa.0.0.insert.ext = zext i32 %and38 to i64
  %iw_u32.sroa.0.0.insert.mask = and i64 %0, -4294967296
  %iw_u32.sroa.0.0.insert.insert = or i64 %iw_u32.sroa.0.0.insert.ext, %iw_u32.sroa.0.0.insert.mask
  %3 = bitcast i64 %iw_u32.sroa.0.0.insert.insert to double
  br label %return

return:                                           ; preds = %do.body31, %if.then28, %if.then26, %do.body14, %do.body7
  %retval.0 = phi double [ %add, %if.then28 ], [ %1, %do.body7 ], [ %2, %do.body14 ], [ %x, %if.then26 ], [ %3, %do.body31 ]
  ret double %retval.0
}

; Function Attrs: nounwind
define double @acos(double %x) #2 {
entry:
  %call = tail call double @__ieee754_acos(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @acosh(double %x) #2 {
entry:
  %call = tail call double @__ieee754_acosh(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @asin(double %x) #2 {
entry:
  %call = tail call double @__ieee754_asin(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @atan2(double %y, double %x) #2 {
entry:
  %call = tail call double @__ieee754_atan2(double %y, double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @atanh(double %x) #2 {
entry:
  %call = tail call double @__ieee754_atanh(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @cosh(double %x) #2 {
entry:
  %call = tail call double @__ieee754_cosh(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @drem(double %x, double %y) #2 {
entry:
  %call = tail call double @remainder(double %x, double %y) #8
  ret double %call
}

; Function Attrs: nounwind
define float @acosf(float %x) #2 {
entry:
  %call = tail call float @__ieee754_acosf(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @acoshf(float %x) #2 {
entry:
  %call = tail call float @__ieee754_acoshf(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @asinf(float %x) #2 {
entry:
  %call = tail call float @__ieee754_asinf(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @atan2f(float %y, float %x) #2 {
entry:
  %call = tail call float @__ieee754_atan2f(float %y, float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @atanhf(float %x) #2 {
entry:
  %call = tail call float @__ieee754_atanhf(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @coshf(float %x) #2 {
entry:
  %call = tail call float @__ieee754_coshf(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @dremf(float %x, float %y) #2 {
entry:
  %call = tail call float @remainderf(float %x, float %y) #8
  ret float %call
}

; Function Attrs: nounwind
define float @fmodf(float %x, float %y) #2 {
entry:
  %call = tail call float @__ieee754_fmodf(float %x, float %y) #8
  ret float %call
}

; Function Attrs: nounwind
define float @gammaf(float %x) #2 {
entry:
  %call = tail call float @lgammaf(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @hypotf(float %x, float %y) #2 {
entry:
  %call = tail call float @__ieee754_hypotf(float %x, float %y) #8
  ret float %call
}

; Function Attrs: nounwind
define float @j0f(float %x) #2 {
entry:
  %call = tail call float @__ieee754_j0f(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @y0f(float %x) #2 {
entry:
  %call = tail call float @__ieee754_y0f(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @j1f(float %x) #2 {
entry:
  %call = tail call float @__ieee754_j1f(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @y1f(float %x) #2 {
entry:
  %call = tail call float @__ieee754_y1f(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @jnf(i32 %n, float %x) #2 {
entry:
  %call = tail call float @__ieee754_jnf(i32 %n, float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @ynf(i32 %n, float %x) #2 {
entry:
  %call = tail call float @__ieee754_ynf(i32 %n, float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @lgammaf(float %x) #2 {
entry:
  %call = tail call %struct._reent* @__getreent() #8
  %_gamma_signgam = getelementptr inbounds %struct._reent* %call, i32 0, i32 16, i32 0, i32 0, i32 18
  %0 = bitcast i8** %_gamma_signgam to i32*
  %call1 = tail call float @__ieee754_lgammaf_r(float %x, i32* %0) #8
  ret float %call1
}

declare %struct._reent* @__getreent() #5

; Function Attrs: nounwind
define float @log10f(float %x) #2 {
entry:
  %call = tail call float @__ieee754_log10f(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define double @fmod(double %x, double %y) #2 {
entry:
  %call = tail call double @__ieee754_fmod(double %x, double %y) #8
  ret double %call
}

; Function Attrs: nounwind
define float @remainderf(float %x, float %y) #2 {
entry:
  %call = tail call float @__ieee754_remainderf(float %x, float %y) #8
  ret float %call
}

; Function Attrs: nounwind
define float @scalbf(float %x, float %fn) #2 {
entry:
  %call = tail call float @__ieee754_scalbf(float %x, float %fn) #8
  ret float %call
}

; Function Attrs: nounwind
define float @sinhf(float %x) #2 {
entry:
  %call = tail call float @__ieee754_sinhf(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @sqrtf(float %x) #2 {
entry:
  %call = tail call float @__ieee754_sqrtf(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define float @tgammaf(float %x) #2 {
entry:
  %call = tail call float @__ieee754_tgammaf(float %x) #8
  ret float %call
}

; Function Attrs: nounwind
define double @gamma(double %x) #2 {
entry:
  %call = tail call double @lgamma(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @hypot(double %x, double %y) #2 {
entry:
  %call = tail call double @__ieee754_hypot(double %x, double %y) #8
  ret double %call
}

; Function Attrs: nounwind
define double @j0(double %x) #2 {
entry:
  %call = tail call double @__ieee754_j0(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @y0(double %x) #2 {
entry:
  %call = tail call double @__ieee754_y0(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @j1(double %x) #2 {
entry:
  %call = tail call double @__ieee754_j1(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @y1(double %x) #2 {
entry:
  %call = tail call double @__ieee754_y1(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @jn(i32 %n, double %x) #2 {
entry:
  %call = tail call double @__ieee754_jn(i32 %n, double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @yn(i32 %n, double %x) #2 {
entry:
  %call = tail call double @__ieee754_yn(i32 %n, double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @lgamma(double %x) #2 {
entry:
  %call = tail call %struct._reent* @__getreent() #8
  %_gamma_signgam = getelementptr inbounds %struct._reent* %call, i32 0, i32 16, i32 0, i32 0, i32 18
  %0 = bitcast i8** %_gamma_signgam to i32*
  %call1 = tail call double @__ieee754_lgamma_r(double %x, i32* %0) #8
  ret double %call1
}

; Function Attrs: nounwind
define double @log10(double %x) #2 {
entry:
  %call = tail call double @__ieee754_log10(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @remainder(double %x, double %y) #2 {
entry:
  %call = tail call double @__ieee754_remainder(double %x, double %y) #8
  ret double %call
}

; Function Attrs: nounwind
define float @gammaf_r(float %x, i32* %signgamp) #2 {
entry:
  %call = tail call float @lgammaf_r(float %x, i32* %signgamp) #8
  ret float %call
}

; Function Attrs: nounwind
define float @lgammaf_r(float %x, i32* %signgamp) #2 {
entry:
  %call = tail call float @__ieee754_lgammaf_r(float %x, i32* %signgamp) #8
  ret float %call
}

; Function Attrs: nounwind
define double @gamma_r(double %x, i32* %signgamp) #2 {
entry:
  %call = tail call double @lgamma_r(double %x, i32* %signgamp) #8
  ret double %call
}

; Function Attrs: nounwind
define double @lgamma_r(double %x, i32* %signgamp) #2 {
entry:
  %call = tail call double @__ieee754_lgamma_r(double %x, i32* %signgamp) #8
  ret double %call
}

; Function Attrs: nounwind
define double @scalb(double %x, double %fn) #2 {
entry:
  %call = tail call double @__ieee754_scalb(double %x, double %fn) #8
  ret double %call
}

; Function Attrs: nounwind
define void @sincos(double %x, double* nocapture %sinx, double* nocapture %cosx) #2 {
entry:
  %call = tail call double @sin(double %x) #8
  store double %call, double* %sinx, align 4, !tbaa !429
  %call1 = tail call double @cos(double %x) #8
  store double %call1, double* %cosx, align 4, !tbaa !429
  ret void
}

; Function Attrs: nounwind
define double @sinh(double %x) #2 {
entry:
  %call = tail call double @__ieee754_sinh(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @sqrt(double %x) #2 {
entry:
  %call = tail call double @__ieee754_sqrt(double %x) #8
  ret double %call
}

; Function Attrs: nounwind
define double @tgamma(double %x) #2 {
entry:
  %call = tail call double @__ieee754_tgamma(double %x) #8
  ret double %call
}

; Function Attrs: noinline nounwind
define internal fastcc double @xflow(i32 %sign, double %y) #6 {
entry:
  %y.i = alloca double, align 8
  %tobool = icmp eq i32 %sign, 0
  br i1 %tobool, label %cond.end, label %cond.true

cond.true:                                        ; preds = %entry
  %sub = fsub double -0.000000e+00, %y
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %entry
  %cond = phi double [ %sub, %cond.true ], [ %y, %entry ]
  %y.i.0..sroa_cast = bitcast double* %y.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %y.i.0..sroa_cast)
  store volatile double %cond, double* %y.i, align 8, !tbaa !429
  %y.i.0.y.0.y.0..i = load volatile double* %y.i, align 8
  call void @llvm.lifetime.end(i64 8, i8* %y.i.0..sroa_cast)
  %mul = fmul double %y.i.0.y.0.y.0..i, %y
  ret double %mul
}

; Function Attrs: noinline nounwind readnone
define internal fastcc float @xflowf(i32 %sign, float %y) #7 {
entry:
  %tobool = icmp eq i32 %sign, 0
  br i1 %tobool, label %cond.end, label %cond.true

cond.true:                                        ; preds = %entry
  %sub = fsub float -0.000000e+00, %y
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %entry
  %cond = phi float [ %sub, %cond.true ], [ %y, %entry ]
  %mul = fmul float %cond, %y
  ret float %mul
}

attributes #0 = { noinline nounwind "legup_ret"="void" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "top_level_function"="1" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind }
attributes #9 = { nobuiltin }

!llvm.dbg.cu = !{!0}
!legup.userdefined = !{!58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !81, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !86, !87, !88, !89, !90, !91, !92, !93, !141, !95, !96, !97, !98, !99, !100, !101, !102, !142, !143, !144, !106, !107, !108, !109, !110, !111, !112, !113, !145, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !146, !147, !148, !149, !150, !151, !131, !132, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !161, !162, !163, !164, !165, !166, !167, !168, !169, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !176, !177, !182, !183, !184, !180, !185, !166, !186, !168, !187, !188, !166, !186, !168, !189, !190, !191, !192, !193, !194, !195, !163, !196, !197, !198, !199, !200, !201, !202, !203, !204, !161, !162, !164, !165, !167, !166, !205, !163, !206, !207, !208, !169, !168, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !212, !213, !214, !226, !227, !228, !229, !230, !231, !232, !233, !166, !168, !64, !169, !234, !235, !166, !168, !64, !169, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !64, !260, !261, !262, !259, !64, !263, !264, !265, !255, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !166, !168, !278, !259, !206, !279, !208, !64, !280, !281, !81, !282, !283, !255, !284, !285, !286, !287, !288, !289, !290, !291, !292, !63, !64, !65, !293, !294, !67, !295, !296, !297, !63, !64, !65, !66, !294, !67, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !307, !312, !313, !314, !315, !316, !317, !318, !319, !320, !81, !321, !307, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382}
!_Z12sobel_filterPA512_hS0_ = !{!383}
!llvm.module.flags = !{!384, !385}
!llvm.ident = !{}

!0 = metadata !{i32 786449, metadata !1, i32 4, metadata !"clang version 3.5.0 (tags/RELEASE_352/final)", i1 true, metadata !"", i32 0, metadata !2, metadata !2, metadata !3, metadata !45, metadata !2, metadata !"", i32 1} ; [ DW_TAG_compile_unit ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp] [DW_LANG_C_plus_plus]
!1 = metadata !{metadata !"sobel.cpp", metadata !"/home/parisa/fpga-hls-examples/sobel_tutorial/part1"}
!2 = metadata !{}
!3 = metadata !{metadata !4, metadata !33}
!4 = metadata !{i32 786478, metadata !1, metadata !5, metadata !"sobel_filter", metadata !"sobel_filter", metadata !"_Z12sobel_filterPA512_hS0_", i32 9, metadata !6, i1 false, i1 true, i32 0, i32 0, null, i32 256, i1 true, void ([512 x i8]*, [512 x i8]*)* @_Z12sobel_filterPA512_hS0_, null, null, metadata !13, i32 10} ; [ DW_TAG_subprogram ] [line 9] [def] [scope 10] [sobel_filter]
!5 = metadata !{i32 786473, metadata !1}          ; [ DW_TAG_file_type ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!6 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !7, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!7 = metadata !{null, metadata !8, metadata !8}
!8 = metadata !{i32 786447, null, null, metadata !"", i32 0, i64 32, i64 32, i64 0, i32 0, metadata !9} ; [ DW_TAG_pointer_type ] [line 0, size 32, align 32, offset 0] [from ]
!9 = metadata !{i32 786433, null, null, metadata !"", i32 0, i64 4096, i64 8, i32 0, i32 0, metadata !10, metadata !11, i32 0, null, null, null} ; [ DW_TAG_array_type ] [line 0, size 4096, align 8, offset 0] [from unsigned char]
!10 = metadata !{i32 786468, null, null, metadata !"unsigned char", i32 0, i64 8, i64 8, i64 0, i32 0, i32 8} ; [ DW_TAG_base_type ] [unsigned char] [line 0, size 8, align 8, offset 0, enc DW_ATE_unsigned_char]
!11 = metadata !{metadata !12}
!12 = metadata !{i32 786465, i64 0, i64 512}      ; [ DW_TAG_subrange_type ] [0, 511]
!13 = metadata !{metadata !14, metadata !15, metadata !16, metadata !19, metadata !22, metadata !24, metadata !25, metadata !27, metadata !30, metadata !32}
!14 = metadata !{i32 786689, metadata !4, metadata !"in", metadata !5, i32 16777225, metadata !8, i32 0, i32 0} ; [ DW_TAG_arg_variable ] [in] [line 9]
!15 = metadata !{i32 786689, metadata !4, metadata !"out", metadata !5, i32 33554442, metadata !8, i32 0, i32 0} ; [ DW_TAG_arg_variable ] [out] [line 10]
!16 = metadata !{i32 786688, metadata !17, metadata !"i", metadata !5, i32 17, metadata !18, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [i] [line 17]
!17 = metadata !{i32 786443, metadata !1, metadata !4, i32 17, i32 5, i32 0, i32 0} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!18 = metadata !{i32 786468, null, null, metadata !"int", i32 0, i64 32, i64 32, i64 0, i32 0, i32 5} ; [ DW_TAG_base_type ] [int] [line 0, size 32, align 32, offset 0, enc DW_ATE_signed]
!19 = metadata !{i32 786688, metadata !20, metadata !"j", metadata !5, i32 18, metadata !18, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [j] [line 18]
!20 = metadata !{i32 786443, metadata !1, metadata !21, i32 18, i32 9, i32 0, i32 2} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!21 = metadata !{i32 786443, metadata !1, metadata !17, i32 17, i32 38, i32 0, i32 1} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!22 = metadata !{i32 786688, metadata !23, metadata !"gx_sum", metadata !5, i32 26, metadata !18, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [gx_sum] [line 26]
!23 = metadata !{i32 786443, metadata !1, metadata !20, i32 18, i32 41, i32 0, i32 3} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!24 = metadata !{i32 786688, metadata !23, metadata !"gy_sum", metadata !5, i32 26, metadata !18, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [gy_sum] [line 26]
!25 = metadata !{i32 786688, metadata !26, metadata !"m", metadata !5, i32 27, metadata !18, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [m] [line 27]
!26 = metadata !{i32 786443, metadata !1, metadata !23, i32 27, i32 13, i32 0, i32 6} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!27 = metadata !{i32 786688, metadata !28, metadata !"n", metadata !5, i32 28, metadata !18, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [n] [line 28]
!28 = metadata !{i32 786443, metadata !1, metadata !29, i32 28, i32 17, i32 0, i32 8} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!29 = metadata !{i32 786443, metadata !1, metadata !26, i32 27, i32 43, i32 0, i32 7} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!30 = metadata !{i32 786688, metadata !31, metadata !"pixel", metadata !5, i32 29, metadata !18, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [pixel] [line 29]
!31 = metadata !{i32 786443, metadata !1, metadata !28, i32 28, i32 47, i32 0, i32 9} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!32 = metadata !{i32 786688, metadata !23, metadata !"sum", metadata !5, i32 38, metadata !18, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [sum] [line 38]
!33 = metadata !{i32 786478, metadata !1, metadata !5, metadata !"main", metadata !"main", metadata !"", i32 46, metadata !34, i1 false, i1 true, i32 0, i32 0, null, i32 256, i1 true, null, null, null, metadata !36, i32 46} ; [ DW_TAG_subprogram ] [line 46] [def] [main]
!34 = metadata !{i32 786453, i32 0, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, null, metadata !35, i32 0, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]
!35 = metadata !{metadata !18}
!36 = metadata !{metadata !37, metadata !40, metadata !41, metadata !43}
!37 = metadata !{i32 786688, metadata !33, metadata !"sobel_output", metadata !5, i32 47, metadata !38, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [sobel_output] [line 47]
!38 = metadata !{i32 786433, null, null, metadata !"", i32 0, i64 2097152, i64 8, i32 0, i32 0, metadata !10, metadata !39, i32 0, null, null, null} ; [ DW_TAG_array_type ] [line 0, size 2097152, align 8, offset 0] [from unsigned char]
!39 = metadata !{metadata !12, metadata !12}
!40 = metadata !{i32 786688, metadata !33, metadata !"mismatch_count", metadata !5, i32 52, metadata !18, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [mismatch_count] [line 52]
!41 = metadata !{i32 786688, metadata !42, metadata !"i", metadata !5, i32 53, metadata !18, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [i] [line 53]
!42 = metadata !{i32 786443, metadata !1, metadata !33, i32 53, i32 5, i32 0, i32 10} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!43 = metadata !{i32 786688, metadata !44, metadata !"j", metadata !5, i32 54, metadata !18, i32 0, i32 0} ; [ DW_TAG_auto_variable ] [j] [line 54]
!44 = metadata !{i32 786443, metadata !1, metadata !42, i32 54, i32 9, i32 0, i32 11} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!45 = metadata !{metadata !46, metadata !49, metadata !52, metadata !57}
!46 = metadata !{i32 786484, i32 0, null, metadata !"elaine_512_input", metadata !"elaine_512_input", metadata !"", metadata !47, i32 2, metadata !38, i32 0, i32 1, null, null} ; [ DW_TAG_variable ] [elaine_512_input] [line 2] [def]
!47 = metadata !{i32 786473, metadata !48}        ; [ DW_TAG_file_type ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/./input.h]
!48 = metadata !{metadata !"./input.h", metadata !"/home/parisa/fpga-hls-examples/sobel_tutorial/part1"}
!49 = metadata !{i32 786484, i32 0, null, metadata !"elaine_512_golden_output", metadata !"elaine_512_golden_output", metadata !"", metadata !50, i32 1, metadata !38, i32 0, i32 1, null, null} ; [ DW_TAG_variable ] [elaine_512_golden_output] [line 1] [def]
!50 = metadata !{i32 786473, metadata !51}        ; [ DW_TAG_file_type ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/./output.h]
!51 = metadata !{metadata !"./output.h", metadata !"/home/parisa/fpga-hls-examples/sobel_tutorial/part1"}
!52 = metadata !{i32 786484, i32 0, metadata !4, metadata !"gx", metadata !"gx", metadata !"", metadata !5, i32 14, metadata !53, i32 1, i32 1, null, null} ; [ DW_TAG_variable ] [gx] [line 14] [local] [def]
!53 = metadata !{i32 786433, null, null, metadata !"", i32 0, i64 288, i64 32, i32 0, i32 0, metadata !54, metadata !55, i32 0, null, null, null} ; [ DW_TAG_array_type ] [line 0, size 288, align 32, offset 0] [from ]
!54 = metadata !{i32 786470, null, null, metadata !"", i32 0, i64 0, i64 0, i64 0, i32 0, metadata !18} ; [ DW_TAG_const_type ] [line 0, size 0, align 0, offset 0] [from int]
!55 = metadata !{metadata !56, metadata !56}
!56 = metadata !{i32 786465, i64 0, i64 3}        ; [ DW_TAG_subrange_type ] [0, 2]
!57 = metadata !{i32 786484, i32 0, metadata !4, metadata !"gy", metadata !"gy", metadata !"", metadata !5, i32 15, metadata !53, i32 1, i32 1, null, null} ; [ DW_TAG_variable ] [gy] [line 15] [local] [def]
!58 = metadata !{metadata !"elaine_512_input"}
!59 = metadata !{metadata !"elaine_512_golden_output"}
!60 = metadata !{metadata !"_Z12sobel_filterPA512_hS0_"}
!61 = metadata !{metadata !"main"}
!62 = metadata !{metadata !"cosf"}
!63 = metadata !{metadata !"reduce_large"}
!64 = metadata !{metadata !"asuint"}
!65 = metadata !{metadata !"reduce_fast"}
!66 = metadata !{metadata !"sinf_poly"}
!67 = metadata !{metadata !"abstop12"}
!68 = metadata !{metadata !"__ieee754_acos"}
!69 = metadata !{metadata !"__ieee754_acosh"}
!70 = metadata !{metadata !"__ieee754_asin"}
!71 = metadata !{metadata !"__ieee754_atan2"}
!72 = metadata !{metadata !"__ieee754_atanh"}
!73 = metadata !{metadata !"__ieee754_cosh"}
!74 = metadata !{metadata !"__ieee754_acosf"}
!75 = metadata !{metadata !"__ieee754_acoshf"}
!76 = metadata !{metadata !"__ieee754_asinf"}
!77 = metadata !{metadata !"__ieee754_atan2f"}
!78 = metadata !{metadata !"__ieee754_atanhf"}
!79 = metadata !{metadata !"__ieee754_coshf"}
!80 = metadata !{metadata !"__ieee754_fmodf"}
!81 = metadata !{metadata !"Zero"}
!82 = metadata !{metadata !"__ieee754_hypotf"}
!83 = metadata !{metadata !"__ieee754_j0f"}
!84 = metadata !{metadata !"__ieee754_y0f"}
!85 = metadata !{metadata !"qzerof"}
!86 = metadata !{metadata !"qS2"}
!87 = metadata !{metadata !"qR2"}
!88 = metadata !{metadata !"qS3"}
!89 = metadata !{metadata !"qR3"}
!90 = metadata !{metadata !"qS5"}
!91 = metadata !{metadata !"qR5"}
!92 = metadata !{metadata !"qS8"}
!93 = metadata !{metadata !"qR8"}
!94 = metadata !{metadata !"pzerof"}
!95 = metadata !{metadata !"pS2"}
!96 = metadata !{metadata !"pR2"}
!97 = metadata !{metadata !"pS3"}
!98 = metadata !{metadata !"pR3"}
!99 = metadata !{metadata !"pS5"}
!100 = metadata !{metadata !"pR5"}
!101 = metadata !{metadata !"pS8"}
!102 = metadata !{metadata !"pR8"}
!103 = metadata !{metadata !"__ieee754_j1f"}
!104 = metadata !{metadata !"__ieee754_y1f"}
!105 = metadata !{metadata !"qonef"}
!106 = metadata !{metadata !"qs2"}
!107 = metadata !{metadata !"qr2"}
!108 = metadata !{metadata !"qs3"}
!109 = metadata !{metadata !"qr3"}
!110 = metadata !{metadata !"qs5"}
!111 = metadata !{metadata !"qr5"}
!112 = metadata !{metadata !"qs8"}
!113 = metadata !{metadata !"qr8"}
!114 = metadata !{metadata !"ponef"}
!115 = metadata !{metadata !"ps2"}
!116 = metadata !{metadata !"pr2"}
!117 = metadata !{metadata !"ps3"}
!118 = metadata !{metadata !"pr3"}
!119 = metadata !{metadata !"ps5"}
!120 = metadata !{metadata !"pr5"}
!121 = metadata !{metadata !"ps8"}
!122 = metadata !{metadata !"pr8"}
!123 = metadata !{metadata !"V0"}
!124 = metadata !{metadata !"U0"}
!125 = metadata !{metadata !"__ieee754_jnf"}
!126 = metadata !{metadata !"__ieee754_ynf"}
!127 = metadata !{metadata !"__ieee754_log10f"}
!128 = metadata !{metadata !"__ieee754_fmod"}
!129 = metadata !{metadata !"__ieee754_remainderf"}
!130 = metadata !{metadata !"__ieee754_rem_pio2f"}
!131 = metadata !{metadata !"two_over_pi"}
!132 = metadata !{metadata !"npio2_hw"}
!133 = metadata !{metadata !"__ieee754_scalbf"}
!134 = metadata !{metadata !"__ieee754_sinhf"}
!135 = metadata !{metadata !"__ieee754_sqrtf"}
!136 = metadata !{metadata !"__ieee754_tgammaf"}
!137 = metadata !{metadata !"__ieee754_hypot"}
!138 = metadata !{metadata !"__ieee754_j0"}
!139 = metadata !{metadata !"__ieee754_y0"}
!140 = metadata !{metadata !"qzero"}
!141 = metadata !{metadata !"pzero"}
!142 = metadata !{metadata !"__ieee754_j1"}
!143 = metadata !{metadata !"__ieee754_y1"}
!144 = metadata !{metadata !"qone"}
!145 = metadata !{metadata !"pone"}
!146 = metadata !{metadata !"__ieee754_jn"}
!147 = metadata !{metadata !"__ieee754_yn"}
!148 = metadata !{metadata !"__ieee754_hypotl"}
!149 = metadata !{metadata !"__ieee754_log10"}
!150 = metadata !{metadata !"__ieee754_remainder"}
!151 = metadata !{metadata !"__ieee754_rem_pio2"}
!152 = metadata !{metadata !"__ieee754_lgammaf_r"}
!153 = metadata !{metadata !"sin_pif"}
!154 = metadata !{metadata !"__ieee754_lgamma_r"}
!155 = metadata !{metadata !"sin_pi"}
!156 = metadata !{metadata !"__ieee754_scalb"}
!157 = metadata !{metadata !"__ieee754_sinh"}
!158 = metadata !{metadata !"__ieee754_sqrt"}
!159 = metadata !{metadata !"__ieee754_tgamma"}
!160 = metadata !{metadata !"exp2"}
!161 = metadata !{metadata !"specialcase"}
!162 = metadata !{metadata !"check_uflow"}
!163 = metadata !{metadata !"opt_barrier_double"}
!164 = metadata !{metadata !"force_eval_double"}
!165 = metadata !{metadata !"check_oflow"}
!166 = metadata !{metadata !"asdouble"}
!167 = metadata !{metadata !"eval_as_double"}
!168 = metadata !{metadata !"asuint64"}
!169 = metadata !{metadata !"top12"}
!170 = metadata !{metadata !"exp"}
!171 = metadata !{metadata !"__exp_data"}
!172 = metadata !{metadata !"hypotl"}
!173 = metadata !{metadata !"__kernel_cos"}
!174 = metadata !{metadata !"__kernel_cosf"}
!175 = metadata !{metadata !"__kernel_rem_pio2f"}
!176 = metadata !{metadata !"PIo2"}
!177 = metadata !{metadata !"init_jk"}
!178 = metadata !{metadata !"__kernel_sinf"}
!179 = metadata !{metadata !"__kernel_tanf"}
!180 = metadata !{metadata !"T"}
!181 = metadata !{metadata !"__kernel_rem_pio2"}
!182 = metadata !{metadata !"__kernel_sin"}
!183 = metadata !{metadata !"__kernel_standard"}
!184 = metadata !{metadata !"__kernel_tan"}
!185 = metadata !{metadata !"log2"}
!186 = metadata !{metadata !"top16"}
!187 = metadata !{metadata !"__log2_data"}
!188 = metadata !{metadata !"log"}
!189 = metadata !{metadata !"__log_data"}
!190 = metadata !{metadata !"__math_uflow"}
!191 = metadata !{metadata !"__math_oflow"}
!192 = metadata !{metadata !"__math_divzero"}
!193 = metadata !{metadata !"__math_invalid"}
!194 = metadata !{metadata !"__math_check_uflow"}
!195 = metadata !{metadata !"__math_check_oflow"}
!196 = metadata !{metadata !"xflow"}
!197 = metadata !{metadata !"__math_uflowf"}
!198 = metadata !{metadata !"__math_oflowf"}
!199 = metadata !{metadata !"__math_divzerof"}
!200 = metadata !{metadata !"__math_invalidf"}
!201 = metadata !{metadata !"xflowf"}
!202 = metadata !{metadata !"nanl"}
!203 = metadata !{metadata !"pow"}
!204 = metadata !{metadata !"exp_inline"}
!205 = metadata !{metadata !"log_inline"}
!206 = metadata !{metadata !"checkint"}
!207 = metadata !{metadata !"issignaling_inline"}
!208 = metadata !{metadata !"zeroinfnan"}
!209 = metadata !{metadata !"__pow_log_data"}
!210 = metadata !{metadata !"asinh"}
!211 = metadata !{metadata !"atan"}
!212 = metadata !{metadata !"aT"}
!213 = metadata !{metadata !"atanlo"}
!214 = metadata !{metadata !"atanhi"}
!215 = metadata !{metadata !"cbrt"}
!216 = metadata !{metadata !"ceil"}
!217 = metadata !{metadata !"copysign"}
!218 = metadata !{metadata !"cos"}
!219 = metadata !{metadata !"erf"}
!220 = metadata !{metadata !"erfc"}
!221 = metadata !{metadata !"exp10"}
!222 = metadata !{metadata !"expm1"}
!223 = metadata !{metadata !"fabs"}
!224 = metadata !{metadata !"asinhf"}
!225 = metadata !{metadata !"atanf"}
!226 = metadata !{metadata !"cbrtf"}
!227 = metadata !{metadata !"ceilf"}
!228 = metadata !{metadata !"copysignf"}
!229 = metadata !{metadata !"fdim"}
!230 = metadata !{metadata !"erff"}
!231 = metadata !{metadata !"erfcf"}
!232 = metadata !{metadata !"exp10f"}
!233 = metadata !{metadata !"exp2f"}
!234 = metadata !{metadata !"__exp2f_data"}
!235 = metadata !{metadata !"expf"}
!236 = metadata !{metadata !"expm1f"}
!237 = metadata !{metadata !"fabsf"}
!238 = metadata !{metadata !"fdimf"}
!239 = metadata !{metadata !"finitef"}
!240 = metadata !{metadata !"floorf"}
!241 = metadata !{metadata !"fmaf"}
!242 = metadata !{metadata !"fmaxf"}
!243 = metadata !{metadata !"fminf"}
!244 = metadata !{metadata !"__fpclassifyf"}
!245 = metadata !{metadata !"frexpf"}
!246 = metadata !{metadata !"ilogbf"}
!247 = metadata !{metadata !"infinityf"}
!248 = metadata !{metadata !"finite"}
!249 = metadata !{metadata !"isinff"}
!250 = metadata !{metadata !"__isinff"}
!251 = metadata !{metadata !"isnanf"}
!252 = metadata !{metadata !"__isnanf"}
!253 = metadata !{metadata !"ldexpf"}
!254 = metadata !{metadata !"llrintf"}
!255 = metadata !{metadata !"TWO23"}
!256 = metadata !{metadata !"llroundf"}
!257 = metadata !{metadata !"log1pf"}
!258 = metadata !{metadata !"log2f"}
!259 = metadata !{metadata !"asfloat"}
!260 = metadata !{metadata !"__log2f_data"}
!261 = metadata !{metadata !"logbf"}
!262 = metadata !{metadata !"logf"}
!263 = metadata !{metadata !"__logf_data"}
!264 = metadata !{metadata !"floor"}
!265 = metadata !{metadata !"lrintf"}
!266 = metadata !{metadata !"lroundf"}
!267 = metadata !{metadata !"fma"}
!268 = metadata !{metadata !"fmax"}
!269 = metadata !{metadata !"fmin"}
!270 = metadata !{metadata !"modff"}
!271 = metadata !{metadata !"nanf"}
!272 = metadata !{metadata !"nearbyintf"}
!273 = metadata !{metadata !"nextafterf"}
!274 = metadata !{metadata !"__fpclassifyd"}
!275 = metadata !{metadata !"pow10f"}
!276 = metadata !{metadata !"powf"}
!277 = metadata !{metadata !"exp2_inline"}
!278 = metadata !{metadata !"log2_inline"}
!279 = metadata !{metadata !"issignalingf_inline"}
!280 = metadata !{metadata !"__powf_log2_data"}
!281 = metadata !{metadata !"remquof"}
!282 = metadata !{metadata !"frexp"}
!283 = metadata !{metadata !"rintf"}
!284 = metadata !{metadata !"roundf"}
!285 = metadata !{metadata !"scalblnf"}
!286 = metadata !{metadata !"scalbnf"}
!287 = metadata !{metadata !"significandf"}
!288 = metadata !{metadata !"tanf"}
!289 = metadata !{metadata !"tanhf"}
!290 = metadata !{metadata !"truncf"}
!291 = metadata !{metadata !"ilogb"}
!292 = metadata !{metadata !"sincosf"}
!293 = metadata !{metadata !"sincosf_poly"}
!294 = metadata !{metadata !"force_eval_float"}
!295 = metadata !{metadata !"__sincosf_table"}
!296 = metadata !{metadata !"__inv_pio4"}
!297 = metadata !{metadata !"sinf"}
!298 = metadata !{metadata !"infinity"}
!299 = metadata !{metadata !"__isinf"}
!300 = metadata !{metadata !"__isinfd"}
!301 = metadata !{metadata !"isnan"}
!302 = metadata !{metadata !"__isnan"}
!303 = metadata !{metadata !"__isnand"}
!304 = metadata !{metadata !"ldexp"}
!305 = metadata !{metadata !"finitel"}
!306 = metadata !{metadata !"llrint"}
!307 = metadata !{metadata !"TWO52"}
!308 = metadata !{metadata !"llround"}
!309 = metadata !{metadata !"log1p"}
!310 = metadata !{metadata !"logb"}
!311 = metadata !{metadata !"lrint"}
!312 = metadata !{metadata !"lround"}
!313 = metadata !{metadata !"modf"}
!314 = metadata !{metadata !"nan"}
!315 = metadata !{metadata !"nearbyint"}
!316 = metadata !{metadata !"nextafter"}
!317 = metadata !{metadata !"pow10"}
!318 = metadata !{metadata !"sqrtl"}
!319 = metadata !{metadata !"inc"}
!320 = metadata !{metadata !"remquo"}
!321 = metadata !{metadata !"rint"}
!322 = metadata !{metadata !"round"}
!323 = metadata !{metadata !"scalbln"}
!324 = metadata !{metadata !"scalbn"}
!325 = metadata !{metadata !"__signbitf"}
!326 = metadata !{metadata !"__signbitd"}
!327 = metadata !{metadata !"significand"}
!328 = metadata !{metadata !"sin"}
!329 = metadata !{metadata !"tan"}
!330 = metadata !{metadata !"tanh"}
!331 = metadata !{metadata !"trunc"}
!332 = metadata !{metadata !"acos"}
!333 = metadata !{metadata !"acosh"}
!334 = metadata !{metadata !"asin"}
!335 = metadata !{metadata !"atan2"}
!336 = metadata !{metadata !"atanh"}
!337 = metadata !{metadata !"cosh"}
!338 = metadata !{metadata !"drem"}
!339 = metadata !{metadata !"acosf"}
!340 = metadata !{metadata !"acoshf"}
!341 = metadata !{metadata !"asinf"}
!342 = metadata !{metadata !"atan2f"}
!343 = metadata !{metadata !"atanhf"}
!344 = metadata !{metadata !"coshf"}
!345 = metadata !{metadata !"dremf"}
!346 = metadata !{metadata !"fmodf"}
!347 = metadata !{metadata !"gammaf"}
!348 = metadata !{metadata !"hypotf"}
!349 = metadata !{metadata !"j0f"}
!350 = metadata !{metadata !"y0f"}
!351 = metadata !{metadata !"j1f"}
!352 = metadata !{metadata !"y1f"}
!353 = metadata !{metadata !"jnf"}
!354 = metadata !{metadata !"ynf"}
!355 = metadata !{metadata !"lgammaf"}
!356 = metadata !{metadata !"log10f"}
!357 = metadata !{metadata !"fmod"}
!358 = metadata !{metadata !"remainderf"}
!359 = metadata !{metadata !"scalbf"}
!360 = metadata !{metadata !"sinhf"}
!361 = metadata !{metadata !"sqrtf"}
!362 = metadata !{metadata !"tgammaf"}
!363 = metadata !{metadata !"gamma"}
!364 = metadata !{metadata !"hypot"}
!365 = metadata !{metadata !"j0"}
!366 = metadata !{metadata !"y0"}
!367 = metadata !{metadata !"j1"}
!368 = metadata !{metadata !"y1"}
!369 = metadata !{metadata !"jn"}
!370 = metadata !{metadata !"yn"}
!371 = metadata !{metadata !"lgamma"}
!372 = metadata !{metadata !"log10"}
!373 = metadata !{metadata !"remainder"}
!374 = metadata !{metadata !"gammaf_r"}
!375 = metadata !{metadata !"lgammaf_r"}
!376 = metadata !{metadata !"gamma_r"}
!377 = metadata !{metadata !"lgamma_r"}
!378 = metadata !{metadata !"scalb"}
!379 = metadata !{metadata !"sincos"}
!380 = metadata !{metadata !"sinh"}
!381 = metadata !{metadata !"sqrt"}
!382 = metadata !{metadata !"tgamma"}
!383 = metadata !{metadata !"legup.function.top"}
!384 = metadata !{i32 2, metadata !"Dwarf Version", i32 4}
!385 = metadata !{i32 2, metadata !"Debug Info Version", i32 1}
!386 = metadata !{metadata !"clang version 3.5.0 (tags/RELEASE_352/final)"}
!387 = metadata !{i32 9, i32 33, metadata !4, null}
!388 = metadata !{i32 10, i32 33, metadata !4, null}
!389 = metadata !{i32 17, i32 10, metadata !390, null}
!390 = metadata !{i32 786443, metadata !1, metadata !391, i32 17, i32 10, i32 2, i32 33} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!391 = metadata !{i32 786443, metadata !1, metadata !17, i32 17, i32 10, i32 1, i32 14} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!392 = metadata !{i32 20, i32 17, metadata !393, null}
!393 = metadata !{i32 786443, metadata !1, metadata !23, i32 20, i32 17, i32 0, i32 4} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!394 = metadata !{i32 29, i32 21, metadata !31, null}
!395 = metadata !{i32 18, i32 14, metadata !396, null}
!396 = metadata !{i32 786443, metadata !1, metadata !397, i32 18, i32 14, i32 2, i32 32} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!397 = metadata !{i32 786443, metadata !1, metadata !20, i32 18, i32 14, i32 1, i32 15} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!398 = metadata !{metadata !399, metadata !399, i64 0}
!399 = metadata !{metadata !"omnipotent char", metadata !400, i64 0}
!400 = metadata !{metadata !"Simple C/C++ TBAA"}
!401 = metadata !{i32 30, i32 21, metadata !31, null}
!402 = metadata !{i32 31, i32 21, metadata !31, null}
!403 = metadata !{i32 35, i32 13, metadata !23, null}
!404 = metadata !{i32 35, i32 13, metadata !405, null}
!405 = metadata !{i32 786443, metadata !1, metadata !23, i32 35, i32 13, i32 1, i32 20} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!406 = metadata !{i32 36, i32 13, metadata !23, null}
!407 = metadata !{i32 36, i32 13, metadata !408, null}
!408 = metadata !{i32 786443, metadata !1, metadata !23, i32 36, i32 13, i32 1, i32 24} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!409 = metadata !{i32 38, i32 13, metadata !23, null}
!410 = metadata !{i32 39, i32 13, metadata !23, null}
!411 = metadata !{i32 41, i32 13, metadata !23, null}
!412 = metadata !{i32 42, i32 9, metadata !23, null}
!413 = metadata !{i32 18, i32 36, metadata !20, null}
!414 = metadata !{i32 22, i32 17, metadata !415, null}
!415 = metadata !{i32 786443, metadata !1, metadata !393, i32 20, i32 73, i32 0, i32 5} ; [ DW_TAG_lexical_block ] [/home/parisa/fpga-hls-examples/sobel_tutorial/part1/sobel.cpp]
!416 = metadata !{i32 21, i32 17, metadata !415, null}
!417 = metadata !{i32 44, i32 1, metadata !4, null}
!418 = metadata !{metadata !"branch_weights", i32 4, i32 64}
!419 = metadata !{metadata !420, metadata !421, i64 72}
!420 = metadata !{metadata !"", metadata !399, i64 0, metadata !421, i64 32, metadata !421, i64 40, metadata !421, i64 48, metadata !421, i64 56, metadata !421, i64 64, metadata !421, i64 72, metadata !421, i64 80, metadata !421, i64 88, metadata !421, i64 96, metadata !421, i64 104}
!421 = metadata !{metadata !"double", metadata !399, i64 0}
!422 = metadata !{metadata !420, metadata !421, i64 80}
!423 = metadata !{metadata !420, metadata !421, i64 48}
!424 = metadata !{metadata !420, metadata !421, i64 56}
!425 = metadata !{metadata !420, metadata !421, i64 64}
!426 = metadata !{metadata !"branch_weights", i32 64, i32 4}
!427 = metadata !{metadata !420, metadata !421, i64 32}
!428 = metadata !{metadata !420, metadata !421, i64 40}
!429 = metadata !{metadata !421, metadata !421, i64 0}
!430 = metadata !{metadata !420, metadata !421, i64 96}
!431 = metadata !{metadata !420, metadata !421, i64 104}
!432 = metadata !{metadata !420, metadata !421, i64 88}
!433 = metadata !{metadata !434, metadata !434, i64 0}
!434 = metadata !{metadata !"int", metadata !399, i64 0}
!435 = metadata !{metadata !436, metadata !436, i64 0}
!436 = metadata !{metadata !"float", metadata !399, i64 0}
!437 = metadata !{metadata !"sin_pif_inst_0"}
!438 = metadata !{metadata !"sin_pi_inst_0"}
!439 = metadata !{metadata !440, metadata !421, i64 64}
!440 = metadata !{metadata !"exp_data", metadata !421, i64 0, metadata !421, i64 8, metadata !421, i64 16, metadata !421, i64 24, metadata !399, i64 32, metadata !421, i64 64, metadata !399, i64 72, metadata !399, i64 112}
!441 = metadata !{metadata !442, metadata !442, i64 0}
!442 = metadata !{metadata !"long long", metadata !399, i64 0}
!443 = metadata !{metadata !440, metadata !421, i64 0}
!444 = metadata !{metadata !440, metadata !421, i64 8}
!445 = metadata !{metadata !440, metadata !421, i64 16}
!446 = metadata !{metadata !440, metadata !421, i64 24}
!447 = metadata !{metadata !448, metadata !421, i64 0}
!448 = metadata !{metadata !"log2_data", metadata !421, i64 0, metadata !421, i64 8, metadata !399, i64 16, metadata !399, i64 64, metadata !399, i64 144, metadata !399, i64 1168}
!449 = metadata !{metadata !448, metadata !421, i64 8}
!450 = metadata !{metadata !451, metadata !421, i64 0}
!451 = metadata !{metadata !"", metadata !421, i64 0, metadata !421, i64 8}
!452 = metadata !{metadata !451, metadata !421, i64 8}
!453 = metadata !{metadata !454, metadata !421, i64 0}
!454 = metadata !{metadata !"log_data", metadata !421, i64 0, metadata !421, i64 8, metadata !399, i64 16, metadata !399, i64 56, metadata !399, i64 144, metadata !399, i64 2192}
!455 = metadata !{metadata !454, metadata !421, i64 8}
!456 = metadata !{metadata !457, metadata !421, i64 0}
!457 = metadata !{metadata !"", metadata !421, i64 0, metadata !421, i64 8, metadata !421, i64 16, metadata !421, i64 24}
!458 = metadata !{metadata !457, metadata !421, i64 16}
!459 = metadata !{metadata !457, metadata !421, i64 24}
!460 = metadata !{metadata !461, metadata !421, i64 0}
!461 = metadata !{metadata !"pow_log_data", metadata !421, i64 0, metadata !421, i64 8, metadata !399, i64 16, metadata !399, i64 72}
!462 = metadata !{metadata !461, metadata !421, i64 8}
!463 = metadata !{metadata !"exp_inline_inst_0"}
!464 = metadata !{metadata !"exp_inline_inst_0,specialcase_inst_0"}
!465 = metadata !{metadata !466, metadata !421, i64 256}
!466 = metadata !{metadata !"exp2f_data", metadata !399, i64 0, metadata !421, i64 256, metadata !399, i64 264, metadata !421, i64 288, metadata !421, i64 296, metadata !399, i64 304}
!467 = metadata !{metadata !466, metadata !421, i64 296}
!468 = metadata !{metadata !466, metadata !421, i64 288}
!469 = metadata !{metadata !470, metadata !421, i64 256}
!470 = metadata !{metadata !"logf_data", metadata !399, i64 0, metadata !421, i64 256, metadata !399, i64 264}
